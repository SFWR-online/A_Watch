
lvgl_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006460  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000084f8  08006644  08006644  00016644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb3c  0800eb3c  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800eb3c  0800eb3c  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eb3c  0800eb3c  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb3c  0800eb3c  0001eb3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb40  0800eb40  0001eb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800eb44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d4  200000c8  0800ec0c  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  0800ec0c  0002089c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00074217  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004027  00000000  00000000  00094308  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001800  00000000  00000000  00098330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001618  00000000  00000000  00099b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c402  00000000  00000000  0009b148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015aad  00000000  00000000  000b754a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ab22c  00000000  00000000  000ccff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00178223  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006378  00000000  00000000  001782a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000c8 	.word	0x200000c8
 8000200:	00000000 	.word	0x00000000
 8000204:	0800662c 	.word	0x0800662c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000cc 	.word	0x200000cc
 8000220:	0800662c 	.word	0x0800662c

08000224 <button_turn>:
#include"allcontrol.h"
int button_turn()
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(key2_GPIO_Port,key2_Pin)==0){
 8000228:	2140      	movs	r1, #64	; 0x40
 800022a:	480a      	ldr	r0, [pc, #40]	; (8000254 <button_turn+0x30>)
 800022c:	f004 fca2 	bl	8004b74 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d10b      	bne.n	800024e <button_turn+0x2a>
			HAL_Delay(100);
 8000236:	2064      	movs	r0, #100	; 0x64
 8000238:	f004 fa02 	bl	8004640 <HAL_Delay>
			if(HAL_GPIO_ReadPin(key2_GPIO_Port,key2_Pin)==0){
 800023c:	2140      	movs	r1, #64	; 0x40
 800023e:	4805      	ldr	r0, [pc, #20]	; (8000254 <button_turn+0x30>)
 8000240:	f004 fc98 	bl	8004b74 <HAL_GPIO_ReadPin>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d101      	bne.n	800024e <button_turn+0x2a>
				return 1;
 800024a:	2301      	movs	r3, #1
 800024c:	e000      	b.n	8000250 <button_turn+0x2c>
			}
	}
	return 0;
 800024e:	2300      	movs	r3, #0
}
 8000250:	4618      	mov	r0, r3
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40010800 	.word	0x40010800

08000258 <button_sure>:
int button_sure()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(key0_GPIO_Port,key0_Pin)==0){
 800025c:	2120      	movs	r1, #32
 800025e:	480a      	ldr	r0, [pc, #40]	; (8000288 <button_sure+0x30>)
 8000260:	f004 fc88 	bl	8004b74 <HAL_GPIO_ReadPin>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d10b      	bne.n	8000282 <button_sure+0x2a>
			HAL_Delay(100);
 800026a:	2064      	movs	r0, #100	; 0x64
 800026c:	f004 f9e8 	bl	8004640 <HAL_Delay>
			if(HAL_GPIO_ReadPin(key0_GPIO_Port,key0_Pin)==0){
 8000270:	2120      	movs	r1, #32
 8000272:	4805      	ldr	r0, [pc, #20]	; (8000288 <button_sure+0x30>)
 8000274:	f004 fc7e 	bl	8004b74 <HAL_GPIO_ReadPin>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d101      	bne.n	8000282 <button_sure+0x2a>
				return 1;
 800027e:	2301      	movs	r3, #1
 8000280:	e000      	b.n	8000284 <button_sure+0x2c>
			}
	}
	return 0;
 8000282:	2300      	movs	r3, #0
}
 8000284:	4618      	mov	r0, r3
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40011000 	.word	0x40011000

0800028c <button_return>:
int button_return()
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(key4_GPIO_Port,key4_Pin)==0){
 8000290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000294:	480a      	ldr	r0, [pc, #40]	; (80002c0 <button_return+0x34>)
 8000296:	f004 fc6d 	bl	8004b74 <HAL_GPIO_ReadPin>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d10c      	bne.n	80002ba <button_return+0x2e>
			HAL_Delay(100);
 80002a0:	2064      	movs	r0, #100	; 0x64
 80002a2:	f004 f9cd 	bl	8004640 <HAL_Delay>
			if(HAL_GPIO_ReadPin(key4_GPIO_Port,key4_Pin)==0){
 80002a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002aa:	4805      	ldr	r0, [pc, #20]	; (80002c0 <button_return+0x34>)
 80002ac:	f004 fc62 	bl	8004b74 <HAL_GPIO_ReadPin>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d101      	bne.n	80002ba <button_return+0x2e>
				return 1;
 80002b6:	2301      	movs	r3, #1
 80002b8:	e000      	b.n	80002bc <button_return+0x30>
			}
	}
	return 0;
 80002ba:	2300      	movs	r3, #0
}
 80002bc:	4618      	mov	r0, r3
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40010800 	.word	0x40010800

080002c4 <button_other1>:
int button_other1()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(key0_GPIO_Port,key0_Pin)==0){
 80002c8:	2120      	movs	r1, #32
 80002ca:	480a      	ldr	r0, [pc, #40]	; (80002f4 <button_other1+0x30>)
 80002cc:	f004 fc52 	bl	8004b74 <HAL_GPIO_ReadPin>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d10b      	bne.n	80002ee <button_other1+0x2a>
			HAL_Delay(100);
 80002d6:	2064      	movs	r0, #100	; 0x64
 80002d8:	f004 f9b2 	bl	8004640 <HAL_Delay>
			if(HAL_GPIO_ReadPin(key0_GPIO_Port,key0_Pin)==0){
 80002dc:	2120      	movs	r1, #32
 80002de:	4805      	ldr	r0, [pc, #20]	; (80002f4 <button_other1+0x30>)
 80002e0:	f004 fc48 	bl	8004b74 <HAL_GPIO_ReadPin>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d101      	bne.n	80002ee <button_other1+0x2a>
				return 1;
 80002ea:	2301      	movs	r3, #1
 80002ec:	e000      	b.n	80002f0 <button_other1+0x2c>
			}
	}
	return 0;
 80002ee:	2300      	movs	r3, #0
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40011000 	.word	0x40011000

080002f8 <fresh_bat>:
}
int get_tem()
{

}
void fresh_bat(int bat,u8g2_t u8g2){
 80002f8:	b084      	sub	sp, #16
 80002fa:	b580      	push	{r7, lr}
 80002fc:	b082      	sub	sp, #8
 80002fe:	af00      	add	r7, sp, #0
 8000300:	6078      	str	r0, [r7, #4]
 8000302:	f107 0014 	add.w	r0, r7, #20
 8000306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	u8g2_SetFont(&u8g2,u8g2_font_siji_t_6x10);
 800030a:	f107 0314 	add.w	r3, r7, #20
 800030e:	490c      	ldr	r1, [pc, #48]	; (8000340 <fresh_bat+0x48>)
 8000310:	4618      	mov	r0, r3
 8000312:	f003 f9f5 	bl	8003700 <u8g2_SetFont>
	u8g2_DrawGlyph(&u8g2,113,10,0xe242);
 8000316:	f107 0014 	add.w	r0, r7, #20
 800031a:	f24e 2342 	movw	r3, #57922	; 0xe242
 800031e:	220a      	movs	r2, #10
 8000320:	2171      	movs	r1, #113	; 0x71
 8000322:	f003 f8a1 	bl	8003468 <u8g2_DrawGlyph>
	u8g2_SendBuffer(&u8g2);
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	4618      	mov	r0, r3
 800032c:	f002 fbb6 	bl	8002a9c <u8g2_SendBuffer>
}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800033a:	b004      	add	sp, #16
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	08007c24 	.word	0x08007c24

08000344 <display_page_time>:
void display_page_time(int time[],u8g2_t u8g2){
 8000344:	b084      	sub	sp, #16
 8000346:	b580      	push	{r7, lr}
 8000348:	b08c      	sub	sp, #48	; 0x30
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
 800034e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	char ptime[12]="";
 8000356:	2300      	movs	r3, #0
 8000358:	627b      	str	r3, [r7, #36]	; 0x24
 800035a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
	convert_time(time,ptime);
 8000364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000368:	4619      	mov	r1, r3
 800036a:	6878      	ldr	r0, [r7, #4]
 800036c:	f001 f874 	bl	8001458 <convert_time>
	char time_str2[9]={ptime[0],ptime[1],'.',ptime[2],ptime[3],'.',ptime[4],ptime[5]};
 8000370:	f107 0318 	add.w	r3, r7, #24
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	721a      	strb	r2, [r3, #8]
 800037c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000380:	763b      	strb	r3, [r7, #24]
 8000382:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000386:	767b      	strb	r3, [r7, #25]
 8000388:	232e      	movs	r3, #46	; 0x2e
 800038a:	76bb      	strb	r3, [r7, #26]
 800038c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000390:	76fb      	strb	r3, [r7, #27]
 8000392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000396:	773b      	strb	r3, [r7, #28]
 8000398:	232e      	movs	r3, #46	; 0x2e
 800039a:	777b      	strb	r3, [r7, #29]
 800039c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80003a0:	77bb      	strb	r3, [r7, #30]
 80003a2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80003a6:	77fb      	strb	r3, [r7, #31]
	char time_str1[6]={ptime[6],ptime[7],':',ptime[8],ptime[9]};
 80003a8:	f107 0310 	add.w	r3, r7, #16
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	809a      	strh	r2, [r3, #4]
 80003b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80003b6:	743b      	strb	r3, [r7, #16]
 80003b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80003bc:	747b      	strb	r3, [r7, #17]
 80003be:	233a      	movs	r3, #58	; 0x3a
 80003c0:	74bb      	strb	r3, [r7, #18]
 80003c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80003c6:	74fb      	strb	r3, [r7, #19]
 80003c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80003cc:	753b      	strb	r3, [r7, #20]
	char time_str3[3]={ptime[10],ptime[11]};
 80003ce:	f107 030c 	add.w	r3, r7, #12
 80003d2:	2100      	movs	r1, #0
 80003d4:	460a      	mov	r2, r1
 80003d6:	801a      	strh	r2, [r3, #0]
 80003d8:	460a      	mov	r2, r1
 80003da:	709a      	strb	r2, [r3, #2]
 80003dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80003e0:	733b      	strb	r3, [r7, #12]
 80003e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003e6:	737b      	strb	r3, [r7, #13]
	u8g2_SetFont(&u8g2,u8g2_font_inr21_mf);
 80003e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003ec:	4914      	ldr	r1, [pc, #80]	; (8000440 <display_page_time+0xfc>)
 80003ee:	4618      	mov	r0, r3
 80003f0:	f003 f986 	bl	8003700 <u8g2_SetFont>
	u8g2_DrawStr(&u8g2,20,48,time_str1);
 80003f4:	f107 0310 	add.w	r3, r7, #16
 80003f8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80003fc:	2230      	movs	r2, #48	; 0x30
 80003fe:	2114      	movs	r1, #20
 8000400:	f003 f8e0 	bl	80035c4 <u8g2_DrawStr>
	u8g2_SetFont(&u8g2,u8g2_font_t0_14_mf);
 8000404:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000408:	490e      	ldr	r1, [pc, #56]	; (8000444 <display_page_time+0x100>)
 800040a:	4618      	mov	r0, r3
 800040c:	f003 f978 	bl	8003700 <u8g2_SetFont>
	u8g2_DrawStr(&u8g2,40,10,time_str2);
 8000410:	f107 0318 	add.w	r3, r7, #24
 8000414:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000418:	220a      	movs	r2, #10
 800041a:	2128      	movs	r1, #40	; 0x28
 800041c:	f003 f8d2 	bl	80035c4 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,113,48,time_str3);
 8000420:	f107 030c 	add.w	r3, r7, #12
 8000424:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000428:	2230      	movs	r2, #48	; 0x30
 800042a:	2171      	movs	r1, #113	; 0x71
 800042c:	f003 f8ca 	bl	80035c4 <u8g2_DrawStr>
}
 8000430:	bf00      	nop
 8000432:	3730      	adds	r7, #48	; 0x30
 8000434:	46bd      	mov	sp, r7
 8000436:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800043a:	b004      	add	sp, #16
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	0800a5a4 	.word	0x0800a5a4
 8000444:	08007098 	.word	0x08007098

08000448 <display_page_music>:
	u8g2_ClearBuffer(&u8g2);
	u8g2_DrawStr(&u8g2,30,45,"SFWR");
	u8g2_SendBuffer(&u8g2);
	HAL_Delay(1500);
}
void display_page_music(u8g2_t u8g2,int music_pos){
 8000448:	b084      	sub	sp, #16
 800044a:	b580      	push	{r7, lr}
 800044c:	af00      	add	r7, sp, #0
 800044e:	f107 0c08 	add.w	ip, r7, #8
 8000452:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	u8g2_ClearBuffer(&u8g2);
 8000456:	f107 0008 	add.w	r0, r7, #8
 800045a:	f002 faac 	bl	80029b6 <u8g2_ClearBuffer>
	u8g2_DrawStr(&u8g2,10,10,"music1");
 800045e:	4b1f      	ldr	r3, [pc, #124]	; (80004dc <display_page_music+0x94>)
 8000460:	220a      	movs	r2, #10
 8000462:	210a      	movs	r1, #10
 8000464:	f107 0008 	add.w	r0, r7, #8
 8000468:	f003 f8ac 	bl	80035c4 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,10,22,"music2");
 800046c:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <display_page_music+0x98>)
 800046e:	2216      	movs	r2, #22
 8000470:	210a      	movs	r1, #10
 8000472:	f107 0008 	add.w	r0, r7, #8
 8000476:	f003 f8a5 	bl	80035c4 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,10,34,"music3");
 800047a:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <display_page_music+0x9c>)
 800047c:	2222      	movs	r2, #34	; 0x22
 800047e:	210a      	movs	r1, #10
 8000480:	f107 0008 	add.w	r0, r7, #8
 8000484:	f003 f89e 	bl	80035c4 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,10,46,"music4");
 8000488:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <display_page_music+0xa0>)
 800048a:	222e      	movs	r2, #46	; 0x2e
 800048c:	210a      	movs	r1, #10
 800048e:	f107 0008 	add.w	r0, r7, #8
 8000492:	f003 f897 	bl	80035c4 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,10,58,"music5");
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <display_page_music+0xa4>)
 8000498:	223a      	movs	r2, #58	; 0x3a
 800049a:	210a      	movs	r1, #10
 800049c:	f107 0008 	add.w	r0, r7, #8
 80004a0:	f003 f890 	bl	80035c4 <u8g2_DrawStr>
	u8g2_SetFont(&u8g2,u8g2_font_siji_t_6x10);
 80004a4:	4912      	ldr	r1, [pc, #72]	; (80004f0 <display_page_music+0xa8>)
 80004a6:	f107 0008 	add.w	r0, r7, #8
 80004aa:	f003 f929 	bl	8003700 <u8g2_SetFont>
	u8g2_DrawGlyph(&u8g2,60,10+music_pos*12-12,0xe12e);
 80004ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	461a      	mov	r2, r3
 80004b6:	0052      	lsls	r2, r2, #1
 80004b8:	4413      	add	r3, r2
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	b29b      	uxth	r3, r3
 80004be:	3b02      	subs	r3, #2
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	f24e 132e 	movw	r3, #57646	; 0xe12e
 80004c6:	213c      	movs	r1, #60	; 0x3c
 80004c8:	f107 0008 	add.w	r0, r7, #8
 80004cc:	f002 ffcc 	bl	8003468 <u8g2_DrawGlyph>
	//u8g2_SendBuffer(&u8g2);
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004d8:	b004      	add	sp, #16
 80004da:	4770      	bx	lr
 80004dc:	08006658 	.word	0x08006658
 80004e0:	08006660 	.word	0x08006660
 80004e4:	08006668 	.word	0x08006668
 80004e8:	08006670 	.word	0x08006670
 80004ec:	08006678 	.word	0x08006678
 80004f0:	08007c24 	.word	0x08007c24

080004f4 <display_card>:
void display_card(u8g2_t u8g2,int p1[]){//display now card/p1 card/p2 card
 80004f4:	b084      	sub	sp, #16
 80004f6:	b590      	push	{r4, r7, lr}
 80004f8:	b08b      	sub	sp, #44	; 0x2c
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000500:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int posnow=0,pos_sure=0;
 8000504:	2300      	movs	r3, #0
 8000506:	627b      	str	r3, [r7, #36]	; 0x24
 8000508:	2300      	movs	r3, #0
 800050a:	623b      	str	r3, [r7, #32]
	u8g2_SetFont(&u8g2,u8g2_font_unifont_t_cards);
 800050c:	499e      	ldr	r1, [pc, #632]	; (8000788 <display_card+0x294>)
 800050e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000512:	f003 f8f5 	bl	8003700 <u8g2_SetFont>
	for(int i=1;i<=14;i++)
 8000516:	2301      	movs	r3, #1
 8000518:	61fb      	str	r3, [r7, #28]
 800051a:	e082      	b.n	8000622 <display_card+0x12e>
		if(p1[i]){
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000524:	4413      	add	r3, r2
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d077      	beq.n	800061c <display_card+0x128>
			p1_reline[++posnow]=0x20+i;
 800052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052e:	3301      	adds	r3, #1
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
 8000532:	69fb      	ldr	r3, [r7, #28]
 8000534:	f103 0220 	add.w	r2, r3, #32
 8000538:	4994      	ldr	r1, [pc, #592]	; (800078c <display_card+0x298>)
 800053a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			u8g2_DrawGlyph(&u8g2,(posnow-1)%7*12,(posnow-1)/7*22+33,0x20+i);
 8000540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000542:	1e5a      	subs	r2, r3, #1
 8000544:	4b92      	ldr	r3, [pc, #584]	; (8000790 <display_card+0x29c>)
 8000546:	fb83 1302 	smull	r1, r3, r3, r2
 800054a:	4413      	add	r3, r2
 800054c:	1099      	asrs	r1, r3, #2
 800054e:	17d3      	asrs	r3, r2, #31
 8000550:	1ac9      	subs	r1, r1, r3
 8000552:	460b      	mov	r3, r1
 8000554:	00db      	lsls	r3, r3, #3
 8000556:	1a5b      	subs	r3, r3, r1
 8000558:	1ad1      	subs	r1, r2, r3
 800055a:	b28b      	uxth	r3, r1
 800055c:	461a      	mov	r2, r3
 800055e:	0052      	lsls	r2, r2, #1
 8000560:	4413      	add	r3, r2
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	b299      	uxth	r1, r3
 8000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000568:	3b01      	subs	r3, #1
 800056a:	4a89      	ldr	r2, [pc, #548]	; (8000790 <display_card+0x29c>)
 800056c:	fb82 0203 	smull	r0, r2, r2, r3
 8000570:	441a      	add	r2, r3
 8000572:	1092      	asrs	r2, r2, #2
 8000574:	17db      	asrs	r3, r3, #31
 8000576:	1ad3      	subs	r3, r2, r3
 8000578:	b29b      	uxth	r3, r3
 800057a:	461a      	mov	r2, r3
 800057c:	0092      	lsls	r2, r2, #2
 800057e:	441a      	add	r2, r3
 8000580:	0052      	lsls	r2, r2, #1
 8000582:	4413      	add	r3, r2
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	b29b      	uxth	r3, r3
 8000588:	3321      	adds	r3, #33	; 0x21
 800058a:	b29a      	uxth	r2, r3
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	b29b      	uxth	r3, r3
 8000590:	3320      	adds	r3, #32
 8000592:	b29b      	uxth	r3, r3
 8000594:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000598:	f002 ff66 	bl	8003468 <u8g2_DrawGlyph>
			if(p1[i]==2){
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80005a4:	4413      	add	r3, r2
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d137      	bne.n	800061c <display_card+0x128>
				p1_reline[++posnow]=0x30+i;
 80005ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ae:	3301      	adds	r3, #1
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80005b8:	4974      	ldr	r1, [pc, #464]	; (800078c <display_card+0x298>)
 80005ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				u8g2_DrawGlyph(&u8g2,(posnow-1)%7*12 ,(posnow-1)/7*22+33,0x30+i);
 80005c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c2:	1e5a      	subs	r2, r3, #1
 80005c4:	4b72      	ldr	r3, [pc, #456]	; (8000790 <display_card+0x29c>)
 80005c6:	fb83 1302 	smull	r1, r3, r3, r2
 80005ca:	4413      	add	r3, r2
 80005cc:	1099      	asrs	r1, r3, #2
 80005ce:	17d3      	asrs	r3, r2, #31
 80005d0:	1ac9      	subs	r1, r1, r3
 80005d2:	460b      	mov	r3, r1
 80005d4:	00db      	lsls	r3, r3, #3
 80005d6:	1a5b      	subs	r3, r3, r1
 80005d8:	1ad1      	subs	r1, r2, r3
 80005da:	b28b      	uxth	r3, r1
 80005dc:	461a      	mov	r2, r3
 80005de:	0052      	lsls	r2, r2, #1
 80005e0:	4413      	add	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	b299      	uxth	r1, r3
 80005e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e8:	3b01      	subs	r3, #1
 80005ea:	4a69      	ldr	r2, [pc, #420]	; (8000790 <display_card+0x29c>)
 80005ec:	fb82 0203 	smull	r0, r2, r2, r3
 80005f0:	441a      	add	r2, r3
 80005f2:	1092      	asrs	r2, r2, #2
 80005f4:	17db      	asrs	r3, r3, #31
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	461a      	mov	r2, r3
 80005fc:	0092      	lsls	r2, r2, #2
 80005fe:	441a      	add	r2, r3
 8000600:	0052      	lsls	r2, r2, #1
 8000602:	4413      	add	r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	b29b      	uxth	r3, r3
 8000608:	3321      	adds	r3, #33	; 0x21
 800060a:	b29a      	uxth	r2, r3
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	b29b      	uxth	r3, r3
 8000610:	3330      	adds	r3, #48	; 0x30
 8000612:	b29b      	uxth	r3, r3
 8000614:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000618:	f002 ff26 	bl	8003468 <u8g2_DrawGlyph>
	for(int i=1;i<=14;i++)
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	3301      	adds	r3, #1
 8000620:	61fb      	str	r3, [r7, #28]
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	2b0e      	cmp	r3, #14
 8000626:	f77f af79 	ble.w	800051c <display_card+0x28>
			}
		}
	for(int i=1;i<=p1_card;i++)
 800062a:	2301      	movs	r3, #1
 800062c:	61bb      	str	r3, [r7, #24]
 800062e:	e042      	b.n	80006b6 <display_card+0x1c2>
		if(p1_flag[i]){
 8000630:	4a58      	ldr	r2, [pc, #352]	; (8000794 <display_card+0x2a0>)
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d039      	beq.n	80006b0 <display_card+0x1bc>
			if(pos_sure<=10)
 800063c:	6a3b      	ldr	r3, [r7, #32]
 800063e:	2b0a      	cmp	r3, #10
 8000640:	dc11      	bgt.n	8000666 <display_card+0x172>
				u8g2_DrawGlyph(&u8g2,pos_sure*11,16,p1_reline[i]);
 8000642:	6a3b      	ldr	r3, [r7, #32]
 8000644:	b29b      	uxth	r3, r3
 8000646:	461a      	mov	r2, r3
 8000648:	0092      	lsls	r2, r2, #2
 800064a:	441a      	add	r2, r3
 800064c:	0052      	lsls	r2, r2, #1
 800064e:	4413      	add	r3, r2
 8000650:	b299      	uxth	r1, r3
 8000652:	4a4e      	ldr	r2, [pc, #312]	; (800078c <display_card+0x298>)
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065a:	b29b      	uxth	r3, r3
 800065c:	2210      	movs	r2, #16
 800065e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000662:	f002 ff01 	bl	8003468 <u8g2_DrawGlyph>
			if(pos_sure>10)
 8000666:	6a3b      	ldr	r3, [r7, #32]
 8000668:	2b0a      	cmp	r3, #10
 800066a:	dd1e      	ble.n	80006aa <display_card+0x1b6>
				u8g2_DrawGlyph(&u8g2,pos_sure%10*11+72,33,p1_reline[i]);
 800066c:	6a3a      	ldr	r2, [r7, #32]
 800066e:	4b4a      	ldr	r3, [pc, #296]	; (8000798 <display_card+0x2a4>)
 8000670:	fb83 1302 	smull	r1, r3, r3, r2
 8000674:	1099      	asrs	r1, r3, #2
 8000676:	17d3      	asrs	r3, r2, #31
 8000678:	1ac9      	subs	r1, r1, r3
 800067a:	460b      	mov	r3, r1
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	440b      	add	r3, r1
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	1ad1      	subs	r1, r2, r3
 8000684:	b28b      	uxth	r3, r1
 8000686:	461a      	mov	r2, r3
 8000688:	0092      	lsls	r2, r2, #2
 800068a:	441a      	add	r2, r3
 800068c:	0052      	lsls	r2, r2, #1
 800068e:	4413      	add	r3, r2
 8000690:	b29b      	uxth	r3, r3
 8000692:	3348      	adds	r3, #72	; 0x48
 8000694:	b299      	uxth	r1, r3
 8000696:	4a3d      	ldr	r2, [pc, #244]	; (800078c <display_card+0x298>)
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069e:	b29b      	uxth	r3, r3
 80006a0:	2221      	movs	r2, #33	; 0x21
 80006a2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80006a6:	f002 fedf 	bl	8003468 <u8g2_DrawGlyph>
			pos_sure++;
 80006aa:	6a3b      	ldr	r3, [r7, #32]
 80006ac:	3301      	adds	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
	for(int i=1;i<=p1_card;i++)
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	3301      	adds	r3, #1
 80006b4:	61bb      	str	r3, [r7, #24]
 80006b6:	4b39      	ldr	r3, [pc, #228]	; (800079c <display_card+0x2a8>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	69ba      	ldr	r2, [r7, #24]
 80006bc:	429a      	cmp	r2, r3
 80006be:	ddb7      	ble.n	8000630 <display_card+0x13c>
		}
	if(p2_len){
 80006c0:	4b37      	ldr	r3, [pc, #220]	; (80007a0 <display_card+0x2ac>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d057      	beq.n	8000778 <display_card+0x284>
		char char_p2[8]="",char_p2_2[8]="";
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
		u8g2_SetFont(&u8g2,u8g2_font_5x7_tf);
 80006d8:	4932      	ldr	r1, [pc, #200]	; (80007a4 <display_card+0x2b0>)
 80006da:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80006de:	f003 f80f 	bl	8003700 <u8g2_SetFont>
		for(int i=1;i<=minn(7,p2_len);i++)
 80006e2:	2301      	movs	r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	e012      	b.n	800070e <display_card+0x21a>
			char_p2_2[i-1]=get_card_p2(p2_line[i]);
 80006e8:	4a2f      	ldr	r2, [pc, #188]	; (80007a8 <display_card+0x2b4>)
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	1e5c      	subs	r4, r3, #1
 80006f4:	4610      	mov	r0, r2
 80006f6:	f001 f853 	bl	80017a0 <get_card_p2>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000702:	4423      	add	r3, r4
 8000704:	f803 2c28 	strb.w	r2, [r3, #-40]
		for(int i=1;i<=minn(7,p2_len);i++)
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	3301      	adds	r3, #1
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <display_card+0x2ac>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4619      	mov	r1, r3
 8000714:	2007      	movs	r0, #7
 8000716:	f001 f832 	bl	800177e <minn>
 800071a:	4602      	mov	r2, r0
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	4293      	cmp	r3, r2
 8000720:	dde2      	ble.n	80006e8 <display_card+0x1f4>
		for(int i=7;i<=p2_len;i++)
 8000722:	2307      	movs	r3, #7
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	e013      	b.n	8000750 <display_card+0x25c>
			char_p2_2[i-8]=get_card_p2(p2_line[i]);
 8000728:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <display_card+0x2b4>)
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	f1a3 0408 	sub.w	r4, r3, #8
 8000736:	4610      	mov	r0, r2
 8000738:	f001 f832 	bl	80017a0 <get_card_p2>
 800073c:	4603      	mov	r3, r0
 800073e:	461a      	mov	r2, r3
 8000740:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000744:	4423      	add	r3, r4
 8000746:	f803 2c28 	strb.w	r2, [r3, #-40]
		for(int i=7;i<=p2_len;i++)
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	3301      	adds	r3, #1
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <display_card+0x2ac>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	693a      	ldr	r2, [r7, #16]
 8000756:	429a      	cmp	r2, r3
 8000758:	dde6      	ble.n	8000728 <display_card+0x234>
		u8g2_DrawStr(&u8g2,88,47,char_p2);
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	222f      	movs	r2, #47	; 0x2f
 8000760:	2158      	movs	r1, #88	; 0x58
 8000762:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000766:	f002 ff2d 	bl	80035c4 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2,88,57,char_p2_2);
 800076a:	463b      	mov	r3, r7
 800076c:	2239      	movs	r2, #57	; 0x39
 800076e:	2158      	movs	r1, #88	; 0x58
 8000770:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000774:	f002 ff26 	bl	80035c4 <u8g2_DrawStr>
	}
}
 8000778:	bf00      	nop
 800077a:	372c      	adds	r7, #44	; 0x2c
 800077c:	46bd      	mov	sp, r7
 800077e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000782:	b004      	add	sp, #16
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	0800c3f8 	.word	0x0800c3f8
 800078c:	20000688 	.word	0x20000688
 8000790:	92492493 	.word	0x92492493
 8000794:	200006c4 	.word	0x200006c4
 8000798:	66666667 	.word	0x66666667
 800079c:	20000608 	.word	0x20000608
 80007a0:	20000700 	.word	0x20000700
 80007a4:	0800cf18 	.word	0x0800cf18
 80007a8:	2000060c 	.word	0x2000060c

080007ac <card_feedback>:
void card_feedback(int from_line[],int from_len){
 80007ac:	b480      	push	{r7}
 80007ae:	b08b      	sub	sp, #44	; 0x2c
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	for(int i=1;i<=14;i++)p2_line[i]=0;
 80007b6:	2301      	movs	r3, #1
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
 80007ba:	e007      	b.n	80007cc <card_feedback+0x20>
 80007bc:	4a75      	ldr	r2, [pc, #468]	; (8000994 <card_feedback+0x1e8>)
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	2100      	movs	r1, #0
 80007c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	3301      	adds	r3, #1
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
 80007cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ce:	2b0e      	cmp	r3, #14
 80007d0:	ddf4      	ble.n	80007bc <card_feedback+0x10>
	p2_len=0;
 80007d2:	4b71      	ldr	r3, [pc, #452]	; (8000998 <card_feedback+0x1ec>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
	if(from_len==1){
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d121      	bne.n	8000822 <card_feedback+0x76>
		for(int i=from_line[1]+1;i<=14;i++)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3304      	adds	r3, #4
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	623b      	str	r3, [r7, #32]
 80007e8:	e018      	b.n	800081c <card_feedback+0x70>
			if(p2[i]){
 80007ea:	4a6c      	ldr	r2, [pc, #432]	; (800099c <card_feedback+0x1f0>)
 80007ec:	6a3b      	ldr	r3, [r7, #32]
 80007ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d00f      	beq.n	8000816 <card_feedback+0x6a>
				p2_line[1]=i;
 80007f6:	4a67      	ldr	r2, [pc, #412]	; (8000994 <card_feedback+0x1e8>)
 80007f8:	6a3b      	ldr	r3, [r7, #32]
 80007fa:	6053      	str	r3, [r2, #4]
				p2_len=1;
 80007fc:	4b66      	ldr	r3, [pc, #408]	; (8000998 <card_feedback+0x1ec>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
				p2[i]--;
 8000802:	4a66      	ldr	r2, [pc, #408]	; (800099c <card_feedback+0x1f0>)
 8000804:	6a3b      	ldr	r3, [r7, #32]
 8000806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800080a:	1e5a      	subs	r2, r3, #1
 800080c:	4963      	ldr	r1, [pc, #396]	; (800099c <card_feedback+0x1f0>)
 800080e:	6a3b      	ldr	r3, [r7, #32]
 8000810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				return;
 8000814:	e0ba      	b.n	800098c <card_feedback+0x1e0>
		for(int i=from_line[1]+1;i<=14;i++)
 8000816:	6a3b      	ldr	r3, [r7, #32]
 8000818:	3301      	adds	r3, #1
 800081a:	623b      	str	r3, [r7, #32]
 800081c:	6a3b      	ldr	r3, [r7, #32]
 800081e:	2b0e      	cmp	r3, #14
 8000820:	dde3      	ble.n	80007ea <card_feedback+0x3e>
			}
	}
	if(from_len==2){
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d120      	bne.n	800086a <card_feedback+0xbe>
		for(int i=from_line[1]+1;i<=14;i++)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3304      	adds	r3, #4
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	61fb      	str	r3, [r7, #28]
 8000832:	e017      	b.n	8000864 <card_feedback+0xb8>
			if(p2[i]==2){
 8000834:	4a59      	ldr	r2, [pc, #356]	; (800099c <card_feedback+0x1f0>)
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083c:	2b02      	cmp	r3, #2
 800083e:	d10e      	bne.n	800085e <card_feedback+0xb2>
				p2_line[1]=i;
 8000840:	4a54      	ldr	r2, [pc, #336]	; (8000994 <card_feedback+0x1e8>)
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	6053      	str	r3, [r2, #4]
				p2_line[2]=i;
 8000846:	4a53      	ldr	r2, [pc, #332]	; (8000994 <card_feedback+0x1e8>)
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	6093      	str	r3, [r2, #8]
				p2[i]=0;
 800084c:	4a53      	ldr	r2, [pc, #332]	; (800099c <card_feedback+0x1f0>)
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	2100      	movs	r1, #0
 8000852:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				p2_len=2;
 8000856:	4b50      	ldr	r3, [pc, #320]	; (8000998 <card_feedback+0x1ec>)
 8000858:	2202      	movs	r2, #2
 800085a:	601a      	str	r2, [r3, #0]
				return;
 800085c:	e096      	b.n	800098c <card_feedback+0x1e0>
		for(int i=from_line[1]+1;i<=14;i++)
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3301      	adds	r3, #1
 8000862:	61fb      	str	r3, [r7, #28]
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	2b0e      	cmp	r3, #14
 8000868:	dde4      	ble.n	8000834 <card_feedback+0x88>
			}
	}
	if(from_len>=5){
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	2b04      	cmp	r3, #4
 800086e:	f340 808d 	ble.w	800098c <card_feedback+0x1e0>
		int tem_len=0;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
		if(from_line[1]==from_line[2]){
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3304      	adds	r3, #4
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3308      	adds	r3, #8
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	429a      	cmp	r2, r3
 8000884:	d145      	bne.n	8000912 <card_feedback+0x166>
			for(int i=from_line[1]+1;i<=14;i++)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3304      	adds	r3, #4
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	3301      	adds	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	e03b      	b.n	800090a <card_feedback+0x15e>
				if(p2[i]==2)
 8000892:	4a42      	ldr	r2, [pc, #264]	; (800099c <card_feedback+0x1f0>)
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089a:	2b02      	cmp	r3, #2
 800089c:	d103      	bne.n	80008a6 <card_feedback+0xfa>
					tem_len++;
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	3301      	adds	r3, #1
 80008a2:	61bb      	str	r3, [r7, #24]
 80008a4:	e02e      	b.n	8000904 <card_feedback+0x158>
				else{
					if(tem_len*2>=from_len){
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	dc27      	bgt.n	8000900 <card_feedback+0x154>
						for(int j=i-tem_len;j<i;j++){
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	e01d      	b.n	80008f6 <card_feedback+0x14a>
							p2_line[++p2_len]=i;
 80008ba:	4b37      	ldr	r3, [pc, #220]	; (8000998 <card_feedback+0x1ec>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	4a35      	ldr	r2, [pc, #212]	; (8000998 <card_feedback+0x1ec>)
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b34      	ldr	r3, [pc, #208]	; (8000998 <card_feedback+0x1ec>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4932      	ldr	r1, [pc, #200]	; (8000994 <card_feedback+0x1e8>)
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							p2_line[++p2_len]=i;
 80008d0:	4b31      	ldr	r3, [pc, #196]	; (8000998 <card_feedback+0x1ec>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a30      	ldr	r2, [pc, #192]	; (8000998 <card_feedback+0x1ec>)
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	4b2f      	ldr	r3, [pc, #188]	; (8000998 <card_feedback+0x1ec>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	492d      	ldr	r1, [pc, #180]	; (8000994 <card_feedback+0x1e8>)
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							p2[j]=0;
 80008e6:	4a2d      	ldr	r2, [pc, #180]	; (800099c <card_feedback+0x1f0>)
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	2100      	movs	r1, #0
 80008ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						for(int j=i-tem_len;j<i;j++){
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	3301      	adds	r3, #1
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	dbdd      	blt.n	80008ba <card_feedback+0x10e>
						}
						return;
 80008fe:	e045      	b.n	800098c <card_feedback+0x1e0>
					}
					tem_len=0;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
			for(int i=from_line[1]+1;i<=14;i++)
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3301      	adds	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	2b0e      	cmp	r3, #14
 800090e:	ddc0      	ble.n	8000892 <card_feedback+0xe6>
 8000910:	e03c      	b.n	800098c <card_feedback+0x1e0>
				}
		}
		else{
			for(int i=from_line[1]+1;i<=14;i++)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3304      	adds	r3, #4
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	3301      	adds	r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	e033      	b.n	8000986 <card_feedback+0x1da>
				if(p2[i])
 800091e:	4a1f      	ldr	r2, [pc, #124]	; (800099c <card_feedback+0x1f0>)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d003      	beq.n	8000932 <card_feedback+0x186>
					tem_len++;
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	3301      	adds	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	e026      	b.n	8000980 <card_feedback+0x1d4>
				else{
					if(tem_len>=from_len){
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	429a      	cmp	r2, r3
 8000938:	db20      	blt.n	800097c <card_feedback+0x1d0>
						for(int j=i-tem_len;j<i;j++){
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	e016      	b.n	8000972 <card_feedback+0x1c6>
							p2_line[++p2_len]=j;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <card_feedback+0x1ec>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	4a13      	ldr	r2, [pc, #76]	; (8000998 <card_feedback+0x1ec>)
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <card_feedback+0x1ec>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4910      	ldr	r1, [pc, #64]	; (8000994 <card_feedback+0x1e8>)
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							p2[j]--;
 800095a:	4a10      	ldr	r2, [pc, #64]	; (800099c <card_feedback+0x1f0>)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000962:	1e5a      	subs	r2, r3, #1
 8000964:	490d      	ldr	r1, [pc, #52]	; (800099c <card_feedback+0x1f0>)
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						for(int j=i-tem_len;j<i;j++){
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	3301      	adds	r3, #1
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	429a      	cmp	r2, r3
 8000978:	dbe4      	blt.n	8000944 <card_feedback+0x198>
						}
						return;
 800097a:	e007      	b.n	800098c <card_feedback+0x1e0>
					}
					tem_len=0;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
			for(int i=from_line[1]+1;i<=14;i++)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3301      	adds	r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	2b0e      	cmp	r3, #14
 800098a:	ddc8      	ble.n	800091e <card_feedback+0x172>
				}
		}
	}
}
 800098c:	372c      	adds	r7, #44	; 0x2c
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	2000060c 	.word	0x2000060c
 8000998:	20000700 	.word	0x20000700
 800099c:	2000058c 	.word	0x2000058c

080009a0 <let_p2>:
void let_p2(){
 80009a0:	b480      	push	{r7}
 80009a2:	b089      	sub	sp, #36	; 0x24
 80009a4:	af00      	add	r7, sp, #0
	for(int i=1;i<=14;i++)p2_line[i]=0;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	e007      	b.n	80009bc <let_p2+0x1c>
 80009ac:	4a5e      	ldr	r2, [pc, #376]	; (8000b28 <let_p2+0x188>)
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	2100      	movs	r1, #0
 80009b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3301      	adds	r3, #1
 80009ba:	61fb      	str	r3, [r7, #28]
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	2b0e      	cmp	r3, #14
 80009c0:	ddf4      	ble.n	80009ac <let_p2+0xc>
	p2_len=0;
 80009c2:	4b5a      	ldr	r3, [pc, #360]	; (8000b2c <let_p2+0x18c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
	int tem_len=0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
	for(int i=1;i<=14;i++)
 80009cc:	2301      	movs	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	e039      	b.n	8000a46 <let_p2+0xa6>
		if(p2[i]==2)
 80009d2:	4a57      	ldr	r2, [pc, #348]	; (8000b30 <let_p2+0x190>)
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d103      	bne.n	80009e6 <let_p2+0x46>
			tem_len++;
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	3301      	adds	r3, #1
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	e02c      	b.n	8000a40 <let_p2+0xa0>
		else{
			if(tem_len>=3){
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	dd27      	ble.n	8000a3c <let_p2+0x9c>
				for(int j=i-tem_len;j<i;j++){
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	e01d      	b.n	8000a32 <let_p2+0x92>
					p2_line[++p2_len]=j;
 80009f6:	4b4d      	ldr	r3, [pc, #308]	; (8000b2c <let_p2+0x18c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	3301      	adds	r3, #1
 80009fc:	4a4b      	ldr	r2, [pc, #300]	; (8000b2c <let_p2+0x18c>)
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	4b4a      	ldr	r3, [pc, #296]	; (8000b2c <let_p2+0x18c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4948      	ldr	r1, [pc, #288]	; (8000b28 <let_p2+0x188>)
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					p2_line[++p2_len]=j;
 8000a0c:	4b47      	ldr	r3, [pc, #284]	; (8000b2c <let_p2+0x18c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4a46      	ldr	r2, [pc, #280]	; (8000b2c <let_p2+0x18c>)
 8000a14:	6013      	str	r3, [r2, #0]
 8000a16:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <let_p2+0x18c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4943      	ldr	r1, [pc, #268]	; (8000b28 <let_p2+0x188>)
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					p2[j]=0;
 8000a22:	4a43      	ldr	r2, [pc, #268]	; (8000b30 <let_p2+0x190>)
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	2100      	movs	r1, #0
 8000a28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int j=i-tem_len;j<i;j++){
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dbdd      	blt.n	80009f6 <let_p2+0x56>
				}
				return;
 8000a3a:	e071      	b.n	8000b20 <let_p2+0x180>
			}
			tem_len=0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]
	for(int i=1;i<=14;i++)
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	3301      	adds	r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	2b0e      	cmp	r3, #14
 8000a4a:	ddc2      	ble.n	80009d2 <let_p2+0x32>
		}
	for(int i=1;i<=14;i++)
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	e032      	b.n	8000ab8 <let_p2+0x118>
		if(p2[i])
 8000a52:	4a37      	ldr	r2, [pc, #220]	; (8000b30 <let_p2+0x190>)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <let_p2+0xc6>
			tem_len++;
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	3301      	adds	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
 8000a64:	e025      	b.n	8000ab2 <let_p2+0x112>
		else{
			if(tem_len>=5){
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	2b04      	cmp	r3, #4
 8000a6a:	dd20      	ble.n	8000aae <let_p2+0x10e>
				for(int j=i-tem_len;j<i;j++){
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	e016      	b.n	8000aa4 <let_p2+0x104>
					p2_line[++p2_len]=j;
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <let_p2+0x18c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	4a2b      	ldr	r2, [pc, #172]	; (8000b2c <let_p2+0x18c>)
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <let_p2+0x18c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4928      	ldr	r1, [pc, #160]	; (8000b28 <let_p2+0x188>)
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					p2[j]--;
 8000a8c:	4a28      	ldr	r2, [pc, #160]	; (8000b30 <let_p2+0x190>)
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a94:	1e5a      	subs	r2, r3, #1
 8000a96:	4926      	ldr	r1, [pc, #152]	; (8000b30 <let_p2+0x190>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int j=i-tem_len;j<i;j++){
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68ba      	ldr	r2, [r7, #8]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	dbe4      	blt.n	8000a76 <let_p2+0xd6>
				}
				return;
 8000aac:	e038      	b.n	8000b20 <let_p2+0x180>
			}
			tem_len=0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
	for(int i=1;i<=14;i++)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b0e      	cmp	r3, #14
 8000abc:	ddc9      	ble.n	8000a52 <let_p2+0xb2>
		}

	for(int i=1;i<=14;i++){
 8000abe:	2301      	movs	r3, #1
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	e02a      	b.n	8000b1a <let_p2+0x17a>
		if(p2[i]){
 8000ac4:	4a1a      	ldr	r2, [pc, #104]	; (8000b30 <let_p2+0x190>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d021      	beq.n	8000b14 <let_p2+0x174>
			p2_line[++p2_len]=i;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <let_p2+0x18c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <let_p2+0x18c>)
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <let_p2+0x18c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4912      	ldr	r1, [pc, #72]	; (8000b28 <let_p2+0x188>)
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(p2[i]==2)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <let_p2+0x190>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d10a      	bne.n	8000b08 <let_p2+0x168>
				p2_line[++p2_len]=i;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <let_p2+0x18c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	4a0c      	ldr	r2, [pc, #48]	; (8000b2c <let_p2+0x18c>)
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <let_p2+0x18c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4909      	ldr	r1, [pc, #36]	; (8000b28 <let_p2+0x188>)
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p2[i]=0;
 8000b08:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <let_p2+0x190>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return;
 8000b12:	e005      	b.n	8000b20 <let_p2+0x180>
	for(int i=1;i<=14;i++){
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3301      	adds	r3, #1
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0e      	cmp	r3, #14
 8000b1e:	ddd1      	ble.n	8000ac4 <let_p2+0x124>
		}
	}
}
 8000b20:	3724      	adds	r7, #36	; 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	2000060c 	.word	0x2000060c
 8000b2c:	20000700 	.word	0x20000700
 8000b30:	2000058c 	.word	0x2000058c

08000b34 <card_check>:
int card_check(int len){
 8000b34:	b480      	push	{r7}
 8000b36:	b087      	sub	sp, #28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	int check_flag=0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
	if(len==1)check_flag=1;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d101      	bne.n	8000b4a <card_check+0x16>
 8000b46:	2301      	movs	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
	if(len==2&&p1_line[1]==p1_line[2])check_flag=1;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d107      	bne.n	8000b60 <card_check+0x2c>
 8000b50:	4b5f      	ldr	r3, [pc, #380]	; (8000cd0 <card_check+0x19c>)
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	4b5e      	ldr	r3, [pc, #376]	; (8000cd0 <card_check+0x19c>)
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d101      	bne.n	8000b60 <card_check+0x2c>
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
	if(len==0||(len<5&&len>=3)||p1_line[len]==14)return 0;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d00b      	beq.n	8000b7e <card_check+0x4a>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	dc02      	bgt.n	8000b72 <card_check+0x3e>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	dc05      	bgt.n	8000b7e <card_check+0x4a>
 8000b72:	4a57      	ldr	r2, [pc, #348]	; (8000cd0 <card_check+0x19c>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7a:	2b0e      	cmp	r3, #14
 8000b7c:	d101      	bne.n	8000b82 <card_check+0x4e>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e0a0      	b.n	8000cc4 <card_check+0x190>
	if(len>=5){
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	dd46      	ble.n	8000c16 <card_check+0xe2>
		if(p1_line[1]==p1_line[2]){
 8000b88:	4b51      	ldr	r3, [pc, #324]	; (8000cd0 <card_check+0x19c>)
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	4b50      	ldr	r3, [pc, #320]	; (8000cd0 <card_check+0x19c>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d126      	bne.n	8000be2 <card_check+0xae>
			if(len%2!=0)return 0;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <card_check+0x6e>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e090      	b.n	8000cc4 <card_check+0x190>
			for(int i=1;i<len/2;i++)
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	e011      	b.n	8000bcc <card_check+0x98>
				if(p1_line[i*2]!=p1_line[i*2+1])return 0;
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4a48      	ldr	r2, [pc, #288]	; (8000cd0 <card_check+0x19c>)
 8000bae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	4945      	ldr	r1, [pc, #276]	; (8000cd0 <card_check+0x19c>)
 8000bba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d001      	beq.n	8000bc6 <card_check+0x92>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e07e      	b.n	8000cc4 <card_check+0x190>
			for(int i=1;i<len/2;i++)
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	0fda      	lsrs	r2, r3, #31
 8000bd0:	4413      	add	r3, r2
 8000bd2:	105b      	asrs	r3, r3, #1
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	dbe5      	blt.n	8000ba8 <card_check+0x74>
			check_flag=1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	e019      	b.n	8000c16 <card_check+0xe2>
		}
		else {
			for(int i=1;i<len;i++)
 8000be2:	2301      	movs	r3, #1
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	e010      	b.n	8000c0a <card_check+0xd6>
				if(p1_line[i]+1!=p1_line[i+1])return 0;
 8000be8:	4a39      	ldr	r2, [pc, #228]	; (8000cd0 <card_check+0x19c>)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	1c5a      	adds	r2, r3, #1
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	4936      	ldr	r1, [pc, #216]	; (8000cd0 <card_check+0x19c>)
 8000bf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d001      	beq.n	8000c04 <card_check+0xd0>
 8000c00:	2300      	movs	r3, #0
 8000c02:	e05f      	b.n	8000cc4 <card_check+0x190>
			for(int i=1;i<len;i++)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	3301      	adds	r3, #1
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	dbea      	blt.n	8000be8 <card_check+0xb4>
			check_flag=1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
		}
	}
	if(p2_len==0&&check_flag)return 1;
 8000c16:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <card_check+0x1a0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d104      	bne.n	8000c28 <card_check+0xf4>
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <card_check+0xf4>
 8000c24:	2301      	movs	r3, #1
 8000c26:	e04d      	b.n	8000cc4 <card_check+0x190>
	if(p2_len!=0&&check_flag){
 8000c28:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <card_check+0x1a0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d048      	beq.n	8000cc2 <card_check+0x18e>
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d045      	beq.n	8000cc2 <card_check+0x18e>
		if(p2_len<=2){
 8000c36:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <card_check+0x1a0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	dc10      	bgt.n	8000c60 <card_check+0x12c>
			if(p2_len!=len)return 0;
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <card_check+0x1a0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d001      	beq.n	8000c4c <card_check+0x118>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e03b      	b.n	8000cc4 <card_check+0x190>
			if(p1_line[1]<=p2_line[1])return 0;
 8000c4c:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <card_check+0x19c>)
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <card_check+0x1a4>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	dc01      	bgt.n	8000c5c <card_check+0x128>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e033      	b.n	8000cc4 <card_check+0x190>
			return 1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e031      	b.n	8000cc4 <card_check+0x190>
		}
		if(p2_len>=5){
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <card_check+0x1a0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b04      	cmp	r3, #4
 8000c66:	dd2a      	ble.n	8000cbe <card_check+0x18a>
			if((p1_line[1]==p1_line[2])&&(p2_line[1]!=p2_line[2]))return 0;
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <card_check+0x19c>)
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <card_check+0x19c>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d107      	bne.n	8000c84 <card_check+0x150>
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <card_check+0x1a4>)
 8000c76:	685a      	ldr	r2, [r3, #4]
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <card_check+0x1a4>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d001      	beq.n	8000c84 <card_check+0x150>
 8000c80:	2300      	movs	r3, #0
 8000c82:	e01f      	b.n	8000cc4 <card_check+0x190>
			if((p1_line[1]!=p1_line[2])&&(p2_line[1]==p2_line[2]))return 0;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <card_check+0x19c>)
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <card_check+0x19c>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d007      	beq.n	8000ca0 <card_check+0x16c>
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <card_check+0x1a4>)
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <card_check+0x1a4>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d101      	bne.n	8000ca0 <card_check+0x16c>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e011      	b.n	8000cc4 <card_check+0x190>
			if(p1_line[1]<=p2_line[1]||len<p2_len)return 0;
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <card_check+0x19c>)
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <card_check+0x1a4>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dd04      	ble.n	8000cb6 <card_check+0x182>
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <card_check+0x1a0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	da01      	bge.n	8000cba <card_check+0x186>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e004      	b.n	8000cc4 <card_check+0x190>
			return 1;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e002      	b.n	8000cc4 <card_check+0x190>
		}
		return 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e000      	b.n	8000cc4 <card_check+0x190>
	}
	return 0;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	371c      	adds	r7, #28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	200005c8 	.word	0x200005c8
 8000cd4:	20000700 	.word	0x20000700
 8000cd8:	2000060c 	.word	0x2000060c

08000cdc <refresh_card>:
void refresh_card(u8g2_t u8g2,int set_pos[15][2]){
 8000cdc:	b084      	sub	sp, #16
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b0a2      	sub	sp, #136	; 0x88
 8000ce2:	af22      	add	r7, sp, #136	; 0x88
 8000ce4:	f107 0c08 	add.w	ip, r7, #8
 8000ce8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	u8g2_ClearBuffer(&u8g2);
 8000cec:	f107 0008 	add.w	r0, r7, #8
 8000cf0:	f001 fe61 	bl	80029b6 <u8g2_ClearBuffer>
	display_card(u8g2,p1);
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <refresh_card+0x80>)
 8000cf6:	9321      	str	r3, [sp, #132]	; 0x84
 8000cf8:	4668      	mov	r0, sp
 8000cfa:	f107 0318 	add.w	r3, r7, #24
 8000cfe:	2284      	movs	r2, #132	; 0x84
 8000d00:	4619      	mov	r1, r3
 8000d02:	f005 fbb3 	bl	800646c <memcpy>
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d0c:	f7ff fbf2 	bl	80004f4 <display_card>
	u8g2_SetFont(&u8g2,u8g2_font_6x12_t_symbols);
 8000d10:	4913      	ldr	r1, [pc, #76]	; (8000d60 <refresh_card+0x84>)
 8000d12:	f107 0008 	add.w	r0, r7, #8
 8000d16:	f002 fcf3 	bl	8003700 <u8g2_SetFont>
	u8g2_DrawGlyph(&u8g2,set_pos[set_card_pos][0],set_pos[set_card_pos][1],0x25b4);
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <refresh_card+0x88>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000d24:	4413      	add	r3, r2
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	b299      	uxth	r1, r3
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <refresh_card+0x88>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000d34:	4413      	add	r3, r2
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f242 53b4 	movw	r3, #9652	; 0x25b4
 8000d3e:	f107 0008 	add.w	r0, r7, #8
 8000d42:	f002 fb91 	bl	8003468 <u8g2_DrawGlyph>
	u8g2_SendBuffer(&u8g2);
 8000d46:	f107 0008 	add.w	r0, r7, #8
 8000d4a:	f001 fea7 	bl	8002a9c <u8g2_SendBuffer>
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d56:	b004      	add	sp, #16
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	2000064c 	.word	0x2000064c
 8000d60:	0800d5a8 	.word	0x0800d5a8
 8000d64:	20000588 	.word	0x20000588

08000d68 <card_init>:
void card_init(int seed){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	rand_cnt=0;
 8000d70:	4b3b      	ldr	r3, [pc, #236]	; (8000e60 <card_init+0xf8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
	p1_card=14;
 8000d76:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <card_init+0xfc>)
 8000d78:	220e      	movs	r2, #14
 8000d7a:	601a      	str	r2, [r3, #0]
	p2_card=14;
 8000d7c:	4b3a      	ldr	r3, [pc, #232]	; (8000e68 <card_init+0x100>)
 8000d7e:	220e      	movs	r2, #14
 8000d80:	601a      	str	r2, [r3, #0]
	p2_len=0;
 8000d82:	4b3a      	ldr	r3, [pc, #232]	; (8000e6c <card_init+0x104>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
	set_card_pos=1;
 8000d88:	4b39      	ldr	r3, [pc, #228]	; (8000e70 <card_init+0x108>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]
	for(int i=1;i<=14;i++){
 8000d8e:	2301      	movs	r3, #1
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e01b      	b.n	8000dcc <card_init+0x64>
		p1[i]=0;
 8000d94:	4a37      	ldr	r2, [pc, #220]	; (8000e74 <card_init+0x10c>)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		p2[i]=0;
 8000d9e:	4a36      	ldr	r2, [pc, #216]	; (8000e78 <card_init+0x110>)
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	2100      	movs	r1, #0
 8000da4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		p1_flag[i]=0;
 8000da8:	4a34      	ldr	r2, [pc, #208]	; (8000e7c <card_init+0x114>)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	2100      	movs	r1, #0
 8000dae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		p1_line[i]=0;
 8000db2:	4a33      	ldr	r2, [pc, #204]	; (8000e80 <card_init+0x118>)
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	2100      	movs	r1, #0
 8000db8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		p2_line[i]=0;
 8000dbc:	4a31      	ldr	r2, [pc, #196]	; (8000e84 <card_init+0x11c>)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=1;i<=14;i++){
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	2b0e      	cmp	r3, #14
 8000dd0:	dde0      	ble.n	8000d94 <card_init+0x2c>
	}
	srand(seed);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f005 fb5d 	bl	8006494 <srand>
	while(1){
		int pos=rand()%14+1;
 8000dda:	f005 fb7f 	bl	80064dc <rand>
 8000dde:	4601      	mov	r1, r0
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <card_init+0x120>)
 8000de2:	fb83 2301 	smull	r2, r3, r3, r1
 8000de6:	440b      	add	r3, r1
 8000de8:	10da      	asrs	r2, r3, #3
 8000dea:	17cb      	asrs	r3, r1, #31
 8000dec:	1ad2      	subs	r2, r2, r3
 8000dee:	4613      	mov	r3, r2
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	1aca      	subs	r2, r1, r3
 8000df8:	1c53      	adds	r3, r2, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
		if(p1[pos]<=1){
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <card_init+0x10c>)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	dc0d      	bgt.n	8000e24 <card_init+0xbc>
			p1[pos]++;
 8000e08:	4a1a      	ldr	r2, [pc, #104]	; (8000e74 <card_init+0x10c>)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e10:	1c5a      	adds	r2, r3, #1
 8000e12:	4918      	ldr	r1, [pc, #96]	; (8000e74 <card_init+0x10c>)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			rand_cnt++;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <card_init+0xf8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	4a0f      	ldr	r2, [pc, #60]	; (8000e60 <card_init+0xf8>)
 8000e22:	6013      	str	r3, [r2, #0]
		}
		if(rand_cnt==14)break;
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <card_init+0xf8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b0e      	cmp	r3, #14
 8000e2a:	d000      	beq.n	8000e2e <card_init+0xc6>
	while(1){
 8000e2c:	e7d5      	b.n	8000dda <card_init+0x72>
		if(rand_cnt==14)break;
 8000e2e:	bf00      	nop
	}
	for(int i=1;i<=14;i++)p2[i]=2-p1[i];
 8000e30:	2301      	movs	r3, #1
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	e00c      	b.n	8000e50 <card_init+0xe8>
 8000e36:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <card_init+0x10c>)
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	f1c3 0202 	rsb	r2, r3, #2
 8000e42:	490d      	ldr	r1, [pc, #52]	; (8000e78 <card_init+0x110>)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	2b0e      	cmp	r3, #14
 8000e54:	ddef      	ble.n	8000e36 <card_init+0xce>
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000604 	.word	0x20000604
 8000e64:	20000608 	.word	0x20000608
 8000e68:	20000648 	.word	0x20000648
 8000e6c:	20000700 	.word	0x20000700
 8000e70:	20000588 	.word	0x20000588
 8000e74:	2000064c 	.word	0x2000064c
 8000e78:	2000058c 	.word	0x2000058c
 8000e7c:	200006c4 	.word	0x200006c4
 8000e80:	200005c8 	.word	0x200005c8
 8000e84:	2000060c 	.word	0x2000060c
 8000e88:	92492493 	.word	0x92492493

08000e8c <play_card>:
void play_card(u8g2_t u8g2,int seed){
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b0c4      	sub	sp, #272	; 0x110
 8000e92:	af22      	add	r7, sp, #136	; 0x88
 8000e94:	f107 0c90 	add.w	ip, r7, #144	; 0x90
 8000e98:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int card_set_pos[15][2]={{0,0},{5,42},{17,42},{29,42},{41,42},{53,42},{65,42},{77,42},{5,64},{17,64},{29,64},{41,64},{53,64},{65,64},{77,64}};
 8000e9c:	4ab3      	ldr	r2, [pc, #716]	; (800116c <play_card+0x2e0>)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	2278      	movs	r2, #120	; 0x78
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f005 fae1 	bl	800646c <memcpy>
	card_init(seed);
 8000eaa:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8000eae:	f7ff ff5b 	bl	8000d68 <card_init>
	display_card(u8g2,p1);
 8000eb2:	4baf      	ldr	r3, [pc, #700]	; (8001170 <play_card+0x2e4>)
 8000eb4:	9321      	str	r3, [sp, #132]	; 0x84
 8000eb6:	4668      	mov	r0, sp
 8000eb8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ebc:	2284      	movs	r2, #132	; 0x84
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f005 fad4 	bl	800646c <memcpy>
 8000ec4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ec8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eca:	f7ff fb13 	bl	80004f4 <display_card>
	u8g2_SetFont(&u8g2,u8g2_font_6x12_t_symbols);
 8000ece:	49a9      	ldr	r1, [pc, #676]	; (8001174 <play_card+0x2e8>)
 8000ed0:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8000ed4:	f002 fc14 	bl	8003700 <u8g2_SetFont>
	u8g2_DrawGlyph(&u8g2,card_set_pos[1][0],card_set_pos[1][1],0x25b4);
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	b299      	uxth	r1, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	f242 53b4 	movw	r3, #9652	; 0x25b4
 8000ee4:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8000ee8:	f002 fabe 	bl	8003468 <u8g2_DrawGlyph>
	u8g2_SendBuffer(&u8g2);
 8000eec:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8000ef0:	f001 fdd4 	bl	8002a9c <u8g2_SendBuffer>
	while(p1_card&&p2_card){
 8000ef4:	e109      	b.n	800110a <play_card+0x27e>
		if(button_turn()){
 8000ef6:	f7ff f995 	bl	8000224 <button_turn>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d01b      	beq.n	8000f38 <play_card+0xac>
			set_card_pos++;
 8000f00:	4b9d      	ldr	r3, [pc, #628]	; (8001178 <play_card+0x2ec>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	4a9c      	ldr	r2, [pc, #624]	; (8001178 <play_card+0x2ec>)
 8000f08:	6013      	str	r3, [r2, #0]
			if(set_card_pos>p1_card)set_card_pos=1;
 8000f0a:	4b9b      	ldr	r3, [pc, #620]	; (8001178 <play_card+0x2ec>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4b9b      	ldr	r3, [pc, #620]	; (800117c <play_card+0x2f0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	dd02      	ble.n	8000f1c <play_card+0x90>
 8000f16:	4b98      	ldr	r3, [pc, #608]	; (8001178 <play_card+0x2ec>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]
			refresh_card(u8g2,card_set_pos);
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	9321      	str	r3, [sp, #132]	; 0x84
 8000f20:	4668      	mov	r0, sp
 8000f22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f26:	2284      	movs	r2, #132	; 0x84
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f005 fa9f 	bl	800646c <memcpy>
 8000f2e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f34:	f7ff fed2 	bl	8000cdc <refresh_card>
		}
		if(button_sure()){
 8000f38:	f7ff f98e 	bl	8000258 <button_sure>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d019      	beq.n	8000f76 <play_card+0xea>
			p1_flag[set_card_pos]=1^p1_flag[set_card_pos];
 8000f42:	4b8d      	ldr	r3, [pc, #564]	; (8001178 <play_card+0x2ec>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a8e      	ldr	r2, [pc, #568]	; (8001180 <play_card+0x2f4>)
 8000f48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f4c:	4b8a      	ldr	r3, [pc, #552]	; (8001178 <play_card+0x2ec>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f082 0201 	eor.w	r2, r2, #1
 8000f54:	498a      	ldr	r1, [pc, #552]	; (8001180 <play_card+0x2f4>)
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			refresh_card(u8g2,card_set_pos);
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	9321      	str	r3, [sp, #132]	; 0x84
 8000f5e:	4668      	mov	r0, sp
 8000f60:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f64:	2284      	movs	r2, #132	; 0x84
 8000f66:	4619      	mov	r1, r3
 8000f68:	f005 fa80 	bl	800646c <memcpy>
 8000f6c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f72:	f7ff feb3 	bl	8000cdc <refresh_card>
		}
		if(button_return()){
 8000f76:	f7ff f989 	bl	800028c <button_return>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 80a8 	beq.w	80010d2 <play_card+0x246>
			int p1_len=0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			for(int i=1;i<=p1_card;i++)
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000f8e:	e035      	b.n	8000ffc <play_card+0x170>
				if(p1_flag[i]){
 8000f90:	4a7b      	ldr	r2, [pc, #492]	; (8001180 <play_card+0x2f4>)
 8000f92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d029      	beq.n	8000ff2 <play_card+0x166>
					if(p1_reline[i]>0x30)
 8000f9e:	4a79      	ldr	r2, [pc, #484]	; (8001184 <play_card+0x2f8>)
 8000fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa8:	2b30      	cmp	r3, #48	; 0x30
 8000faa:	dd11      	ble.n	8000fd0 <play_card+0x144>
						p1_line[++p1_len]=p1_reline[i]-0x30;
 8000fac:	4a75      	ldr	r2, [pc, #468]	; (8001184 <play_card+0x2f8>)
 8000fae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000fba:	3201      	adds	r2, #1
 8000fbc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8000fc0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000fc4:	4970      	ldr	r1, [pc, #448]	; (8001188 <play_card+0x2fc>)
 8000fc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000fce:	e010      	b.n	8000ff2 <play_card+0x166>
					else
						p1_line[++p1_len]=p1_reline[i]-0x20;
 8000fd0:	4a6c      	ldr	r2, [pc, #432]	; (8001184 <play_card+0x2f8>)
 8000fd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fda:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000fde:	3201      	adds	r2, #1
 8000fe0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8000fe4:	f1a3 0220 	sub.w	r2, r3, #32
 8000fe8:	4967      	ldr	r1, [pc, #412]	; (8001188 <play_card+0x2fc>)
 8000fea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i=1;i<=p1_card;i++)
 8000ff2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000ffc:	4b5f      	ldr	r3, [pc, #380]	; (800117c <play_card+0x2f0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001004:	429a      	cmp	r2, r3
 8001006:	ddc3      	ble.n	8000f90 <play_card+0x104>
				}
			if(card_check(p1_len)){
 8001008:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800100c:	f7ff fd92 	bl	8000b34 <card_check>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d04d      	beq.n	80010b2 <play_card+0x226>
				card_feedback(p1_line,p1_len);
 8001016:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800101a:	485b      	ldr	r0, [pc, #364]	; (8001188 <play_card+0x2fc>)
 800101c:	f7ff fbc6 	bl	80007ac <card_feedback>
				p2_card-=p2_len;
 8001020:	4b5a      	ldr	r3, [pc, #360]	; (800118c <play_card+0x300>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b5a      	ldr	r3, [pc, #360]	; (8001190 <play_card+0x304>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	4a58      	ldr	r2, [pc, #352]	; (800118c <play_card+0x300>)
 800102c:	6013      	str	r3, [r2, #0]
				for(int i=1;i<=p1_len;i++)
 800102e:	2301      	movs	r3, #1
 8001030:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001032:	e00d      	b.n	8001050 <play_card+0x1c4>
					p1[p1_line[i]]--;
 8001034:	4a54      	ldr	r2, [pc, #336]	; (8001188 <play_card+0x2fc>)
 8001036:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103c:	4a4c      	ldr	r2, [pc, #304]	; (8001170 <play_card+0x2e4>)
 800103e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001042:	3a01      	subs	r2, #1
 8001044:	494a      	ldr	r1, [pc, #296]	; (8001170 <play_card+0x2e4>)
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int i=1;i<=p1_len;i++)
 800104a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800104c:	3301      	adds	r3, #1
 800104e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001050:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001052:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001056:	429a      	cmp	r2, r3
 8001058:	ddec      	ble.n	8001034 <play_card+0x1a8>
				for(int i=1;i<=14;i++){
 800105a:	2301      	movs	r3, #1
 800105c:	67bb      	str	r3, [r7, #120]	; 0x78
 800105e:	e00c      	b.n	800107a <play_card+0x1ee>
					p1_line[i]=0;
 8001060:	4a49      	ldr	r2, [pc, #292]	; (8001188 <play_card+0x2fc>)
 8001062:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001064:	2100      	movs	r1, #0
 8001066:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					p1_flag[i]=0;
 800106a:	4a45      	ldr	r2, [pc, #276]	; (8001180 <play_card+0x2f4>)
 800106c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800106e:	2100      	movs	r1, #0
 8001070:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int i=1;i<=14;i++){
 8001074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001076:	3301      	adds	r3, #1
 8001078:	67bb      	str	r3, [r7, #120]	; 0x78
 800107a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800107c:	2b0e      	cmp	r3, #14
 800107e:	ddef      	ble.n	8001060 <play_card+0x1d4>
				}
				p1_card-=p1_len;
 8001080:	4b3e      	ldr	r3, [pc, #248]	; (800117c <play_card+0x2f0>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	4a3c      	ldr	r2, [pc, #240]	; (800117c <play_card+0x2f0>)
 800108c:	6013      	str	r3, [r2, #0]
				p1_len=0;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				refresh_card(u8g2,card_set_pos);
 8001094:	463b      	mov	r3, r7
 8001096:	9321      	str	r3, [sp, #132]	; 0x84
 8001098:	4668      	mov	r0, sp
 800109a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800109e:	2284      	movs	r2, #132	; 0x84
 80010a0:	4619      	mov	r1, r3
 80010a2:	f005 f9e3 	bl	800646c <memcpy>
 80010a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80010aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ac:	f7ff fe16 	bl	8000cdc <refresh_card>
 80010b0:	e00f      	b.n	80010d2 <play_card+0x246>
			}
			else{
				u8g2_SetFont(&u8g2,u8g2_font_t0_14_mf);
 80010b2:	4938      	ldr	r1, [pc, #224]	; (8001194 <play_card+0x308>)
 80010b4:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80010b8:	f002 fb22 	bl	8003700 <u8g2_SetFont>
				u8g2_DrawStr(&u8g2,88,57,"Err");
 80010bc:	4b36      	ldr	r3, [pc, #216]	; (8001198 <play_card+0x30c>)
 80010be:	2239      	movs	r2, #57	; 0x39
 80010c0:	2158      	movs	r1, #88	; 0x58
 80010c2:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80010c6:	f002 fa7d 	bl	80035c4 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 80010ca:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80010ce:	f001 fce5 	bl	8002a9c <u8g2_SendBuffer>
			}
		}
		if(button_other1()){
 80010d2:	f7ff f8f7 	bl	80002c4 <button_other1>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d016      	beq.n	800110a <play_card+0x27e>
			let_p2();
 80010dc:	f7ff fc60 	bl	80009a0 <let_p2>
			p2_card-=p2_len;
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <play_card+0x300>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <play_card+0x304>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	4a28      	ldr	r2, [pc, #160]	; (800118c <play_card+0x300>)
 80010ec:	6013      	str	r3, [r2, #0]
			refresh_card(u8g2,card_set_pos);
 80010ee:	463b      	mov	r3, r7
 80010f0:	9321      	str	r3, [sp, #132]	; 0x84
 80010f2:	4668      	mov	r0, sp
 80010f4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010f8:	2284      	movs	r2, #132	; 0x84
 80010fa:	4619      	mov	r1, r3
 80010fc:	f005 f9b6 	bl	800646c <memcpy>
 8001100:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001106:	f7ff fde9 	bl	8000cdc <refresh_card>
	while(p1_card&&p2_card){
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <play_card+0x2f0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d004      	beq.n	800111c <play_card+0x290>
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <play_card+0x300>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	f47f aeed 	bne.w	8000ef6 <play_card+0x6a>
		}
	}
	u8g2_ClearDisplay(&u8g2);
 800111c:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8001120:	f001 fd24 	bl	8002b6c <u8g2_ClearDisplay>
	u8g2_SetFont(&u8g2,u8g2_font_inr21_mf);
 8001124:	491d      	ldr	r1, [pc, #116]	; (800119c <play_card+0x310>)
 8001126:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800112a:	f002 fae9 	bl	8003700 <u8g2_SetFont>
	if(!p1_card)
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <play_card+0x2f0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d107      	bne.n	8001146 <play_card+0x2ba>
		u8g2_DrawStr(&u8g2,10,45,"Win");
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <play_card+0x314>)
 8001138:	222d      	movs	r2, #45	; 0x2d
 800113a:	210a      	movs	r1, #10
 800113c:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8001140:	f002 fa40 	bl	80035c4 <u8g2_DrawStr>
 8001144:	e006      	b.n	8001154 <play_card+0x2c8>
	else
		u8g2_DrawStr(&u8g2,10,45,"Lose");
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <play_card+0x318>)
 8001148:	222d      	movs	r2, #45	; 0x2d
 800114a:	210a      	movs	r1, #10
 800114c:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8001150:	f002 fa38 	bl	80035c4 <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 8001154:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8001158:	f001 fca0 	bl	8002a9c <u8g2_SendBuffer>
}
 800115c:	bf00      	nop
 800115e:	3788      	adds	r7, #136	; 0x88
 8001160:	46bd      	mov	sp, r7
 8001162:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001166:	b004      	add	sp, #16
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	08006690 	.word	0x08006690
 8001170:	2000064c 	.word	0x2000064c
 8001174:	0800d5a8 	.word	0x0800d5a8
 8001178:	20000588 	.word	0x20000588
 800117c:	20000608 	.word	0x20000608
 8001180:	200006c4 	.word	0x200006c4
 8001184:	20000688 	.word	0x20000688
 8001188:	200005c8 	.word	0x200005c8
 800118c:	20000648 	.word	0x20000648
 8001190:	20000700 	.word	0x20000700
 8001194:	08007098 	.word	0x08007098
 8001198:	08006680 	.word	0x08006680
 800119c:	0800a5a4 	.word	0x0800a5a4
 80011a0:	08006684 	.word	0x08006684
 80011a4:	08006688 	.word	0x08006688

080011a8 <broadcast_music>:
void broadcast_music(int music_p[],int music_l[]){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	int music_p_pos=1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
		while(music_p[music_p_pos]!=0xff){
 80011b6:	e055      	b.n	8001264 <broadcast_music+0xbc>
			if(music_p[music_p_pos]==0)break;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d056      	beq.n	8001274 <broadcast_music+0xcc>
			for(int i=1;i<=music_l[music_p_pos]*897*music_tone[music_p[music_p_pos]]/2500;i++){
 80011c6:	2301      	movs	r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	e026      	b.n	800121a <broadcast_music+0x72>
				HAL_GPIO_TogglePin(music_GPIO_Port,music_Pin);
 80011cc:	2101      	movs	r1, #1
 80011ce:	482d      	ldr	r0, [pc, #180]	; (8001284 <broadcast_music+0xdc>)
 80011d0:	f003 fcff 	bl	8004bd2 <HAL_GPIO_TogglePin>
				delay_us(108696/music_tone[music_p[music_p_pos]]);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	4413      	add	r3, r2
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a2a      	ldr	r2, [pc, #168]	; (8001288 <broadcast_music+0xe0>)
 80011e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e4:	4a29      	ldr	r2, [pc, #164]	; (800128c <broadcast_music+0xe4>)
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 f8f0 	bl	80023d0 <delay_us>
				HAL_GPIO_TogglePin(music_GPIO_Port,music_Pin);
 80011f0:	2101      	movs	r1, #1
 80011f2:	4824      	ldr	r0, [pc, #144]	; (8001284 <broadcast_music+0xdc>)
 80011f4:	f003 fced 	bl	8004bd2 <HAL_GPIO_TogglePin>
				delay_us(108696/music_tone[music_p[music_p_pos]]);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	4413      	add	r3, r2
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a21      	ldr	r2, [pc, #132]	; (8001288 <broadcast_music+0xe0>)
 8001204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001208:	4a20      	ldr	r2, [pc, #128]	; (800128c <broadcast_music+0xe4>)
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f001 f8de 	bl	80023d0 <delay_us>
			for(int i=1;i<=music_l[music_p_pos]*897*music_tone[music_p[music_p_pos]]/2500;i++){
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	3301      	adds	r3, #1
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	4413      	add	r3, r2
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a15      	ldr	r2, [pc, #84]	; (8001288 <broadcast_music+0xe0>)
 8001232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001236:	fb03 f201 	mul.w	r2, r3, r1
 800123a:	4613      	mov	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	01db      	lsls	r3, r3, #7
 8001242:	4413      	add	r3, r2
 8001244:	4a12      	ldr	r2, [pc, #72]	; (8001290 <broadcast_music+0xe8>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0ada      	lsrs	r2, r3, #11
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	429a      	cmp	r2, r3
 8001250:	d2bc      	bcs.n	80011cc <broadcast_music+0x24>
			}
			music_p_pos++;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3301      	adds	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
			if(music_1_p[music_p_pos]==0)break;
 8001258:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <broadcast_music+0xec>)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d009      	beq.n	8001278 <broadcast_music+0xd0>
		while(music_p[music_p_pos]!=0xff){
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4413      	add	r3, r2
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2bff      	cmp	r3, #255	; 0xff
 8001270:	d1a2      	bne.n	80011b8 <broadcast_music+0x10>
		}
}
 8001272:	e002      	b.n	800127a <broadcast_music+0xd2>
			if(music_p[music_p_pos]==0)break;
 8001274:	bf00      	nop
 8001276:	e000      	b.n	800127a <broadcast_music+0xd2>
			if(music_1_p[music_p_pos]==0)break;
 8001278:	bf00      	nop
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40011000 	.word	0x40011000
 8001288:	08006740 	.word	0x08006740
 800128c:	0001a898 	.word	0x0001a898
 8001290:	d1b71759 	.word	0xd1b71759
 8001294:	08006798 	.word	0x08006798

08001298 <display_music>:
void display_music(int music_pos){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	if(music_pos==1)broadcast_music(music_1_p,music_1_l);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d103      	bne.n	80012ae <display_music+0x16>
 80012a6:	4907      	ldr	r1, [pc, #28]	; (80012c4 <display_music+0x2c>)
 80012a8:	4807      	ldr	r0, [pc, #28]	; (80012c8 <display_music+0x30>)
 80012aa:	f7ff ff7d 	bl	80011a8 <broadcast_music>
	if(music_pos==2)broadcast_music(music_2_p,music_2_l);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d103      	bne.n	80012bc <display_music+0x24>
 80012b4:	4905      	ldr	r1, [pc, #20]	; (80012cc <display_music+0x34>)
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <display_music+0x38>)
 80012b8:	f7ff ff76 	bl	80011a8 <broadcast_music>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	08006a88 	.word	0x08006a88
 80012c8:	08006798 	.word	0x08006798
 80012cc:	08006dfc 	.word	0x08006dfc
 80012d0:	08006d6c 	.word	0x08006d6c

080012d4 <check_time>:
#include"allmath.h"
int check_time(int y,int m,int d){
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
	if(m==2){
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d129      	bne.n	800133a <check_time+0x66>
		if((y%4==0&&y%100!=0)||(y%400==0)){
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10c      	bne.n	800130a <check_time+0x36>
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <check_time+0xc8>)
 80012f4:	fb83 1302 	smull	r1, r3, r3, r2
 80012f8:	1159      	asrs	r1, r3, #5
 80012fa:	17d3      	asrs	r3, r2, #31
 80012fc:	1acb      	subs	r3, r1, r3
 80012fe:	2164      	movs	r1, #100	; 0x64
 8001300:	fb01 f303 	mul.w	r3, r1, r3
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10d      	bne.n	8001326 <check_time+0x52>
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <check_time+0xc8>)
 800130e:	fb83 1302 	smull	r1, r3, r3, r2
 8001312:	11d9      	asrs	r1, r3, #7
 8001314:	17d3      	asrs	r3, r2, #31
 8001316:	1acb      	subs	r3, r1, r3
 8001318:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800131c:	fb01 f303 	mul.w	r3, r1, r3
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d104      	bne.n	8001330 <check_time+0x5c>
			if(d>29)return 1;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b1d      	cmp	r3, #29
 800132a:	dd06      	ble.n	800133a <check_time+0x66>
 800132c:	2301      	movs	r3, #1
 800132e:	e030      	b.n	8001392 <check_time+0xbe>
		}
		else{
			if(d>28)return 1;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b1c      	cmp	r3, #28
 8001334:	dd01      	ble.n	800133a <check_time+0x66>
 8001336:	2301      	movs	r3, #1
 8001338:	e02b      	b.n	8001392 <check_time+0xbe>
		}
	}
	if(m==1||m==3||m==5||m==7||m==8||m==10||m==12)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d011      	beq.n	8001364 <check_time+0x90>
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d00e      	beq.n	8001364 <check_time+0x90>
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2b05      	cmp	r3, #5
 800134a:	d00b      	beq.n	8001364 <check_time+0x90>
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b07      	cmp	r3, #7
 8001350:	d008      	beq.n	8001364 <check_time+0x90>
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	2b08      	cmp	r3, #8
 8001356:	d005      	beq.n	8001364 <check_time+0x90>
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2b0a      	cmp	r3, #10
 800135c:	d002      	beq.n	8001364 <check_time+0x90>
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b0c      	cmp	r3, #12
 8001362:	d104      	bne.n	800136e <check_time+0x9a>
		if(d>31)return 1;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b1f      	cmp	r3, #31
 8001368:	dd01      	ble.n	800136e <check_time+0x9a>
 800136a:	2301      	movs	r3, #1
 800136c:	e011      	b.n	8001392 <check_time+0xbe>
	if(m==4||m==6||m==9||m==11)
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	2b04      	cmp	r3, #4
 8001372:	d008      	beq.n	8001386 <check_time+0xb2>
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	2b06      	cmp	r3, #6
 8001378:	d005      	beq.n	8001386 <check_time+0xb2>
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	2b09      	cmp	r3, #9
 800137e:	d002      	beq.n	8001386 <check_time+0xb2>
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	2b0b      	cmp	r3, #11
 8001384:	d104      	bne.n	8001390 <check_time+0xbc>
		if(d>30)return 1;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b1e      	cmp	r3, #30
 800138a:	dd01      	ble.n	8001390 <check_time+0xbc>
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <check_time+0xbe>
	return 0;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	51eb851f 	.word	0x51eb851f

080013a0 <next_time>:
void next_time(int *nowtime){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	if(nowtime[5]==60){
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3314      	adds	r3, #20
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b3c      	cmp	r3, #60	; 0x3c
 80013b0:	d14e      	bne.n	8001450 <next_time+0xb0>
		nowtime[5]=0;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3314      	adds	r3, #20
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
		nowtime[4]++;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3310      	adds	r3, #16
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	3201      	adds	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
		if(nowtime[4]==60){
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3310      	adds	r3, #16
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b3c      	cmp	r3, #60	; 0x3c
 80013cc:	d140      	bne.n	8001450 <next_time+0xb0>
			nowtime[4]=0;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3310      	adds	r3, #16
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
			nowtime[3]++;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	330c      	adds	r3, #12
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	3201      	adds	r2, #1
 80013de:	601a      	str	r2, [r3, #0]
			if(nowtime[3]==24){
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	330c      	adds	r3, #12
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b18      	cmp	r3, #24
 80013e8:	d132      	bne.n	8001450 <next_time+0xb0>
				nowtime[3]=0;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	330c      	adds	r3, #12
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
				nowtime[2]++;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3308      	adds	r3, #8
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	3201      	adds	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
				if(nowtime[2]>=28&&check_time(nowtime[0],nowtime[1],nowtime[2])){
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3308      	adds	r3, #8
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b1b      	cmp	r3, #27
 8001404:	dd24      	ble.n	8001450 <next_time+0xb0>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6818      	ldr	r0, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3304      	adds	r3, #4
 800140e:	6819      	ldr	r1, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3308      	adds	r3, #8
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	f7ff ff5c 	bl	80012d4 <check_time>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d016      	beq.n	8001450 <next_time+0xb0>
					nowtime[2]=0;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3308      	adds	r3, #8
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
					nowtime[1]++;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3304      	adds	r3, #4
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	3201      	adds	r2, #1
 8001432:	601a      	str	r2, [r3, #0]
					if(nowtime[1]>=13){
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3304      	adds	r3, #4
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b0c      	cmp	r3, #12
 800143c:	dd08      	ble.n	8001450 <next_time+0xb0>
						nowtime[1]=1;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3304      	adds	r3, #4
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]
						nowtime[0]++;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <convert_time>:
void convert_time(int nowtime[],char *p){
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	p[0]=nowtime[0]/10%10+'0';
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a32      	ldr	r2, [pc, #200]	; (8001530 <convert_time+0xd8>)
 8001468:	fb82 1203 	smull	r1, r2, r2, r3
 800146c:	1092      	asrs	r2, r2, #2
 800146e:	17db      	asrs	r3, r3, #31
 8001470:	1ad2      	subs	r2, r2, r3
 8001472:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <convert_time+0xd8>)
 8001474:	fb83 1302 	smull	r1, r3, r3, r2
 8001478:	1099      	asrs	r1, r3, #2
 800147a:	17d3      	asrs	r3, r2, #31
 800147c:	1ac9      	subs	r1, r1, r3
 800147e:	460b      	mov	r3, r1
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	1ad1      	subs	r1, r2, r3
 8001488:	b2cb      	uxtb	r3, r1
 800148a:	3330      	adds	r3, #48	; 0x30
 800148c:	b2da      	uxtb	r2, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	701a      	strb	r2, [r3, #0]
	p[1]=nowtime[0]%10+'0';
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <convert_time+0xd8>)
 8001498:	fb83 1302 	smull	r1, r3, r3, r2
 800149c:	1099      	asrs	r1, r3, #2
 800149e:	17d3      	asrs	r3, r2, #31
 80014a0:	1ac9      	subs	r1, r1, r3
 80014a2:	460b      	mov	r3, r1
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	1ad1      	subs	r1, r2, r3
 80014ac:	b2ca      	uxtb	r2, r1
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	3230      	adds	r2, #48	; 0x30
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	701a      	strb	r2, [r3, #0]
	for(int i=1;i<=5;i++){
 80014b8:	2301      	movs	r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	e02f      	b.n	800151e <convert_time+0xc6>
		p[i*2]=nowtime[i]/10+'0';
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <convert_time+0xd8>)
 80014ca:	fb82 1203 	smull	r1, r2, r2, r3
 80014ce:	1092      	asrs	r2, r2, #2
 80014d0:	17db      	asrs	r3, r3, #31
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4619      	mov	r1, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	440b      	add	r3, r1
 80014e0:	3230      	adds	r2, #48	; 0x30
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	701a      	strb	r2, [r3, #0]
		p[i*2+1]=nowtime[i]%10+'0';
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <convert_time+0xd8>)
 80014f2:	fb83 1302 	smull	r1, r3, r3, r2
 80014f6:	1099      	asrs	r1, r3, #2
 80014f8:	17d3      	asrs	r3, r2, #31
 80014fa:	1ac9      	subs	r1, r1, r3
 80014fc:	460b      	mov	r3, r1
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	b2ca      	uxtb	r2, r1
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	3301      	adds	r3, #1
 800150e:	6839      	ldr	r1, [r7, #0]
 8001510:	440b      	add	r3, r1
 8001512:	3230      	adds	r2, #48	; 0x30
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	701a      	strb	r2, [r3, #0]
	for(int i=1;i<=5;i++){
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	3301      	adds	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b05      	cmp	r3, #5
 8001522:	ddcc      	ble.n	80014be <convert_time+0x66>
	}
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	66666667 	.word	0x66666667

08001534 <modify_time>:
void modify_time(int *nowtime,int pos,int direction)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	; 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
	if(pos==0)nowtime[0]+=(direction*2-1);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d107      	bne.n	8001556 <modify_time+0x22>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	3b01      	subs	r3, #1
 8001550:	441a      	add	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	601a      	str	r2, [r3, #0]
	if(pos==1)nowtime[1]=(nowtime[1]+direction*2+10)%12+1;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d116      	bne.n	800158a <modify_time+0x56>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	3304      	adds	r3, #4
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	f103 010a 	add.w	r1, r3, #10
 800156c:	4b71      	ldr	r3, [pc, #452]	; (8001734 <modify_time+0x200>)
 800156e:	fb83 2301 	smull	r2, r3, r3, r1
 8001572:	105a      	asrs	r2, r3, #1
 8001574:	17cb      	asrs	r3, r1, #31
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	1aca      	subs	r2, r1, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3304      	adds	r3, #4
 8001586:	3201      	adds	r2, #1
 8001588:	601a      	str	r2, [r3, #0]
	if(pos==2){
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b02      	cmp	r3, #2
 800158e:	f040 8090 	bne.w	80016b2 <modify_time+0x17e>
		nowtime[2]+=(direction*2-1);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3308      	adds	r3, #8
 8001596:	6819      	ldr	r1, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	1e5a      	subs	r2, r3, #1
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3308      	adds	r3, #8
 80015a2:	440a      	add	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
		int y=nowtime[0],m=nowtime[1],d=nowtime[1];
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	61fb      	str	r3, [r7, #28]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	617b      	str	r3, [r7, #20]
		if(m==2){
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d13c      	bne.n	8001638 <modify_time+0x104>
			if((y%4==0&&y%100!=0)||(y%400==0)){
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10c      	bne.n	80015e2 <modify_time+0xae>
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	4b5b      	ldr	r3, [pc, #364]	; (8001738 <modify_time+0x204>)
 80015cc:	fb83 1302 	smull	r1, r3, r3, r2
 80015d0:	1159      	asrs	r1, r3, #5
 80015d2:	17d3      	asrs	r3, r2, #31
 80015d4:	1acb      	subs	r3, r1, r3
 80015d6:	2164      	movs	r1, #100	; 0x64
 80015d8:	fb01 f303 	mul.w	r3, r1, r3
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10d      	bne.n	80015fe <modify_time+0xca>
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	4b54      	ldr	r3, [pc, #336]	; (8001738 <modify_time+0x204>)
 80015e6:	fb83 1302 	smull	r1, r3, r3, r2
 80015ea:	11d9      	asrs	r1, r3, #7
 80015ec:	17d3      	asrs	r3, r2, #31
 80015ee:	1acb      	subs	r3, r1, r3
 80015f0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80015f4:	fb01 f303 	mul.w	r3, r1, r3
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10e      	bne.n	800161c <modify_time+0xe8>
				if(d>29)nowtime[2]=1;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b1d      	cmp	r3, #29
 8001602:	dd03      	ble.n	800160c <modify_time+0xd8>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3308      	adds	r3, #8
 8001608:	2201      	movs	r2, #1
 800160a:	601a      	str	r2, [r3, #0]
				if(d==0)nowtime[2]=29;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d112      	bne.n	8001638 <modify_time+0x104>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3308      	adds	r3, #8
 8001616:	221d      	movs	r2, #29
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	e00d      	b.n	8001638 <modify_time+0x104>
			}
			else{
				if(d>28)nowtime[2]=1;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	2b1c      	cmp	r3, #28
 8001620:	dd03      	ble.n	800162a <modify_time+0xf6>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3308      	adds	r3, #8
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]
				if(d==0)nowtime[2]=28;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d103      	bne.n	8001638 <modify_time+0x104>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3308      	adds	r3, #8
 8001634:	221c      	movs	r2, #28
 8001636:	601a      	str	r2, [r3, #0]
			}
		}
		if(m==1||m==3||m==5||m==7||m==8||m==10||m==12){
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d011      	beq.n	8001662 <modify_time+0x12e>
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d00e      	beq.n	8001662 <modify_time+0x12e>
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2b05      	cmp	r3, #5
 8001648:	d00b      	beq.n	8001662 <modify_time+0x12e>
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	2b07      	cmp	r3, #7
 800164e:	d008      	beq.n	8001662 <modify_time+0x12e>
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2b08      	cmp	r3, #8
 8001654:	d005      	beq.n	8001662 <modify_time+0x12e>
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	2b0a      	cmp	r3, #10
 800165a:	d002      	beq.n	8001662 <modify_time+0x12e>
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2b0c      	cmp	r3, #12
 8001660:	d10d      	bne.n	800167e <modify_time+0x14a>
			if(d>31)nowtime[2]=1;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2b1f      	cmp	r3, #31
 8001666:	dd03      	ble.n	8001670 <modify_time+0x13c>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3308      	adds	r3, #8
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]
			if(d==0)nowtime[2]=31;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d103      	bne.n	800167e <modify_time+0x14a>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	3308      	adds	r3, #8
 800167a:	221f      	movs	r2, #31
 800167c:	601a      	str	r2, [r3, #0]
		}
		if(m==4||m==6||m==9||m==11){
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	2b04      	cmp	r3, #4
 8001682:	d008      	beq.n	8001696 <modify_time+0x162>
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2b06      	cmp	r3, #6
 8001688:	d005      	beq.n	8001696 <modify_time+0x162>
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	2b09      	cmp	r3, #9
 800168e:	d002      	beq.n	8001696 <modify_time+0x162>
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2b0b      	cmp	r3, #11
 8001694:	d10d      	bne.n	80016b2 <modify_time+0x17e>
			if(d>30)nowtime[2]=1;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2b1e      	cmp	r3, #30
 800169a:	dd03      	ble.n	80016a4 <modify_time+0x170>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3308      	adds	r3, #8
 80016a0:	2201      	movs	r2, #1
 80016a2:	601a      	str	r2, [r3, #0]
			if(d==0)nowtime[2]=30;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d103      	bne.n	80016b2 <modify_time+0x17e>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3308      	adds	r3, #8
 80016ae:	221e      	movs	r2, #30
 80016b0:	601a      	str	r2, [r3, #0]
		}
	}
	if(pos==3)nowtime[3]=(nowtime[3]+direction*2-1+24)%24;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d116      	bne.n	80016e6 <modify_time+0x1b2>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	330c      	adds	r3, #12
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	f103 0117 	add.w	r1, r3, #23
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f103 000c 	add.w	r0, r3, #12
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <modify_time+0x200>)
 80016d0:	fb83 2301 	smull	r2, r3, r3, r1
 80016d4:	109a      	asrs	r2, r3, #2
 80016d6:	17cb      	asrs	r3, r1, #31
 80016d8:	1ad2      	subs	r2, r2, r3
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	1aca      	subs	r2, r1, r3
 80016e4:	6002      	str	r2, [r0, #0]
	if(pos==4||pos==5)nowtime[pos]=(nowtime[pos]+direction*2-1+60)%60;
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d002      	beq.n	80016f2 <modify_time+0x1be>
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2b05      	cmp	r3, #5
 80016f0:	d11a      	bne.n	8001728 <modify_time+0x1f4>
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	4413      	add	r3, r2
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	f103 023b 	add.w	r2, r3, #59	; 0x3b
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	68f9      	ldr	r1, [r7, #12]
 800170c:	18c8      	adds	r0, r1, r3
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <modify_time+0x208>)
 8001710:	fb83 1302 	smull	r1, r3, r3, r2
 8001714:	4413      	add	r3, r2
 8001716:	1159      	asrs	r1, r3, #5
 8001718:	17d3      	asrs	r3, r2, #31
 800171a:	1ac9      	subs	r1, r1, r3
 800171c:	460b      	mov	r3, r1
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	1a5b      	subs	r3, r3, r1
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	1ad1      	subs	r1, r2, r3
 8001726:	6001      	str	r1, [r0, #0]
}
 8001728:	bf00      	nop
 800172a:	3724      	adds	r7, #36	; 0x24
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	2aaaaaab 	.word	0x2aaaaaab
 8001738:	51eb851f 	.word	0x51eb851f
 800173c:	88888889 	.word	0x88888889

08001740 <evaluate_array>:
void evaluate_array(int *a,int *b,int len){
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)a[i]=b[i];
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00c      	b.n	800176c <evaluate_array+0x2c>
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	441a      	add	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	68f9      	ldr	r1, [r7, #12]
 8001760:	440b      	add	r3, r1
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	429a      	cmp	r2, r3
 8001772:	dbee      	blt.n	8001752 <evaluate_array+0x12>
}
 8001774:	bf00      	nop
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <minn>:
int minn(int a,int b){
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
	if(a>b)return b;
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	dd01      	ble.n	8001794 <minn+0x16>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	e000      	b.n	8001796 <minn+0x18>
	return a;
 8001794:	687b      	ldr	r3, [r7, #4]
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <get_card_p2>:
char get_card_p2(int card_num){
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	if(card_num<10)return card_num+'0';
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b09      	cmp	r3, #9
 80017ac:	dc04      	bgt.n	80017b8 <get_card_p2+0x18>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	3330      	adds	r3, #48	; 0x30
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	e018      	b.n	80017ea <get_card_p2+0x4a>
	if(card_num==10)return 'O';
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b0a      	cmp	r3, #10
 80017bc:	d101      	bne.n	80017c2 <get_card_p2+0x22>
 80017be:	234f      	movs	r3, #79	; 0x4f
 80017c0:	e013      	b.n	80017ea <get_card_p2+0x4a>
	if(card_num==11)return 'J';
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b0b      	cmp	r3, #11
 80017c6:	d101      	bne.n	80017cc <get_card_p2+0x2c>
 80017c8:	234a      	movs	r3, #74	; 0x4a
 80017ca:	e00e      	b.n	80017ea <get_card_p2+0x4a>
	if(card_num==12)return 'C';
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b0c      	cmp	r3, #12
 80017d0:	d101      	bne.n	80017d6 <get_card_p2+0x36>
 80017d2:	2343      	movs	r3, #67	; 0x43
 80017d4:	e009      	b.n	80017ea <get_card_p2+0x4a>
	if(card_num==13)return 'Q';
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b0d      	cmp	r3, #13
 80017da:	d101      	bne.n	80017e0 <get_card_p2+0x40>
 80017dc:	2351      	movs	r3, #81	; 0x51
 80017de:	e004      	b.n	80017ea <get_card_p2+0x4a>
	if(card_num==14)return 'K';
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b0e      	cmp	r3, #14
 80017e4:	d101      	bne.n	80017ea <get_card_p2+0x4a>
 80017e6:	234b      	movs	r3, #75	; 0x4b
 80017e8:	e7ff      	b.n	80017ea <get_card_p2+0x4a>
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001808:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <MX_GPIO_Init+0xd4>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a2e      	ldr	r2, [pc, #184]	; (80018c8 <MX_GPIO_Init+0xd4>)
 800180e:	f043 0310 	orr.w	r3, r3, #16
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <MX_GPIO_Init+0xd4>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001820:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <MX_GPIO_Init+0xd4>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a28      	ldr	r2, [pc, #160]	; (80018c8 <MX_GPIO_Init+0xd4>)
 8001826:	f043 0320 	orr.w	r3, r3, #32
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <MX_GPIO_Init+0xd4>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0320 	and.w	r3, r3, #32
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <MX_GPIO_Init+0xd4>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a22      	ldr	r2, [pc, #136]	; (80018c8 <MX_GPIO_Init+0xd4>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <MX_GPIO_Init+0xd4>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <MX_GPIO_Init+0xd4>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <MX_GPIO_Init+0xd4>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <MX_GPIO_Init+0xd4>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(music_GPIO_Port, music_Pin, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	2101      	movs	r1, #1
 800186c:	4817      	ldr	r0, [pc, #92]	; (80018cc <MX_GPIO_Init+0xd8>)
 800186e:	f003 f998 	bl	8004ba2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = music_Pin;
 8001872:	2301      	movs	r3, #1
 8001874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001876:	2301      	movs	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2302      	movs	r3, #2
 8001880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(music_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 0310 	add.w	r3, r7, #16
 8001886:	4619      	mov	r1, r3
 8001888:	4810      	ldr	r0, [pc, #64]	; (80018cc <MX_GPIO_Init+0xd8>)
 800188a:	f003 f809 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = key2_Pin|key3_Pin|key4_Pin|key1_Pin;
 800188e:	f248 13c0 	movw	r3, #33216	; 0x81c0
 8001892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001898:	2301      	movs	r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	4619      	mov	r1, r3
 80018a2:	480b      	ldr	r0, [pc, #44]	; (80018d0 <MX_GPIO_Init+0xdc>)
 80018a4:	f002 fffc 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = key0_Pin;
 80018a8:	2320      	movs	r3, #32
 80018aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(key0_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	4619      	mov	r1, r3
 80018ba:	4804      	ldr	r0, [pc, #16]	; (80018cc <MX_GPIO_Init+0xd8>)
 80018bc:	f002 fff0 	bl	80048a0 <HAL_GPIO_Init>

}
 80018c0:	bf00      	nop
 80018c2:	3720      	adds	r7, #32
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40011000 	.word	0x40011000
 80018d0:	40010800 	.word	0x40010800

080018d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <MX_I2C1_Init+0x50>)
 80018da:	4a13      	ldr	r2, [pc, #76]	; (8001928 <MX_I2C1_Init+0x54>)
 80018dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_I2C1_Init+0x50>)
 80018e0:	4a12      	ldr	r2, [pc, #72]	; (800192c <MX_I2C1_Init+0x58>)
 80018e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_I2C1_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_I2C1_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_I2C1_Init+0x50>)
 80018f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <MX_I2C1_Init+0x50>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_I2C1_Init+0x50>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <MX_I2C1_Init+0x50>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_I2C1_Init+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <MX_I2C1_Init+0x50>)
 8001912:	f003 f977 	bl	8004c04 <HAL_I2C_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800191c:	f000 fce8 	bl	80022f0 <Error_Handler>
  }

}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000704 	.word	0x20000704
 8001928:	40005400 	.word	0x40005400
 800192c:	000186a0 	.word	0x000186a0

08001930 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a15      	ldr	r2, [pc, #84]	; (80019a0 <HAL_I2C_MspInit+0x70>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d123      	bne.n	8001998 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <HAL_I2C_MspInit+0x74>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a13      	ldr	r2, [pc, #76]	; (80019a4 <HAL_I2C_MspInit+0x74>)
 8001956:	f043 0308 	orr.w	r3, r3, #8
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_I2C_MspInit+0x74>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001968:	23c0      	movs	r3, #192	; 0xc0
 800196a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800196c:	2312      	movs	r3, #18
 800196e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	4619      	mov	r1, r3
 800197a:	480b      	ldr	r0, [pc, #44]	; (80019a8 <HAL_I2C_MspInit+0x78>)
 800197c:	f002 ff90 	bl	80048a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <HAL_I2C_MspInit+0x74>)
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <HAL_I2C_MspInit+0x74>)
 8001986:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800198a:	61d3      	str	r3, [r2, #28]
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_I2C_MspInit+0x74>)
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001998:	bf00      	nop
 800199a:	3720      	adds	r7, #32
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40005400 	.word	0x40005400
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010c00 	.word	0x40010c00

080019ac <init>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void init(){
 80019ac:	b5b0      	push	{r4, r5, r7, lr}
 80019ae:	b0a2      	sub	sp, #136	; 0x88
 80019b0:	af22      	add	r7, sp, #136	; 0x88
	u8g2Init(&u8g2);
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <init+0x3c>)
 80019b4:	f000 fdbc 	bl	8002530 <u8g2Init>
	//display_page_init(u8g2);
	u8g2_ClearDisplay(&u8g2);
 80019b8:	480b      	ldr	r0, [pc, #44]	; (80019e8 <init+0x3c>)
 80019ba:	f001 f8d7 	bl	8002b6c <u8g2_ClearDisplay>
	HAL_TIM_Base_Start_IT(&htim6);
 80019be:	480b      	ldr	r0, [pc, #44]	; (80019ec <init+0x40>)
 80019c0:	f004 f9ca 	bl	8005d58 <HAL_TIM_Base_Start_IT>
	fresh_bat(battery,u8g2);
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <init+0x44>)
 80019c6:	681d      	ldr	r5, [r3, #0]
 80019c8:	4c07      	ldr	r4, [pc, #28]	; (80019e8 <init+0x3c>)
 80019ca:	4668      	mov	r0, sp
 80019cc:	f104 030c 	add.w	r3, r4, #12
 80019d0:	2288      	movs	r2, #136	; 0x88
 80019d2:	4619      	mov	r1, r3
 80019d4:	f004 fd4a 	bl	800646c <memcpy>
 80019d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80019dc:	4628      	mov	r0, r5
 80019de:	f7fe fc8b 	bl	80002f8 <fresh_bat>
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bdb0      	pop	{r4, r5, r7, pc}
 80019e8:	20000758 	.word	0x20000758
 80019ec:	20000808 	.word	0x20000808
 80019f0:	200000f0 	.word	0x200000f0

080019f4 <page1>:
void page1(){
 80019f4:	b5b0      	push	{r4, r5, r7, lr}
 80019f6:	b0a2      	sub	sp, #136	; 0x88
 80019f8:	af22      	add	r7, sp, #136	; 0x88
	if(switch_page){
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <page1+0x60>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d014      	beq.n	8001a2c <page1+0x38>
		u8g2_ClearDisplay(&u8g2);
 8001a02:	4815      	ldr	r0, [pc, #84]	; (8001a58 <page1+0x64>)
 8001a04:	f001 f8b2 	bl	8002b6c <u8g2_ClearDisplay>
		fresh_bat(battery,u8g2);
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <page1+0x68>)
 8001a0a:	681d      	ldr	r5, [r3, #0]
 8001a0c:	4c12      	ldr	r4, [pc, #72]	; (8001a58 <page1+0x64>)
 8001a0e:	4668      	mov	r0, sp
 8001a10:	f104 030c 	add.w	r3, r4, #12
 8001a14:	2288      	movs	r2, #136	; 0x88
 8001a16:	4619      	mov	r1, r3
 8001a18:	f004 fd28 	bl	800646c <memcpy>
 8001a1c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001a20:	4628      	mov	r0, r5
 8001a22:	f7fe fc69 	bl	80002f8 <fresh_bat>
		switch_page=0;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <page1+0x60>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
	}
	display_page_time(time,u8g2);
 8001a2c:	4c0a      	ldr	r4, [pc, #40]	; (8001a58 <page1+0x64>)
 8001a2e:	4668      	mov	r0, sp
 8001a30:	f104 030c 	add.w	r3, r4, #12
 8001a34:	2288      	movs	r2, #136	; 0x88
 8001a36:	4619      	mov	r1, r3
 8001a38:	f004 fd18 	bl	800646c <memcpy>
 8001a3c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001a40:	4807      	ldr	r0, [pc, #28]	; (8001a60 <page1+0x6c>)
 8001a42:	f7fe fc7f 	bl	8000344 <display_page_time>
	u8g2_SendBuffer(&u8g2);
 8001a46:	4804      	ldr	r0, [pc, #16]	; (8001a58 <page1+0x64>)
 8001a48:	f001 f828 	bl	8002a9c <u8g2_SendBuffer>
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bdb0      	pop	{r4, r5, r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200000e4 	.word	0x200000e4
 8001a58:	20000758 	.word	0x20000758
 8001a5c:	200000f0 	.word	0x200000f0
 8001a60:	20000000 	.word	0x20000000

08001a64 <page2>:
void page2(){
 8001a64:	b5b0      	push	{r4, r5, r7, lr}
 8001a66:	b0a2      	sub	sp, #136	; 0x88
 8001a68:	af22      	add	r7, sp, #136	; 0x88
	if(switch_page){
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <page2+0x84>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d02b      	beq.n	8001aca <page2+0x66>
		u8g2_ClearDisplay(&u8g2);
 8001a72:	481e      	ldr	r0, [pc, #120]	; (8001aec <page2+0x88>)
 8001a74:	f001 f87a 	bl	8002b6c <u8g2_ClearDisplay>
		fresh_bat(battery,u8g2);
 8001a78:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <page2+0x8c>)
 8001a7a:	681d      	ldr	r5, [r3, #0]
 8001a7c:	4c1b      	ldr	r4, [pc, #108]	; (8001aec <page2+0x88>)
 8001a7e:	4668      	mov	r0, sp
 8001a80:	f104 030c 	add.w	r3, r4, #12
 8001a84:	2288      	movs	r2, #136	; 0x88
 8001a86:	4619      	mov	r1, r3
 8001a88:	f004 fcf0 	bl	800646c <memcpy>
 8001a8c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001a90:	4628      	mov	r0, r5
 8001a92:	f7fe fc31 	bl	80002f8 <fresh_bat>
		switch_page=0;
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <page2+0x84>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
		u8g2_DrawXBM(&u8g2,48,5,32,32,set_pic);
 8001a9c:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <page2+0x90>)
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	2320      	movs	r3, #32
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	2205      	movs	r2, #5
 8001aa8:	2130      	movs	r1, #48	; 0x30
 8001aaa:	4810      	ldr	r0, [pc, #64]	; (8001aec <page2+0x88>)
 8001aac:	f000 ff40 	bl	8002930 <u8g2_DrawXBM>
		u8g2_SetFont(&u8g2,u8g2_font_t0_14_mf);
 8001ab0:	4911      	ldr	r1, [pc, #68]	; (8001af8 <page2+0x94>)
 8001ab2:	480e      	ldr	r0, [pc, #56]	; (8001aec <page2+0x88>)
 8001ab4:	f001 fe24 	bl	8003700 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2,38,50,"Set Time");
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <page2+0x98>)
 8001aba:	2232      	movs	r2, #50	; 0x32
 8001abc:	2126      	movs	r1, #38	; 0x26
 8001abe:	480b      	ldr	r0, [pc, #44]	; (8001aec <page2+0x88>)
 8001ac0:	f001 fd80 	bl	80035c4 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <page2+0x88>)
 8001ac6:	f000 ffe9 	bl	8002a9c <u8g2_SendBuffer>
	}
	if(button_sure()){
 8001aca:	f7fe fbc5 	bl	8000258 <button_sure>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <page2+0x7c>
		page=21;
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <page2+0x9c>)
 8001ad6:	2215      	movs	r2, #21
 8001ad8:	601a      	str	r2, [r3, #0]
		switch_page=1;
 8001ada:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <page2+0x84>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
	}
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200000e4 	.word	0x200000e4
 8001aec:	20000758 	.word	0x20000758
 8001af0:	200000f0 	.word	0x200000f0
 8001af4:	08006f00 	.word	0x08006f00
 8001af8:	08007098 	.word	0x08007098
 8001afc:	08006708 	.word	0x08006708
 8001b00:	20000054 	.word	0x20000054

08001b04 <page3>:
void page3(){
 8001b04:	b5b0      	push	{r4, r5, r7, lr}
 8001b06:	b0a2      	sub	sp, #136	; 0x88
 8001b08:	af22      	add	r7, sp, #136	; 0x88
	if(switch_page){
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <page3+0x84>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d02b      	beq.n	8001b6a <page3+0x66>
		u8g2_ClearDisplay(&u8g2);
 8001b12:	481e      	ldr	r0, [pc, #120]	; (8001b8c <page3+0x88>)
 8001b14:	f001 f82a 	bl	8002b6c <u8g2_ClearDisplay>
		fresh_bat(battery,u8g2);
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <page3+0x8c>)
 8001b1a:	681d      	ldr	r5, [r3, #0]
 8001b1c:	4c1b      	ldr	r4, [pc, #108]	; (8001b8c <page3+0x88>)
 8001b1e:	4668      	mov	r0, sp
 8001b20:	f104 030c 	add.w	r3, r4, #12
 8001b24:	2288      	movs	r2, #136	; 0x88
 8001b26:	4619      	mov	r1, r3
 8001b28:	f004 fca0 	bl	800646c <memcpy>
 8001b2c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001b30:	4628      	mov	r0, r5
 8001b32:	f7fe fbe1 	bl	80002f8 <fresh_bat>
		switch_page=0;
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <page3+0x84>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
		u8g2_DrawXBM(&u8g2,48,5,32,32,tem_pic);
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <page3+0x90>)
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	2320      	movs	r3, #32
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2320      	movs	r3, #32
 8001b46:	2205      	movs	r2, #5
 8001b48:	2130      	movs	r1, #48	; 0x30
 8001b4a:	4810      	ldr	r0, [pc, #64]	; (8001b8c <page3+0x88>)
 8001b4c:	f000 fef0 	bl	8002930 <u8g2_DrawXBM>
		u8g2_SetFont(&u8g2,u8g2_font_t0_14_mf);
 8001b50:	4911      	ldr	r1, [pc, #68]	; (8001b98 <page3+0x94>)
 8001b52:	480e      	ldr	r0, [pc, #56]	; (8001b8c <page3+0x88>)
 8001b54:	f001 fdd4 	bl	8003700 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2,43,50,"E Data");
 8001b58:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <page3+0x98>)
 8001b5a:	2232      	movs	r2, #50	; 0x32
 8001b5c:	212b      	movs	r1, #43	; 0x2b
 8001b5e:	480b      	ldr	r0, [pc, #44]	; (8001b8c <page3+0x88>)
 8001b60:	f001 fd30 	bl	80035c4 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 8001b64:	4809      	ldr	r0, [pc, #36]	; (8001b8c <page3+0x88>)
 8001b66:	f000 ff99 	bl	8002a9c <u8g2_SendBuffer>
	}
	if(button_sure()){
 8001b6a:	f7fe fb75 	bl	8000258 <button_sure>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <page3+0x7c>
		page=31;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <page3+0x9c>)
 8001b76:	221f      	movs	r2, #31
 8001b78:	601a      	str	r2, [r3, #0]
		switch_page=1;
 8001b7a:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <page3+0x84>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
	}
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bdb0      	pop	{r4, r5, r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200000e4 	.word	0x200000e4
 8001b8c:	20000758 	.word	0x20000758
 8001b90:	200000f0 	.word	0x200000f0
 8001b94:	08006e80 	.word	0x08006e80
 8001b98:	08007098 	.word	0x08007098
 8001b9c:	08006714 	.word	0x08006714
 8001ba0:	20000054 	.word	0x20000054

08001ba4 <page4>:
void page4(){
 8001ba4:	b5b0      	push	{r4, r5, r7, lr}
 8001ba6:	b0a2      	sub	sp, #136	; 0x88
 8001ba8:	af22      	add	r7, sp, #136	; 0x88
	if(switch_page){
 8001baa:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <page4+0x84>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d02b      	beq.n	8001c0a <page4+0x66>
		u8g2_ClearDisplay(&u8g2);
 8001bb2:	481e      	ldr	r0, [pc, #120]	; (8001c2c <page4+0x88>)
 8001bb4:	f000 ffda 	bl	8002b6c <u8g2_ClearDisplay>
		fresh_bat(battery,u8g2);
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <page4+0x8c>)
 8001bba:	681d      	ldr	r5, [r3, #0]
 8001bbc:	4c1b      	ldr	r4, [pc, #108]	; (8001c2c <page4+0x88>)
 8001bbe:	4668      	mov	r0, sp
 8001bc0:	f104 030c 	add.w	r3, r4, #12
 8001bc4:	2288      	movs	r2, #136	; 0x88
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f004 fc50 	bl	800646c <memcpy>
 8001bcc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001bd0:	4628      	mov	r0, r5
 8001bd2:	f7fe fb91 	bl	80002f8 <fresh_bat>
		switch_page=0;
 8001bd6:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <page4+0x84>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
		u8g2_DrawXBM(&u8g2,48,5,32,32,card_pic);
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <page4+0x90>)
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	2320      	movs	r3, #32
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2320      	movs	r3, #32
 8001be6:	2205      	movs	r2, #5
 8001be8:	2130      	movs	r1, #48	; 0x30
 8001bea:	4810      	ldr	r0, [pc, #64]	; (8001c2c <page4+0x88>)
 8001bec:	f000 fea0 	bl	8002930 <u8g2_DrawXBM>
		u8g2_SetFont(&u8g2,u8g2_font_t0_14_mf);
 8001bf0:	4911      	ldr	r1, [pc, #68]	; (8001c38 <page4+0x94>)
 8001bf2:	480e      	ldr	r0, [pc, #56]	; (8001c2c <page4+0x88>)
 8001bf4:	f001 fd84 	bl	8003700 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2,45,50,"Card");
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <page4+0x98>)
 8001bfa:	2232      	movs	r2, #50	; 0x32
 8001bfc:	212d      	movs	r1, #45	; 0x2d
 8001bfe:	480b      	ldr	r0, [pc, #44]	; (8001c2c <page4+0x88>)
 8001c00:	f001 fce0 	bl	80035c4 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 8001c04:	4809      	ldr	r0, [pc, #36]	; (8001c2c <page4+0x88>)
 8001c06:	f000 ff49 	bl	8002a9c <u8g2_SendBuffer>
	}
	if(button_sure()){
 8001c0a:	f7fe fb25 	bl	8000258 <button_sure>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <page4+0x7c>
		page=41;
 8001c14:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <page4+0x9c>)
 8001c16:	2229      	movs	r2, #41	; 0x29
 8001c18:	601a      	str	r2, [r3, #0]
		switch_page=1;
 8001c1a:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <page4+0x84>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
	}
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdb0      	pop	{r4, r5, r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200000e4 	.word	0x200000e4
 8001c2c:	20000758 	.word	0x20000758
 8001c30:	200000f0 	.word	0x200000f0
 8001c34:	08006f80 	.word	0x08006f80
 8001c38:	08007098 	.word	0x08007098
 8001c3c:	0800671c 	.word	0x0800671c
 8001c40:	20000054 	.word	0x20000054

08001c44 <page5>:
void page5(){
 8001c44:	b5b0      	push	{r4, r5, r7, lr}
 8001c46:	b0a2      	sub	sp, #136	; 0x88
 8001c48:	af22      	add	r7, sp, #136	; 0x88
	if(switch_page){
 8001c4a:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <page5+0x84>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d02b      	beq.n	8001caa <page5+0x66>
		u8g2_ClearDisplay(&u8g2);
 8001c52:	481e      	ldr	r0, [pc, #120]	; (8001ccc <page5+0x88>)
 8001c54:	f000 ff8a 	bl	8002b6c <u8g2_ClearDisplay>
		fresh_bat(battery,u8g2);
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <page5+0x8c>)
 8001c5a:	681d      	ldr	r5, [r3, #0]
 8001c5c:	4c1b      	ldr	r4, [pc, #108]	; (8001ccc <page5+0x88>)
 8001c5e:	4668      	mov	r0, sp
 8001c60:	f104 030c 	add.w	r3, r4, #12
 8001c64:	2288      	movs	r2, #136	; 0x88
 8001c66:	4619      	mov	r1, r3
 8001c68:	f004 fc00 	bl	800646c <memcpy>
 8001c6c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001c70:	4628      	mov	r0, r5
 8001c72:	f7fe fb41 	bl	80002f8 <fresh_bat>
		switch_page=0;
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <page5+0x84>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
		u8g2_DrawXBM(&u8g2,48,5,32,32,music_pic);
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <page5+0x90>)
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	2320      	movs	r3, #32
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2320      	movs	r3, #32
 8001c86:	2205      	movs	r2, #5
 8001c88:	2130      	movs	r1, #48	; 0x30
 8001c8a:	4810      	ldr	r0, [pc, #64]	; (8001ccc <page5+0x88>)
 8001c8c:	f000 fe50 	bl	8002930 <u8g2_DrawXBM>
		u8g2_SetFont(&u8g2,u8g2_font_t0_14_mf);
 8001c90:	4911      	ldr	r1, [pc, #68]	; (8001cd8 <page5+0x94>)
 8001c92:	480e      	ldr	r0, [pc, #56]	; (8001ccc <page5+0x88>)
 8001c94:	f001 fd34 	bl	8003700 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2,45,50,"Music");
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <page5+0x98>)
 8001c9a:	2232      	movs	r2, #50	; 0x32
 8001c9c:	212d      	movs	r1, #45	; 0x2d
 8001c9e:	480b      	ldr	r0, [pc, #44]	; (8001ccc <page5+0x88>)
 8001ca0:	f001 fc90 	bl	80035c4 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 8001ca4:	4809      	ldr	r0, [pc, #36]	; (8001ccc <page5+0x88>)
 8001ca6:	f000 fef9 	bl	8002a9c <u8g2_SendBuffer>
	}
	if(button_sure()){
 8001caa:	f7fe fad5 	bl	8000258 <button_sure>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <page5+0x7c>
		page=51;
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <page5+0x9c>)
 8001cb6:	2233      	movs	r2, #51	; 0x33
 8001cb8:	601a      	str	r2, [r3, #0]
		switch_page=1;
 8001cba:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <page5+0x84>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
	}
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200000e4 	.word	0x200000e4
 8001ccc:	20000758 	.word	0x20000758
 8001cd0:	200000f0 	.word	0x200000f0
 8001cd4:	08007000 	.word	0x08007000
 8001cd8:	08007098 	.word	0x08007098
 8001cdc:	08006724 	.word	0x08006724
 8001ce0:	20000054 	.word	0x20000054

08001ce4 <page2_1>:
void page2_1(){
 8001ce4:	b5b0      	push	{r4, r5, r7, lr}
 8001ce6:	b0a2      	sub	sp, #136	; 0x88
 8001ce8:	af22      	add	r7, sp, #136	; 0x88
	if(switch_page){
 8001cea:	4b65      	ldr	r3, [pc, #404]	; (8001e80 <page2_1+0x19c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d042      	beq.n	8001d78 <page2_1+0x94>
		u8g2_ClearDisplay(&u8g2);
 8001cf2:	4864      	ldr	r0, [pc, #400]	; (8001e84 <page2_1+0x1a0>)
 8001cf4:	f000 ff3a 	bl	8002b6c <u8g2_ClearDisplay>
		fresh_bat(battery,u8g2);
 8001cf8:	4b63      	ldr	r3, [pc, #396]	; (8001e88 <page2_1+0x1a4>)
 8001cfa:	681d      	ldr	r5, [r3, #0]
 8001cfc:	4c61      	ldr	r4, [pc, #388]	; (8001e84 <page2_1+0x1a0>)
 8001cfe:	4668      	mov	r0, sp
 8001d00:	f104 030c 	add.w	r3, r4, #12
 8001d04:	2288      	movs	r2, #136	; 0x88
 8001d06:	4619      	mov	r1, r3
 8001d08:	f004 fbb0 	bl	800646c <memcpy>
 8001d0c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001d10:	4628      	mov	r0, r5
 8001d12:	f7fe faf1 	bl	80002f8 <fresh_bat>
		switch_page=0;
 8001d16:	4b5a      	ldr	r3, [pc, #360]	; (8001e80 <page2_1+0x19c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
		evaluate_array(time_set,time,6);
 8001d1c:	2206      	movs	r2, #6
 8001d1e:	495b      	ldr	r1, [pc, #364]	; (8001e8c <page2_1+0x1a8>)
 8001d20:	485b      	ldr	r0, [pc, #364]	; (8001e90 <page2_1+0x1ac>)
 8001d22:	f7ff fd0d 	bl	8001740 <evaluate_array>
		set_time_pos=0;
 8001d26:	4b5b      	ldr	r3, [pc, #364]	; (8001e94 <page2_1+0x1b0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
		display_page_time(time_set,u8g2);
 8001d2c:	4c55      	ldr	r4, [pc, #340]	; (8001e84 <page2_1+0x1a0>)
 8001d2e:	4668      	mov	r0, sp
 8001d30:	f104 030c 	add.w	r3, r4, #12
 8001d34:	2288      	movs	r2, #136	; 0x88
 8001d36:	4619      	mov	r1, r3
 8001d38:	f004 fb98 	bl	800646c <memcpy>
 8001d3c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001d40:	4853      	ldr	r0, [pc, #332]	; (8001e90 <page2_1+0x1ac>)
 8001d42:	f7fe faff 	bl	8000344 <display_page_time>
		u8g2_SetFont(&u8g2,u8g2_font_siji_t_6x10);
 8001d46:	4954      	ldr	r1, [pc, #336]	; (8001e98 <page2_1+0x1b4>)
 8001d48:	484e      	ldr	r0, [pc, #312]	; (8001e84 <page2_1+0x1a0>)
 8001d4a:	f001 fcd9 	bl	8003700 <u8g2_SetFont>
		//u8g2_DrawGlyph(&u8g2,time_set_pos[0][0],time_set_pos[0][1],0xe12b);
		u8g2_DrawGlyph(&u8g2,time_set_pos[set_time_pos][0],time_set_pos[set_time_pos][1],0xe12b);
 8001d4e:	4b51      	ldr	r3, [pc, #324]	; (8001e94 <page2_1+0x1b0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <page2_1+0x1b8>)
 8001d54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001d58:	b299      	uxth	r1, r3
 8001d5a:	4b4e      	ldr	r3, [pc, #312]	; (8001e94 <page2_1+0x1b0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a4f      	ldr	r2, [pc, #316]	; (8001e9c <page2_1+0x1b8>)
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	f24e 132b 	movw	r3, #57643	; 0xe12b
 8001d6c:	4845      	ldr	r0, [pc, #276]	; (8001e84 <page2_1+0x1a0>)
 8001d6e:	f001 fb7b 	bl	8003468 <u8g2_DrawGlyph>
		u8g2_SendBuffer(&u8g2);
 8001d72:	4844      	ldr	r0, [pc, #272]	; (8001e84 <page2_1+0x1a0>)
 8001d74:	f000 fe92 	bl	8002a9c <u8g2_SendBuffer>
	}
	if(button_sure()){
 8001d78:	f7fe fa6e 	bl	8000258 <button_sure>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <page2_1+0xb4>
		evaluate_array(time,time_set,6);
 8001d82:	2206      	movs	r2, #6
 8001d84:	4942      	ldr	r1, [pc, #264]	; (8001e90 <page2_1+0x1ac>)
 8001d86:	4841      	ldr	r0, [pc, #260]	; (8001e8c <page2_1+0x1a8>)
 8001d88:	f7ff fcda 	bl	8001740 <evaluate_array>
		page=2;
 8001d8c:	4b44      	ldr	r3, [pc, #272]	; (8001ea0 <page2_1+0x1bc>)
 8001d8e:	2202      	movs	r2, #2
 8001d90:	601a      	str	r2, [r3, #0]
		switch_page=1;
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <page2_1+0x19c>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
	}
	if(button_return()){
 8001d98:	f7fe fa78 	bl	800028c <button_return>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <page2_1+0xca>
		page=2;
 8001da2:	4b3f      	ldr	r3, [pc, #252]	; (8001ea0 <page2_1+0x1bc>)
 8001da4:	2202      	movs	r2, #2
 8001da6:	601a      	str	r2, [r3, #0]
		switch_page=1;
 8001da8:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <page2_1+0x19c>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
	}
	if(button_turn()){
 8001dae:	f7fe fa39 	bl	8000224 <button_turn>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d043      	beq.n	8001e40 <page2_1+0x15c>
		set_time_pos=(set_time_pos+1)%6;
 8001db8:	4b36      	ldr	r3, [pc, #216]	; (8001e94 <page2_1+0x1b0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	1c59      	adds	r1, r3, #1
 8001dbe:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <page2_1+0x1c0>)
 8001dc0:	fb83 3201 	smull	r3, r2, r3, r1
 8001dc4:	17cb      	asrs	r3, r1, #31
 8001dc6:	1ad2      	subs	r2, r2, r3
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	1aca      	subs	r2, r1, r3
 8001dd2:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <page2_1+0x1b0>)
 8001dd4:	601a      	str	r2, [r3, #0]
		u8g2_ClearBuffer(&u8g2);
 8001dd6:	482b      	ldr	r0, [pc, #172]	; (8001e84 <page2_1+0x1a0>)
 8001dd8:	f000 fded 	bl	80029b6 <u8g2_ClearBuffer>
		display_page_time(time_set,u8g2);
 8001ddc:	4c29      	ldr	r4, [pc, #164]	; (8001e84 <page2_1+0x1a0>)
 8001dde:	4668      	mov	r0, sp
 8001de0:	f104 030c 	add.w	r3, r4, #12
 8001de4:	2288      	movs	r2, #136	; 0x88
 8001de6:	4619      	mov	r1, r3
 8001de8:	f004 fb40 	bl	800646c <memcpy>
 8001dec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001df0:	4827      	ldr	r0, [pc, #156]	; (8001e90 <page2_1+0x1ac>)
 8001df2:	f7fe faa7 	bl	8000344 <display_page_time>
		u8g2_SetFont(&u8g2,u8g2_font_siji_t_6x10);
 8001df6:	4928      	ldr	r1, [pc, #160]	; (8001e98 <page2_1+0x1b4>)
 8001df8:	4822      	ldr	r0, [pc, #136]	; (8001e84 <page2_1+0x1a0>)
 8001dfa:	f001 fc81 	bl	8003700 <u8g2_SetFont>
		u8g2_DrawGlyph(&u8g2,time_set_pos[set_time_pos][0],time_set_pos[set_time_pos][1],0xe12b);
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <page2_1+0x1b0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a26      	ldr	r2, [pc, #152]	; (8001e9c <page2_1+0x1b8>)
 8001e04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e08:	b299      	uxth	r1, r3
 8001e0a:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <page2_1+0x1b0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a23      	ldr	r2, [pc, #140]	; (8001e9c <page2_1+0x1b8>)
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4413      	add	r3, r2
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	f24e 132b 	movw	r3, #57643	; 0xe12b
 8001e1c:	4819      	ldr	r0, [pc, #100]	; (8001e84 <page2_1+0x1a0>)
 8001e1e:	f001 fb23 	bl	8003468 <u8g2_DrawGlyph>
		fresh_bat(battery,u8g2);
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <page2_1+0x1a4>)
 8001e24:	681d      	ldr	r5, [r3, #0]
 8001e26:	4c17      	ldr	r4, [pc, #92]	; (8001e84 <page2_1+0x1a0>)
 8001e28:	4668      	mov	r0, sp
 8001e2a:	f104 030c 	add.w	r3, r4, #12
 8001e2e:	2288      	movs	r2, #136	; 0x88
 8001e30:	4619      	mov	r1, r3
 8001e32:	f004 fb1b 	bl	800646c <memcpy>
 8001e36:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001e3a:	4628      	mov	r0, r5
 8001e3c:	f7fe fa5c 	bl	80002f8 <fresh_bat>
	}
	if(button_other1()){
 8001e40:	f7fe fa40 	bl	80002c4 <button_other1>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d016      	beq.n	8001e78 <page2_1+0x194>
		modify_time(time_set,set_time_pos,1);
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <page2_1+0x1b0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4619      	mov	r1, r3
 8001e52:	480f      	ldr	r0, [pc, #60]	; (8001e90 <page2_1+0x1ac>)
 8001e54:	f7ff fb6e 	bl	8001534 <modify_time>
		display_page_time(time_set,u8g2);
 8001e58:	4c0a      	ldr	r4, [pc, #40]	; (8001e84 <page2_1+0x1a0>)
 8001e5a:	4668      	mov	r0, sp
 8001e5c:	f104 030c 	add.w	r3, r4, #12
 8001e60:	2288      	movs	r2, #136	; 0x88
 8001e62:	4619      	mov	r1, r3
 8001e64:	f004 fb02 	bl	800646c <memcpy>
 8001e68:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001e6c:	4808      	ldr	r0, [pc, #32]	; (8001e90 <page2_1+0x1ac>)
 8001e6e:	f7fe fa69 	bl	8000344 <display_page_time>
		u8g2_SendBuffer(&u8g2);
 8001e72:	4804      	ldr	r0, [pc, #16]	; (8001e84 <page2_1+0x1a0>)
 8001e74:	f000 fe12 	bl	8002a9c <u8g2_SendBuffer>
	}
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200000e4 	.word	0x200000e4
 8001e84:	20000758 	.word	0x20000758
 8001e88:	200000f0 	.word	0x200000f0
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	200007ec 	.word	0x200007ec
 8001e94:	200000e8 	.word	0x200000e8
 8001e98:	08007c24 	.word	0x08007c24
 8001e9c:	2000001c 	.word	0x2000001c
 8001ea0:	20000054 	.word	0x20000054
 8001ea4:	2aaaaaab 	.word	0x2aaaaaab

08001ea8 <page3_1>:
void page3_1(){
 8001ea8:	b5b0      	push	{r4, r5, r7, lr}
 8001eaa:	b0a2      	sub	sp, #136	; 0x88
 8001eac:	af22      	add	r7, sp, #136	; 0x88
	if(switch_page){
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <page3_1+0x54>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d014      	beq.n	8001ee0 <page3_1+0x38>
		u8g2_ClearDisplay(&u8g2);
 8001eb6:	4812      	ldr	r0, [pc, #72]	; (8001f00 <page3_1+0x58>)
 8001eb8:	f000 fe58 	bl	8002b6c <u8g2_ClearDisplay>
		fresh_bat(battery,u8g2);
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <page3_1+0x5c>)
 8001ebe:	681d      	ldr	r5, [r3, #0]
 8001ec0:	4c0f      	ldr	r4, [pc, #60]	; (8001f00 <page3_1+0x58>)
 8001ec2:	4668      	mov	r0, sp
 8001ec4:	f104 030c 	add.w	r3, r4, #12
 8001ec8:	2288      	movs	r2, #136	; 0x88
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f004 face 	bl	800646c <memcpy>
 8001ed0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001ed4:	4628      	mov	r0, r5
 8001ed6:	f7fe fa0f 	bl	80002f8 <fresh_bat>
		switch_page=0;
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <page3_1+0x54>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
	}
	if(button_return()){
 8001ee0:	f7fe f9d4 	bl	800028c <button_return>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d005      	beq.n	8001ef6 <page3_1+0x4e>
		page=3;
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <page3_1+0x60>)
 8001eec:	2203      	movs	r2, #3
 8001eee:	601a      	str	r2, [r3, #0]
		switch_page=1;
 8001ef0:	4b02      	ldr	r3, [pc, #8]	; (8001efc <page3_1+0x54>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
	}
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bdb0      	pop	{r4, r5, r7, pc}
 8001efc:	200000e4 	.word	0x200000e4
 8001f00:	20000758 	.word	0x20000758
 8001f04:	200000f0 	.word	0x200000f0
 8001f08:	20000054 	.word	0x20000054

08001f0c <page4_1>:
void page4_1(){
 8001f0c:	b5b0      	push	{r4, r5, r7, lr}
 8001f0e:	b0a2      	sub	sp, #136	; 0x88
 8001f10:	af22      	add	r7, sp, #136	; 0x88
	if(switch_page){
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <page4_1+0x80>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d029      	beq.n	8001f6e <page4_1+0x62>
		u8g2_ClearDisplay(&u8g2);
 8001f1a:	481d      	ldr	r0, [pc, #116]	; (8001f90 <page4_1+0x84>)
 8001f1c:	f000 fe26 	bl	8002b6c <u8g2_ClearDisplay>
		fresh_bat(battery,u8g2);
 8001f20:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <page4_1+0x88>)
 8001f22:	681d      	ldr	r5, [r3, #0]
 8001f24:	4c1a      	ldr	r4, [pc, #104]	; (8001f90 <page4_1+0x84>)
 8001f26:	4668      	mov	r0, sp
 8001f28:	f104 030c 	add.w	r3, r4, #12
 8001f2c:	2288      	movs	r2, #136	; 0x88
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f004 fa9c 	bl	800646c <memcpy>
 8001f34:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001f38:	4628      	mov	r0, r5
 8001f3a:	f7fe f9dd 	bl	80002f8 <fresh_bat>
		switch_page=0;
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <page4_1+0x80>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
		play_card(u8g2,time[3]+time[4]+time[5]);
 8001f44:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <page4_1+0x8c>)
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <page4_1+0x8c>)
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	441a      	add	r2, r3
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <page4_1+0x8c>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	4413      	add	r3, r2
 8001f54:	4c0e      	ldr	r4, [pc, #56]	; (8001f90 <page4_1+0x84>)
 8001f56:	9321      	str	r3, [sp, #132]	; 0x84
 8001f58:	4668      	mov	r0, sp
 8001f5a:	f104 0310 	add.w	r3, r4, #16
 8001f5e:	2284      	movs	r2, #132	; 0x84
 8001f60:	4619      	mov	r1, r3
 8001f62:	f004 fa83 	bl	800646c <memcpy>
 8001f66:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f6a:	f7fe ff8f 	bl	8000e8c <play_card>
	}
	if(button_return()){
 8001f6e:	f7fe f98d 	bl	800028c <button_return>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <page4_1+0x78>
		page=4;
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <page4_1+0x90>)
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	601a      	str	r2, [r3, #0]
		switch_page=1;
 8001f7e:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <page4_1+0x80>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
	}
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bdb0      	pop	{r4, r5, r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200000e4 	.word	0x200000e4
 8001f90:	20000758 	.word	0x20000758
 8001f94:	200000f0 	.word	0x200000f0
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000054 	.word	0x20000054

08001fa0 <page5_1>:
void page5_1(){
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b0a2      	sub	sp, #136	; 0x88
 8001fa4:	af22      	add	r7, sp, #136	; 0x88
	if(switch_page){
 8001fa6:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <page5_1+0x108>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d026      	beq.n	8001ffc <page5_1+0x5c>
		u8g2_ClearDisplay(&u8g2);
 8001fae:	483f      	ldr	r0, [pc, #252]	; (80020ac <page5_1+0x10c>)
 8001fb0:	f000 fddc 	bl	8002b6c <u8g2_ClearDisplay>
		switch_page=0;
 8001fb4:	4b3c      	ldr	r3, [pc, #240]	; (80020a8 <page5_1+0x108>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
		music_pos=1;
 8001fba:	4b3d      	ldr	r3, [pc, #244]	; (80020b0 <page5_1+0x110>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
		display_page_music(u8g2,music_pos);
 8001fc0:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <page5_1+0x110>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4c39      	ldr	r4, [pc, #228]	; (80020ac <page5_1+0x10c>)
 8001fc6:	9321      	str	r3, [sp, #132]	; 0x84
 8001fc8:	4668      	mov	r0, sp
 8001fca:	f104 0310 	add.w	r3, r4, #16
 8001fce:	2284      	movs	r2, #132	; 0x84
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f004 fa4b 	bl	800646c <memcpy>
 8001fd6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fda:	f7fe fa35 	bl	8000448 <display_page_music>
		fresh_bat(battery,u8g2);
 8001fde:	4b35      	ldr	r3, [pc, #212]	; (80020b4 <page5_1+0x114>)
 8001fe0:	681d      	ldr	r5, [r3, #0]
 8001fe2:	4c32      	ldr	r4, [pc, #200]	; (80020ac <page5_1+0x10c>)
 8001fe4:	4668      	mov	r0, sp
 8001fe6:	f104 030c 	add.w	r3, r4, #12
 8001fea:	2288      	movs	r2, #136	; 0x88
 8001fec:	4619      	mov	r1, r3
 8001fee:	f004 fa3d 	bl	800646c <memcpy>
 8001ff2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001ff6:	4628      	mov	r0, r5
 8001ff8:	f7fe f97e 	bl	80002f8 <fresh_bat>
	}
	if(button_return()){
 8001ffc:	f7fe f946 	bl	800028c <button_return>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <page5_1+0x72>
		page=5;
 8002006:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <page5_1+0x118>)
 8002008:	2205      	movs	r2, #5
 800200a:	601a      	str	r2, [r3, #0]
		switch_page=1;
 800200c:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <page5_1+0x108>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]
	}
	if(button_sure()){
 8002012:	f7fe f921 	bl	8000258 <button_sure>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <page5_1+0x86>
		display_music(music_pos);
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <page5_1+0x110>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff f939 	bl	8001298 <display_music>
	}
	if(button_turn()){
 8002026:	f7fe f8fd 	bl	8000224 <button_turn>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d037      	beq.n	80020a0 <page5_1+0x100>
		music_pos=(music_pos==5)?1:(music_pos+1);
 8002030:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <page5_1+0x110>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b05      	cmp	r3, #5
 8002036:	d003      	beq.n	8002040 <page5_1+0xa0>
 8002038:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <page5_1+0x110>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	e000      	b.n	8002042 <page5_1+0xa2>
 8002040:	2301      	movs	r3, #1
 8002042:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <page5_1+0x110>)
 8002044:	6013      	str	r3, [r2, #0]
		fresh_bat(battery,u8g2);
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <page5_1+0x114>)
 8002048:	681d      	ldr	r5, [r3, #0]
 800204a:	4c18      	ldr	r4, [pc, #96]	; (80020ac <page5_1+0x10c>)
 800204c:	4668      	mov	r0, sp
 800204e:	f104 030c 	add.w	r3, r4, #12
 8002052:	2288      	movs	r2, #136	; 0x88
 8002054:	4619      	mov	r1, r3
 8002056:	f004 fa09 	bl	800646c <memcpy>
 800205a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800205e:	4628      	mov	r0, r5
 8002060:	f7fe f94a 	bl	80002f8 <fresh_bat>
		display_page_music(u8g2,music_pos);
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <page5_1+0x110>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4c10      	ldr	r4, [pc, #64]	; (80020ac <page5_1+0x10c>)
 800206a:	9321      	str	r3, [sp, #132]	; 0x84
 800206c:	4668      	mov	r0, sp
 800206e:	f104 0310 	add.w	r3, r4, #16
 8002072:	2284      	movs	r2, #132	; 0x84
 8002074:	4619      	mov	r1, r3
 8002076:	f004 f9f9 	bl	800646c <memcpy>
 800207a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800207e:	f7fe f9e3 	bl	8000448 <display_page_music>
		fresh_bat(battery,u8g2);
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <page5_1+0x114>)
 8002084:	681d      	ldr	r5, [r3, #0]
 8002086:	4c09      	ldr	r4, [pc, #36]	; (80020ac <page5_1+0x10c>)
 8002088:	4668      	mov	r0, sp
 800208a:	f104 030c 	add.w	r3, r4, #12
 800208e:	2288      	movs	r2, #136	; 0x88
 8002090:	4619      	mov	r1, r3
 8002092:	f004 f9eb 	bl	800646c <memcpy>
 8002096:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800209a:	4628      	mov	r0, r5
 800209c:	f7fe f92c 	bl	80002f8 <fresh_bat>
	}
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bdb0      	pop	{r4, r5, r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200000e4 	.word	0x200000e4
 80020ac:	20000758 	.word	0x20000758
 80020b0:	200000ec 	.word	0x200000ec
 80020b4:	200000f0 	.word	0x200000f0
 80020b8:	20000054 	.word	0x20000054

080020bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020c0:	f002 fa5c 	bl	800457c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c4:	f000 f8b6 	bl	8002234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020c8:	f7ff fb94 	bl	80017f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80020cc:	f7ff fc02 	bl	80018d4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80020d0:	f000 fb4a 	bl	8002768 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80020d4:	f000 faec 	bl	80026b0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init();
 80020d8:	f7ff fc68 	bl	80019ac <init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(button_turn()&&page<10){
 80020dc:	f7fe f8a2 	bl	8000224 <button_turn>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d015      	beq.n	8002112 <main+0x56>
 80020e6:	4b50      	ldr	r3, [pc, #320]	; (8002228 <main+0x16c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b09      	cmp	r3, #9
 80020ec:	dc11      	bgt.n	8002112 <main+0x56>
		  page=page%5+1;
 80020ee:	4b4e      	ldr	r3, [pc, #312]	; (8002228 <main+0x16c>)
 80020f0:	6819      	ldr	r1, [r3, #0]
 80020f2:	4b4e      	ldr	r3, [pc, #312]	; (800222c <main+0x170>)
 80020f4:	fb83 2301 	smull	r2, r3, r3, r1
 80020f8:	105a      	asrs	r2, r3, #1
 80020fa:	17cb      	asrs	r3, r1, #31
 80020fc:	1ad2      	subs	r2, r2, r3
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	1aca      	subs	r2, r1, r3
 8002106:	1c53      	adds	r3, r2, #1
 8002108:	4a47      	ldr	r2, [pc, #284]	; (8002228 <main+0x16c>)
 800210a:	6013      	str	r3, [r2, #0]
		  switch_page=1;
 800210c:	4b48      	ldr	r3, [pc, #288]	; (8002230 <main+0x174>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]
	  }
	  switch(page){
 8002112:	4b45      	ldr	r3, [pc, #276]	; (8002228 <main+0x16c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	3b01      	subs	r3, #1
 8002118:	2b32      	cmp	r3, #50	; 0x32
 800211a:	d8df      	bhi.n	80020dc <main+0x20>
 800211c:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <main+0x68>)
 800211e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002122:	bf00      	nop
 8002124:	080021f1 	.word	0x080021f1
 8002128:	080021f7 	.word	0x080021f7
 800212c:	080021fd 	.word	0x080021fd
 8002130:	08002203 	.word	0x08002203
 8002134:	08002209 	.word	0x08002209
 8002138:	080020dd 	.word	0x080020dd
 800213c:	080020dd 	.word	0x080020dd
 8002140:	080020dd 	.word	0x080020dd
 8002144:	080020dd 	.word	0x080020dd
 8002148:	080020dd 	.word	0x080020dd
 800214c:	080020dd 	.word	0x080020dd
 8002150:	080020dd 	.word	0x080020dd
 8002154:	080020dd 	.word	0x080020dd
 8002158:	080020dd 	.word	0x080020dd
 800215c:	080020dd 	.word	0x080020dd
 8002160:	080020dd 	.word	0x080020dd
 8002164:	080020dd 	.word	0x080020dd
 8002168:	080020dd 	.word	0x080020dd
 800216c:	080020dd 	.word	0x080020dd
 8002170:	080020dd 	.word	0x080020dd
 8002174:	0800220f 	.word	0x0800220f
 8002178:	080020dd 	.word	0x080020dd
 800217c:	080020dd 	.word	0x080020dd
 8002180:	080020dd 	.word	0x080020dd
 8002184:	080020dd 	.word	0x080020dd
 8002188:	080020dd 	.word	0x080020dd
 800218c:	080020dd 	.word	0x080020dd
 8002190:	080020dd 	.word	0x080020dd
 8002194:	080020dd 	.word	0x080020dd
 8002198:	080020dd 	.word	0x080020dd
 800219c:	08002215 	.word	0x08002215
 80021a0:	080020dd 	.word	0x080020dd
 80021a4:	080020dd 	.word	0x080020dd
 80021a8:	080020dd 	.word	0x080020dd
 80021ac:	080020dd 	.word	0x080020dd
 80021b0:	080020dd 	.word	0x080020dd
 80021b4:	080020dd 	.word	0x080020dd
 80021b8:	080020dd 	.word	0x080020dd
 80021bc:	080020dd 	.word	0x080020dd
 80021c0:	080020dd 	.word	0x080020dd
 80021c4:	0800221b 	.word	0x0800221b
 80021c8:	080020dd 	.word	0x080020dd
 80021cc:	080020dd 	.word	0x080020dd
 80021d0:	080020dd 	.word	0x080020dd
 80021d4:	080020dd 	.word	0x080020dd
 80021d8:	080020dd 	.word	0x080020dd
 80021dc:	080020dd 	.word	0x080020dd
 80021e0:	080020dd 	.word	0x080020dd
 80021e4:	080020dd 	.word	0x080020dd
 80021e8:	080020dd 	.word	0x080020dd
 80021ec:	08002221 	.word	0x08002221
	  	 case 1:page1();break;
 80021f0:	f7ff fc00 	bl	80019f4 <page1>
 80021f4:	e017      	b.n	8002226 <main+0x16a>
	  	  case 2:page2();break;
 80021f6:	f7ff fc35 	bl	8001a64 <page2>
 80021fa:	e014      	b.n	8002226 <main+0x16a>
	  	  case 3:page3();break;
 80021fc:	f7ff fc82 	bl	8001b04 <page3>
 8002200:	e011      	b.n	8002226 <main+0x16a>
	  	  case 4:page4();break;
 8002202:	f7ff fccf 	bl	8001ba4 <page4>
 8002206:	e00e      	b.n	8002226 <main+0x16a>
	  	  case 5:page5();break;
 8002208:	f7ff fd1c 	bl	8001c44 <page5>
 800220c:	e00b      	b.n	8002226 <main+0x16a>
	  	  //case 6:page5();break;
	  	  //case 7:page5();break;
	  	  //case 8:page5();break;
	  	  case 21:page2_1();break;
 800220e:	f7ff fd69 	bl	8001ce4 <page2_1>
 8002212:	e008      	b.n	8002226 <main+0x16a>
	  	  case 31:page3_1();break;
 8002214:	f7ff fe48 	bl	8001ea8 <page3_1>
 8002218:	e005      	b.n	8002226 <main+0x16a>
	  	  case 41:page4_1();break;
 800221a:	f7ff fe77 	bl	8001f0c <page4_1>
 800221e:	e002      	b.n	8002226 <main+0x16a>
	  	  case 51:page5_1();break;
 8002220:	f7ff febe 	bl	8001fa0 <page5_1>
 8002224:	bf00      	nop
	  if(button_turn()&&page<10){
 8002226:	e759      	b.n	80020dc <main+0x20>
 8002228:	20000054 	.word	0x20000054
 800222c:	66666667 	.word	0x66666667
 8002230:	200000e4 	.word	0x200000e4

08002234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b090      	sub	sp, #64	; 0x40
 8002238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800223a:	f107 0318 	add.w	r3, r7, #24
 800223e:	2228      	movs	r2, #40	; 0x28
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f004 f91d 	bl	8006482 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	60da      	str	r2, [r3, #12]
 8002254:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002256:	2301      	movs	r3, #1
 8002258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800225a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800225e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002264:	2301      	movs	r3, #1
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002268:	2302      	movs	r3, #2
 800226a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800226c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002270:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002272:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8002276:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002278:	f107 0318 	add.w	r3, r7, #24
 800227c:	4618      	mov	r0, r3
 800227e:	f003 f8ff 	bl	8005480 <HAL_RCC_OscConfig>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002288:	f000 f832 	bl	80022f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800228c:	230f      	movs	r3, #15
 800228e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002290:	2302      	movs	r3, #2
 8002292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2102      	movs	r1, #2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f003 fb6b 	bl	8005980 <HAL_RCC_ClockConfig>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80022b0:	f000 f81e 	bl	80022f0 <Error_Handler>
  }
}
 80022b4:	bf00      	nop
 80022b6:	3740      	adds	r7, #64	; 0x40
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d107      	bne.n	80022de <HAL_TIM_PeriodElapsedCallback+0x22>
		{
		time[5]++;
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x30>)
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	3301      	adds	r3, #1
 80022d4:	4a05      	ldr	r2, [pc, #20]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x30>)
 80022d6:	6153      	str	r3, [r2, #20]
		next_time(time);
 80022d8:	4804      	ldr	r0, [pc, #16]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x30>)
 80022da:	f7ff f861 	bl	80013a0 <next_time>
	    }

}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40001000 	.word	0x40001000
 80022ec:	20000000 	.word	0x20000000

080022f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <u8x8_byte_hw_i2c>:
#include "oled.h"
#include "i2c.h"

uint8_t u8x8_byte_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	72fb      	strb	r3, [r7, #11]
 800230a:	4613      	mov	r3, r2
 800230c:	72bb      	strb	r3, [r7, #10]
    /* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
    static uint8_t buffer[128];
    static uint8_t buf_idx;
    uint8_t *data;

    switch (msg)
 800230e:	7afb      	ldrb	r3, [r7, #11]
 8002310:	3b14      	subs	r3, #20
 8002312:	2b0c      	cmp	r3, #12
 8002314:	d84c      	bhi.n	80023b0 <u8x8_byte_hw_i2c+0xb4>
 8002316:	a201      	add	r2, pc, #4	; (adr r2, 800231c <u8x8_byte_hw_i2c+0x20>)
 8002318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231c:	08002351 	.word	0x08002351
 8002320:	080023b1 	.word	0x080023b1
 8002324:	080023b1 	.word	0x080023b1
 8002328:	0800235f 	.word	0x0800235f
 800232c:	08002357 	.word	0x08002357
 8002330:	0800238f 	.word	0x0800238f
 8002334:	080023b1 	.word	0x080023b1
 8002338:	080023b1 	.word	0x080023b1
 800233c:	080023b1 	.word	0x080023b1
 8002340:	080023b1 	.word	0x080023b1
 8002344:	080023b1 	.word	0x080023b1
 8002348:	080023b1 	.word	0x080023b1
 800234c:	080023b5 	.word	0x080023b5
    {
    case U8X8_MSG_BYTE_INIT:
    {
        /* add your custom code to init i2c subsystem */
        MX_I2C1_Init(); //I2C初始化
 8002350:	f7ff fac0 	bl	80018d4 <MX_I2C1_Init>
    }
    break;
 8002354:	e031      	b.n	80023ba <u8x8_byte_hw_i2c+0xbe>

    case U8X8_MSG_BYTE_START_TRANSFER:
    {
        buf_idx = 0;
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <u8x8_byte_hw_i2c+0xc8>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800235c:	e02d      	b.n	80023ba <u8x8_byte_hw_i2c+0xbe>

    case U8X8_MSG_BYTE_SEND:
    {
        data = (uint8_t *)arg_ptr;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	617b      	str	r3, [r7, #20]

        while (arg_int > 0)
 8002362:	e010      	b.n	8002386 <u8x8_byte_hw_i2c+0x8a>
        {
            buffer[buf_idx++] = *data;
 8002364:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <u8x8_byte_hw_i2c+0xc8>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	b2d1      	uxtb	r1, r2
 800236c:	4a15      	ldr	r2, [pc, #84]	; (80023c4 <u8x8_byte_hw_i2c+0xc8>)
 800236e:	7011      	strb	r1, [r2, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	7819      	ldrb	r1, [r3, #0]
 8002376:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <u8x8_byte_hw_i2c+0xcc>)
 8002378:	5499      	strb	r1, [r3, r2]
            data++;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3301      	adds	r3, #1
 800237e:	617b      	str	r3, [r7, #20]
            arg_int--;
 8002380:	7abb      	ldrb	r3, [r7, #10]
 8002382:	3b01      	subs	r3, #1
 8002384:	72bb      	strb	r3, [r7, #10]
        while (arg_int > 0)
 8002386:	7abb      	ldrb	r3, [r7, #10]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1eb      	bne.n	8002364 <u8x8_byte_hw_i2c+0x68>
        }
    }
    break;
 800238c:	e015      	b.n	80023ba <u8x8_byte_hw_i2c+0xbe>

    case U8X8_MSG_BYTE_END_TRANSFER:
    {
        if (HAL_I2C_Master_Transmit(&hi2c1, (OLED_ADDRESS), buffer, buf_idx, 1000) != HAL_OK)
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <u8x8_byte_hw_i2c+0xc8>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	b29a      	uxth	r2, r3
 8002394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	4613      	mov	r3, r2
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <u8x8_byte_hw_i2c+0xcc>)
 800239e:	2178      	movs	r1, #120	; 0x78
 80023a0:	480a      	ldr	r0, [pc, #40]	; (80023cc <u8x8_byte_hw_i2c+0xd0>)
 80023a2:	f002 fd67 	bl	8004e74 <HAL_I2C_Master_Transmit>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <u8x8_byte_hw_i2c+0xbc>
            return 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e005      	b.n	80023bc <u8x8_byte_hw_i2c+0xc0>

    case U8X8_MSG_BYTE_SET_DC:
        break;

    default:
        return 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e003      	b.n	80023bc <u8x8_byte_hw_i2c+0xc0>
        break;
 80023b4:	bf00      	nop
 80023b6:	e000      	b.n	80023ba <u8x8_byte_hw_i2c+0xbe>
    break;
 80023b8:	bf00      	nop
    }

    return 1;
 80023ba:	2301      	movs	r3, #1
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200000f4 	.word	0x200000f4
 80023c8:	200000f8 	.word	0x200000f8
 80023cc:	20000704 	.word	0x20000704

080023d0 <delay_us>:

void delay_us(uint32_t time)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
    uint32_t i = 8 * time;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	60fb      	str	r3, [r7, #12]
    while (i--)
 80023de:	bf00      	nop
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1e5a      	subs	r2, r3, #1
 80023e4:	60fa      	str	r2, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1fa      	bne.n	80023e0 <delay_us+0x10>
        ;
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <u8x8_gpio_and_delay>:

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	460b      	mov	r3, r1
 8002400:	72fb      	strb	r3, [r7, #11]
 8002402:	4613      	mov	r3, r2
 8002404:	72bb      	strb	r3, [r7, #10]
    switch (msg)
 8002406:	7afb      	ldrb	r3, [r7, #11]
 8002408:	3b29      	subs	r3, #41	; 0x29
 800240a:	2b2a      	cmp	r3, #42	; 0x2a
 800240c:	f200 8084 	bhi.w	8002518 <u8x8_gpio_and_delay+0x124>
 8002410:	a201      	add	r2, pc, #4	; (adr r2, 8002418 <u8x8_gpio_and_delay+0x24>)
 8002412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002416:	bf00      	nop
 8002418:	080024e1 	.word	0x080024e1
 800241c:	080024c9 	.word	0x080024c9
 8002420:	080024c5 	.word	0x080024c5
 8002424:	08002519 	.word	0x08002519
 8002428:	080024e9 	.word	0x080024e9
 800242c:	08002519 	.word	0x08002519
 8002430:	08002519 	.word	0x08002519
 8002434:	08002519 	.word	0x08002519
 8002438:	08002519 	.word	0x08002519
 800243c:	08002519 	.word	0x08002519
 8002440:	08002519 	.word	0x08002519
 8002444:	08002519 	.word	0x08002519
 8002448:	08002519 	.word	0x08002519
 800244c:	08002519 	.word	0x08002519
 8002450:	08002519 	.word	0x08002519
 8002454:	08002519 	.word	0x08002519
 8002458:	08002519 	.word	0x08002519
 800245c:	08002519 	.word	0x08002519
 8002460:	08002519 	.word	0x08002519
 8002464:	08002519 	.word	0x08002519
 8002468:	08002519 	.word	0x08002519
 800246c:	08002519 	.word	0x08002519
 8002470:	08002519 	.word	0x08002519
 8002474:	08002519 	.word	0x08002519
 8002478:	08002519 	.word	0x08002519
 800247c:	08002519 	.word	0x08002519
 8002480:	08002519 	.word	0x08002519
 8002484:	08002519 	.word	0x08002519
 8002488:	08002519 	.word	0x08002519
 800248c:	08002519 	.word	0x08002519
 8002490:	08002519 	.word	0x08002519
 8002494:	08002519 	.word	0x08002519
 8002498:	08002519 	.word	0x08002519
 800249c:	08002519 	.word	0x08002519
 80024a0:	08002519 	.word	0x08002519
 80024a4:	08002523 	.word	0x08002523
 80024a8:	08002523 	.word	0x08002523
 80024ac:	08002519 	.word	0x08002519
 80024b0:	08002519 	.word	0x08002519
 80024b4:	080024f1 	.word	0x080024f1
 80024b8:	080024fb 	.word	0x080024fb
 80024bc:	08002505 	.word	0x08002505
 80024c0:	0800250f 	.word	0x0800250f
    {
    case U8X8_MSG_DELAY_100NANO: // delay arg_int * 100 nano seconds
        __NOP();
 80024c4:	bf00      	nop
        break;
 80024c6:	e02d      	b.n	8002524 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
        for (uint16_t n = 0; n < 320; n++)
 80024c8:	2300      	movs	r3, #0
 80024ca:	82fb      	strh	r3, [r7, #22]
 80024cc:	e003      	b.n	80024d6 <u8x8_gpio_and_delay+0xe2>
        {
            __NOP();
 80024ce:	bf00      	nop
        for (uint16_t n = 0; n < 320; n++)
 80024d0:	8afb      	ldrh	r3, [r7, #22]
 80024d2:	3301      	adds	r3, #1
 80024d4:	82fb      	strh	r3, [r7, #22]
 80024d6:	8afb      	ldrh	r3, [r7, #22]
 80024d8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80024dc:	d3f7      	bcc.n	80024ce <u8x8_gpio_and_delay+0xda>
        }
        break;
 80024de:	e021      	b.n	8002524 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_DELAY_MILLI: // delay arg_int * 1 milli second
        HAL_Delay(1);
 80024e0:	2001      	movs	r0, #1
 80024e2:	f002 f8ad 	bl	8004640 <HAL_Delay>
        break;
 80024e6:	e01d      	b.n	8002524 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_DELAY_I2C: // arg_int is the I2C speed in 100KHz, e.g. 4 = 400 KHz
        delay_us(5);
 80024e8:	2005      	movs	r0, #5
 80024ea:	f7ff ff71 	bl	80023d0 <delay_us>
        break;                    // arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 80024ee:	e019      	b.n	8002524 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_GPIO_I2C_CLOCK: // arg_int=0: Output low at I2C clock pin
        break;                    // arg_int=1: Input dir with pullup high for I2C clock pin
    case U8X8_MSG_GPIO_I2C_DATA:  // arg_int=0: Output low at I2C data pin
        break;                    // arg_int=1: Input dir with pullup high for I2C data pin
    case U8X8_MSG_GPIO_MENU_SELECT:
        u8x8_SetGPIOResult(u8x8, /* get menu select pin state */ 0);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 80024f8:	e014      	b.n	8002524 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_GPIO_MENU_NEXT:
        u8x8_SetGPIOResult(u8x8, /* get menu next pin state */ 0);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 8002502:	e00f      	b.n	8002524 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_GPIO_MENU_PREV:
        u8x8_SetGPIOResult(u8x8, /* get menu prev pin state */ 0);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 800250c:	e00a      	b.n	8002524 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_GPIO_MENU_HOME:
        u8x8_SetGPIOResult(u8x8, /* get menu home pin state */ 0);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 8002516:	e005      	b.n	8002524 <u8x8_gpio_and_delay+0x130>
    default:
        u8x8_SetGPIOResult(u8x8, 1); // default return value
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 8002520:	e000      	b.n	8002524 <u8x8_gpio_and_delay+0x130>
        break;                    // arg_int=1: Input dir with pullup high for I2C clock pin
 8002522:	bf00      	nop
    }
    return 1;
 8002524:	2301      	movs	r3, #1
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop

08002530 <u8g2Init>:
void u8g2Init(u8g2_t *u8g2)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay); // 初始化 u8g2 结构体
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <u8g2Init+0x30>)
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <u8g2Init+0x34>)
 800253c:	490a      	ldr	r1, [pc, #40]	; (8002568 <u8g2Init+0x38>)
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fb3a 	bl	8002bb8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
	u8g2_InitDisplay(u8g2);                                                                       // 根据所选的芯片进行初始化工作，初始化完成后，显示器处于关闭状态
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f001 ff56 	bl	80043f6 <u8x8_InitDisplay>
	u8g2_SetPowerSave(u8g2, 0);                                                                   // 打开显示器
 800254a:	2100      	movs	r1, #0
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f001 ff61 	bl	8004414 <u8x8_SetPowerSave>
	u8g2_ClearBuffer(u8g2);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fa2f 	bl	80029b6 <u8g2_ClearBuffer>
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	080023f5 	.word	0x080023f5
 8002564:	080022fd 	.word	0x080022fd
 8002568:	0800eac0 	.word	0x0800eac0

0800256c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_MspInit+0x5c>)
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <HAL_MspInit+0x5c>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6193      	str	r3, [r2, #24]
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_MspInit+0x5c>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <HAL_MspInit+0x5c>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <HAL_MspInit+0x5c>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002594:	61d3      	str	r3, [r2, #28]
 8002596:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <HAL_MspInit+0x5c>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_MspInit+0x60>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <HAL_MspInit+0x60>)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40010000 	.word	0x40010000

080025d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <HardFault_Handler+0x4>

080025e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e6:	e7fe      	b.n	80025e6 <MemManage_Handler+0x4>

080025e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <BusFault_Handler+0x4>

080025ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <UsageFault_Handler+0x4>

080025f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800261c:	f001 fff4 	bl	8004608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}

08002624 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002628:	4802      	ldr	r0, [pc, #8]	; (8002634 <TIM6_IRQHandler+0x10>)
 800262a:	f003 fbf5 	bl	8005e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000808 	.word	0x20000808

08002638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002640:	4a14      	ldr	r2, [pc, #80]	; (8002694 <_sbrk+0x5c>)
 8002642:	4b15      	ldr	r3, [pc, #84]	; (8002698 <_sbrk+0x60>)
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <_sbrk+0x64>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d102      	bne.n	800265a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <_sbrk+0x64>)
 8002656:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <_sbrk+0x68>)
 8002658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <_sbrk+0x64>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	429a      	cmp	r2, r3
 8002666:	d207      	bcs.n	8002678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002668:	f003 fed6 	bl	8006418 <__errno>
 800266c:	4602      	mov	r2, r0
 800266e:	230c      	movs	r3, #12
 8002670:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002672:	f04f 33ff 	mov.w	r3, #4294967295
 8002676:	e009      	b.n	800268c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <_sbrk+0x64>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800267e:	4b07      	ldr	r3, [pc, #28]	; (800269c <_sbrk+0x64>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	4a05      	ldr	r2, [pc, #20]	; (800269c <_sbrk+0x64>)
 8002688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800268a:	68fb      	ldr	r3, [r7, #12]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	2000c000 	.word	0x2000c000
 8002698:	00000400 	.word	0x00000400
 800269c:	20000178 	.word	0x20000178
 80026a0:	200008a0 	.word	0x200008a0

080026a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b6:	463b      	mov	r3, r7
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <MX_TIM6_Init+0x64>)
 80026c0:	4a15      	ldr	r2, [pc, #84]	; (8002718 <MX_TIM6_Init+0x68>)
 80026c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3199;
 80026c4:	4b13      	ldr	r3, [pc, #76]	; (8002714 <MX_TIM6_Init+0x64>)
 80026c6:	f640 427f 	movw	r2, #3199	; 0xc7f
 80026ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <MX_TIM6_Init+0x64>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <MX_TIM6_Init+0x64>)
 80026d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80026d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <MX_TIM6_Init+0x64>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026e0:	480c      	ldr	r0, [pc, #48]	; (8002714 <MX_TIM6_Init+0x64>)
 80026e2:	f003 fae9 	bl	8005cb8 <HAL_TIM_Base_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80026ec:	f7ff fe00 	bl	80022f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026f0:	2300      	movs	r3, #0
 80026f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026f8:	463b      	mov	r3, r7
 80026fa:	4619      	mov	r1, r3
 80026fc:	4805      	ldr	r0, [pc, #20]	; (8002714 <MX_TIM6_Init+0x64>)
 80026fe:	f003 fd31 	bl	8006164 <HAL_TIMEx_MasterConfigSynchronization>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002708:	f7ff fdf2 	bl	80022f0 <Error_Handler>
  }

}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000808 	.word	0x20000808
 8002718:	40001000 	.word	0x40001000

0800271c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <HAL_TIM_Base_MspInit+0x44>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d113      	bne.n	8002756 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800272e:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <HAL_TIM_Base_MspInit+0x48>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <HAL_TIM_Base_MspInit+0x48>)
 8002734:	f043 0310 	orr.w	r3, r3, #16
 8002738:	61d3      	str	r3, [r2, #28]
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_TIM_Base_MspInit+0x48>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	2036      	movs	r0, #54	; 0x36
 800274c:	f002 f871 	bl	8004832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002750:	2036      	movs	r0, #54	; 0x36
 8002752:	f002 f88a 	bl	800486a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40001000 	.word	0x40001000
 8002764:	40021000 	.word	0x40021000

08002768 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <MX_USART1_UART_Init+0x4c>)
 800276e:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <MX_USART1_UART_Init+0x50>)
 8002770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <MX_USART1_UART_Init+0x4c>)
 8002774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800277a:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <MX_USART1_UART_Init+0x4c>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <MX_USART1_UART_Init+0x4c>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002786:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <MX_USART1_UART_Init+0x4c>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <MX_USART1_UART_Init+0x4c>)
 800278e:	220c      	movs	r2, #12
 8002790:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <MX_USART1_UART_Init+0x4c>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <MX_USART1_UART_Init+0x4c>)
 800279a:	2200      	movs	r2, #0
 800279c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800279e:	4805      	ldr	r0, [pc, #20]	; (80027b4 <MX_USART1_UART_Init+0x4c>)
 80027a0:	f003 fd5e 	bl	8006260 <HAL_UART_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027aa:	f7ff fda1 	bl	80022f0 <Error_Handler>
  }

}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000850 	.word	0x20000850
 80027b8:	40013800 	.word	0x40013800

080027bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <HAL_UART_MspInit+0x8c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d131      	bne.n	8002840 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027dc:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_UART_MspInit+0x90>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	4a1a      	ldr	r2, [pc, #104]	; (800284c <HAL_UART_MspInit+0x90>)
 80027e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e6:	6193      	str	r3, [r2, #24]
 80027e8:	4b18      	ldr	r3, [pc, #96]	; (800284c <HAL_UART_MspInit+0x90>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f4:	4b15      	ldr	r3, [pc, #84]	; (800284c <HAL_UART_MspInit+0x90>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	4a14      	ldr	r2, [pc, #80]	; (800284c <HAL_UART_MspInit+0x90>)
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	6193      	str	r3, [r2, #24]
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_UART_MspInit+0x90>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800280c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002810:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002816:	2303      	movs	r3, #3
 8002818:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281a:	f107 0310 	add.w	r3, r7, #16
 800281e:	4619      	mov	r1, r3
 8002820:	480b      	ldr	r0, [pc, #44]	; (8002850 <HAL_UART_MspInit+0x94>)
 8002822:	f002 f83d 	bl	80048a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800282a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002834:	f107 0310 	add.w	r3, r7, #16
 8002838:	4619      	mov	r1, r3
 800283a:	4805      	ldr	r0, [pc, #20]	; (8002850 <HAL_UART_MspInit+0x94>)
 800283c:	f002 f830 	bl	80048a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002840:	bf00      	nop
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40013800 	.word	0x40013800
 800284c:	40021000 	.word	0x40021000
 8002850:	40010800 	.word	0x40010800

08002854 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	4608      	mov	r0, r1
 800285e:	4611      	mov	r1, r2
 8002860:	461a      	mov	r2, r3
 8002862:	4603      	mov	r3, r0
 8002864:	817b      	strh	r3, [r7, #10]
 8002866:	460b      	mov	r3, r1
 8002868:	813b      	strh	r3, [r7, #8]
 800286a:	4613      	mov	r3, r2
 800286c:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002874:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8002876:	7dbb      	ldrb	r3, [r7, #22]
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8002884:	897a      	ldrh	r2, [r7, #10]
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	4413      	add	r3, r2
 800288a:	b298      	uxth	r0, r3
 800288c:	893b      	ldrh	r3, [r7, #8]
 800288e:	3301      	adds	r3, #1
 8002890:	b29b      	uxth	r3, r3
 8002892:	893a      	ldrh	r2, [r7, #8]
 8002894:	8979      	ldrh	r1, [r7, #10]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	4603      	mov	r3, r0
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f001 f876 	bl	800398c <u8g2_IsIntersection>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d040      	beq.n	8002928 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 80028aa:	e035      	b.n	8002918 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
 80028b2:	4013      	ands	r3, r2
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00c      	beq.n	80028d4 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	7dba      	ldrb	r2, [r7, #22]
 80028be:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80028c2:	893a      	ldrh	r2, [r7, #8]
 80028c4:	8979      	ldrh	r1, [r7, #10]
 80028c6:	2300      	movs	r3, #0
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	2301      	movs	r3, #1
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 ff9f 	bl	8003810 <u8g2_DrawHVLine>
 80028d2:	e010      	b.n	80028f6 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10b      	bne.n	80028f6 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	7d7a      	ldrb	r2, [r7, #21]
 80028e2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80028e6:	893a      	ldrh	r2, [r7, #8]
 80028e8:	8979      	ldrh	r1, [r7, #10]
 80028ea:	2300      	movs	r3, #0
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2301      	movs	r3, #1
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 ff8d 	bl	8003810 <u8g2_DrawHVLine>
    }
    x++;
 80028f6:	897b      	ldrh	r3, [r7, #10]
 80028f8:	3301      	adds	r3, #1
 80028fa:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 80028fc:	7dfb      	ldrb	r3, [r7, #23]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8002902:	7dfb      	ldrb	r3, [r7, #23]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d104      	bne.n	8002912 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8002908:	2301      	movs	r3, #1
 800290a:	75fb      	strb	r3, [r7, #23]
      b++;
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	3301      	adds	r3, #1
 8002910:	623b      	str	r3, [r7, #32]
    }
    len--;
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	3b01      	subs	r3, #1
 8002916:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1c6      	bne.n	80028ac <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	7dba      	ldrb	r2, [r7, #22]
 8002922:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8002926:	e000      	b.n	800292a <u8g2_DrawHXBM+0xd6>
    return;
 8002928:	bf00      	nop
}
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	4608      	mov	r0, r1
 800293a:	4611      	mov	r1, r2
 800293c:	461a      	mov	r2, r3
 800293e:	4603      	mov	r3, r0
 8002940:	817b      	strh	r3, [r7, #10]
 8002942:	460b      	mov	r3, r1
 8002944:	813b      	strh	r3, [r7, #8]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 800294e:	8afb      	ldrh	r3, [r7, #22]
 8002950:	3307      	adds	r3, #7
 8002952:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8002954:	8afb      	ldrh	r3, [r7, #22]
 8002956:	08db      	lsrs	r3, r3, #3
 8002958:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800295a:	897a      	ldrh	r2, [r7, #10]
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	4413      	add	r3, r2
 8002960:	b298      	uxth	r0, r3
 8002962:	893a      	ldrh	r2, [r7, #8]
 8002964:	8c3b      	ldrh	r3, [r7, #32]
 8002966:	4413      	add	r3, r2
 8002968:	b29b      	uxth	r3, r3
 800296a:	893a      	ldrh	r2, [r7, #8]
 800296c:	8979      	ldrh	r1, [r7, #10]
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	4603      	mov	r3, r0
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f001 f80a 	bl	800398c <u8g2_IsIntersection>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d017      	beq.n	80029ae <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 800297e:	e012      	b.n	80029a6 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8002980:	88f8      	ldrh	r0, [r7, #6]
 8002982:	893a      	ldrh	r2, [r7, #8]
 8002984:	8979      	ldrh	r1, [r7, #10]
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	4603      	mov	r3, r0
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7ff ff61 	bl	8002854 <u8g2_DrawHXBM>
    bitmap += blen;
 8002992:	8afb      	ldrh	r3, [r7, #22]
 8002994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002996:	4413      	add	r3, r2
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 800299a:	893b      	ldrh	r3, [r7, #8]
 800299c:	3301      	adds	r3, #1
 800299e:	813b      	strh	r3, [r7, #8]
    h--;
 80029a0:	8c3b      	ldrh	r3, [r7, #32]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 80029a6:	8c3b      	ldrh	r3, [r7, #32]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1e9      	bne.n	8002980 <u8g2_DrawXBM+0x50>
 80029ac:	e000      	b.n	80029b0 <u8g2_DrawXBM+0x80>
    return;
 80029ae:	bf00      	nop
  }
}
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	7c1b      	ldrb	r3, [r3, #16]
 80029c4:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029cc:	461a      	mov	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	fb02 f303 	mul.w	r3, r2, r3
 80029d4:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	2100      	movs	r1, #0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f003 fd4c 	bl	8006482 <memset>
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af02      	add	r7, sp, #8
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	460b      	mov	r3, r1
 80029fc:	70fb      	strb	r3, [r7, #3]
 80029fe:	4613      	mov	r3, r2
 8002a00:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	7c1b      	ldrb	r3, [r3, #16]
 8002a08:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8002a0a:	78fb      	ldrb	r3, [r7, #3]
 8002a0c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a12:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	89ba      	ldrh	r2, [r7, #12]
 8002a1a:	fb02 f303 	mul.w	r3, r2, r3
 8002a1e:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8002a20:	89bb      	ldrh	r3, [r7, #12]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8002a26:	89bb      	ldrh	r3, [r7, #12]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8002a2e:	7bf9      	ldrb	r1, [r7, #15]
 8002a30:	78ba      	ldrb	r2, [r7, #2]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	460b      	mov	r3, r1
 8002a38:	2100      	movs	r1, #0
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f001 fcaa 	bl	8004394 <u8x8_DrawTile>
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a5a:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a62:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	7c5b      	ldrb	r3, [r3, #17]
 8002a6a:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8002a6c:	7bba      	ldrb	r2, [r7, #14]
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	4619      	mov	r1, r3
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ffbd 	bl	80029f2 <u8g2_send_tile_row>
    src_row++;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8002a7e:	7bbb      	ldrb	r3, [r7, #14]
 8002a80:	3301      	adds	r3, #1
 8002a82:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	7b7b      	ldrb	r3, [r7, #13]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d203      	bcs.n	8002a94 <u8g2_send_buffer+0x4c>
 8002a8c:	7bba      	ldrb	r2, [r7, #14]
 8002a8e:	7b3b      	ldrb	r3, [r7, #12]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d3eb      	bcc.n	8002a6c <u8g2_send_buffer+0x24>
}
 8002a94:	bf00      	nop
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff ffcf 	bl	8002a48 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f001 fcc3 	bl	8004436 <u8x8_RefreshDisplay>
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff ff5b 	bl	80029b6 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8002b00:	2100      	movs	r1, #0
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff ffd8 	bl	8002ab8 <u8g2_SetBufferCurrTileRow>
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ff95 	bl	8002a48 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b24:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	4413      	add	r3, r2
 8002b30:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	7c5b      	ldrb	r3, [r3, #17]
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d304      	bcc.n	8002b48 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f001 fc79 	bl	8004436 <u8x8_RefreshDisplay>
    return 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e00d      	b.n	8002b64 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff ff2f 	bl	80029b6 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ffab 	bl	8002ab8 <u8g2_SetBufferCurrTileRow>
  return 1;
 8002b62:	2301      	movs	r3, #1
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff ffb7 	bl	8002ae8 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ffc8 	bl	8002b10 <u8g2_NextPage>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f9      	bne.n	8002b7a <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8002b86:	2100      	movs	r1, #0
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff ff95 	bl	8002ab8 <u8g2_SetBufferCurrTileRow>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <u8g2_m_16_8_f>:
#include "u8g2.h"
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	701a      	strb	r2, [r3, #0]
  return buf;
 8002ba6:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	2000017c 	.word	0x2000017c

08002bb8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
#include "u8g2.h"
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a0b      	ldr	r2, [pc, #44]	; (8002bfc <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 8002bce:	490c      	ldr	r1, [pc, #48]	; (8002c00 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f001 fc8f 	bl	80044f4 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8002bd6:	f107 0313 	add.w	r3, r7, #19
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ffdc 	bl	8002b98 <u8g2_m_16_8_f>
 8002be0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8002be2:	7cfa      	ldrb	r2, [r7, #19]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 8002bea:	6979      	ldr	r1, [r7, #20]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 ffb6 	bl	8003b5e <u8g2_SetupBuffer>
}
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	08004035 	.word	0x08004035
 8002c00:	08004291 	.word	0x08004291
 8002c04:	080039e3 	.word	0x080039e3

08002c08 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	4413      	add	r3, r2
 8002c1a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	460b      	mov	r3, r1
 8002c34:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	81fb      	strh	r3, [r7, #14]
    font++;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3301      	adds	r3, #1
 8002c48:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8002c4a:	89fb      	ldrh	r3, [r7, #14]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	89fb      	ldrh	r3, [r7, #14]
 8002c58:	4413      	add	r3, r2
 8002c5a:	81fb      	strh	r3, [r7, #14]
    return pos;
 8002c5c:	89fb      	ldrh	r3, [r7, #14]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8002c72:	2100      	movs	r1, #0
 8002c74:	6838      	ldr	r0, [r7, #0]
 8002c76:	f7ff ffc7 	bl	8002c08 <u8g2_font_get_byte>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8002c82:	2101      	movs	r1, #1
 8002c84:	6838      	ldr	r0, [r7, #0]
 8002c86:	f7ff ffbf 	bl	8002c08 <u8g2_font_get_byte>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8002c92:	2102      	movs	r1, #2
 8002c94:	6838      	ldr	r0, [r7, #0]
 8002c96:	f7ff ffb7 	bl	8002c08 <u8g2_font_get_byte>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8002ca2:	2103      	movs	r1, #3
 8002ca4:	6838      	ldr	r0, [r7, #0]
 8002ca6:	f7ff ffaf 	bl	8002c08 <u8g2_font_get_byte>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461a      	mov	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8002cb2:	2104      	movs	r1, #4
 8002cb4:	6838      	ldr	r0, [r7, #0]
 8002cb6:	f7ff ffa7 	bl	8002c08 <u8g2_font_get_byte>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8002cc2:	2105      	movs	r1, #5
 8002cc4:	6838      	ldr	r0, [r7, #0]
 8002cc6:	f7ff ff9f 	bl	8002c08 <u8g2_font_get_byte>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	461a      	mov	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8002cd2:	2106      	movs	r1, #6
 8002cd4:	6838      	ldr	r0, [r7, #0]
 8002cd6:	f7ff ff97 	bl	8002c08 <u8g2_font_get_byte>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	461a      	mov	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8002ce2:	2107      	movs	r1, #7
 8002ce4:	6838      	ldr	r0, [r7, #0]
 8002ce6:	f7ff ff8f 	bl	8002c08 <u8g2_font_get_byte>
 8002cea:	4603      	mov	r3, r0
 8002cec:	461a      	mov	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8002cf2:	2108      	movs	r1, #8
 8002cf4:	6838      	ldr	r0, [r7, #0]
 8002cf6:	f7ff ff87 	bl	8002c08 <u8g2_font_get_byte>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8002d02:	2109      	movs	r1, #9
 8002d04:	6838      	ldr	r0, [r7, #0]
 8002d06:	f7ff ff7f 	bl	8002c08 <u8g2_font_get_byte>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	b25a      	sxtb	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8002d12:	210a      	movs	r1, #10
 8002d14:	6838      	ldr	r0, [r7, #0]
 8002d16:	f7ff ff77 	bl	8002c08 <u8g2_font_get_byte>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	b25a      	sxtb	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8002d22:	210b      	movs	r1, #11
 8002d24:	6838      	ldr	r0, [r7, #0]
 8002d26:	f7ff ff6f 	bl	8002c08 <u8g2_font_get_byte>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	b25a      	sxtb	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8002d32:	210c      	movs	r1, #12
 8002d34:	6838      	ldr	r0, [r7, #0]
 8002d36:	f7ff ff67 	bl	8002c08 <u8g2_font_get_byte>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	b25a      	sxtb	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8002d42:	210d      	movs	r1, #13
 8002d44:	6838      	ldr	r0, [r7, #0]
 8002d46:	f7ff ff5f 	bl	8002c08 <u8g2_font_get_byte>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	b25a      	sxtb	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8002d52:	210e      	movs	r1, #14
 8002d54:	6838      	ldr	r0, [r7, #0]
 8002d56:	f7ff ff57 	bl	8002c08 <u8g2_font_get_byte>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	b25a      	sxtb	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8002d62:	210f      	movs	r1, #15
 8002d64:	6838      	ldr	r0, [r7, #0]
 8002d66:	f7ff ff4f 	bl	8002c08 <u8g2_font_get_byte>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	b25a      	sxtb	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8002d72:	2110      	movs	r1, #16
 8002d74:	6838      	ldr	r0, [r7, #0]
 8002d76:	f7ff ff47 	bl	8002c08 <u8g2_font_get_byte>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	b25a      	sxtb	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8002d82:	2111      	movs	r1, #17
 8002d84:	6838      	ldr	r0, [r7, #0]
 8002d86:	f7ff ff50 	bl	8002c2a <u8g2_font_get_word>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8002d92:	2113      	movs	r1, #19
 8002d94:	6838      	ldr	r0, [r7, #0]
 8002d96:	f7ff ff48 	bl	8002c2a <u8g2_font_get_word>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8002da2:	2115      	movs	r1, #21
 8002da4:	6838      	ldr	r0, [r7, #0]
 8002da6:	f7ff ff40 	bl	8002c2a <u8g2_font_get_word>
 8002daa:	4603      	mov	r3, r0
 8002dac:	461a      	mov	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	82da      	strh	r2, [r3, #22]
#endif
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b085      	sub	sp, #20
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7b1b      	ldrb	r3, [r3, #12]
 8002dca:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8002dd4:	7bfa      	ldrb	r2, [r7, #15]
 8002dd6:	7b7b      	ldrb	r3, [r7, #13]
 8002dd8:	fa42 f303 	asr.w	r3, r2, r3
 8002ddc:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8002dde:	7b7b      	ldrb	r3, [r7, #13]
 8002de0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8002de2:	7bba      	ldrb	r2, [r7, #14]
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	4413      	add	r3, r2
 8002de8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8002dea:	7bbb      	ldrb	r3, [r7, #14]
 8002dec:	2b07      	cmp	r3, #7
 8002dee:	d91a      	bls.n	8002e26 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8002df0:	2308      	movs	r3, #8
 8002df2:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8002df4:	7b3a      	ldrb	r2, [r7, #12]
 8002df6:	7b7b      	ldrb	r3, [r7, #13]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	7b3b      	ldrb	r3, [r7, #12]
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	b25a      	sxtb	r2, r3
 8002e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	b25b      	sxtb	r3, r3
 8002e1e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8002e20:	7bbb      	ldrb	r3, [r7, #14]
 8002e22:	3b08      	subs	r3, #8
 8002e24:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8002e26:	78fb      	ldrb	r3, [r7, #3]
 8002e28:	f04f 32ff 	mov.w	r2, #4294967295
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	7bba      	ldrb	r2, [r7, #14]
 8002e40:	731a      	strb	r2, [r3, #12]
  return val;
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr

08002e4e <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ffab 	bl	8002dba <u8g2_font_decode_get_unsigned_bits>
 8002e64:	4603      	mov	r3, r0
 8002e66:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8002e72:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	7bbb      	ldrb	r3, [r7, #14]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	73fb      	strb	r3, [r7, #15]
  return v;
 8002e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8002e94:	b490      	push	{r4, r7}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4604      	mov	r4, r0
 8002e9c:	4608      	mov	r0, r1
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4623      	mov	r3, r4
 8002ea4:	80fb      	strh	r3, [r7, #6]
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	717b      	strb	r3, [r7, #5]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	713b      	strb	r3, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d00a      	beq.n	8002ece <u8g2_add_vector_y+0x3a>
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d00f      	beq.n	8002edc <u8g2_add_vector_y+0x48>
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d114      	bne.n	8002eea <u8g2_add_vector_y+0x56>
  {
    case 0:
      dy += y;
 8002ec0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	4413      	add	r3, r2
 8002eca:	80fb      	strh	r3, [r7, #6]
      break;
 8002ecc:	e014      	b.n	8002ef8 <u8g2_add_vector_y+0x64>
    case 1:
      dy += x;
 8002ece:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	80fb      	strh	r3, [r7, #6]
      break;
 8002eda:	e00d      	b.n	8002ef8 <u8g2_add_vector_y+0x64>
    case 2:
      dy -= y;
 8002edc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	88fa      	ldrh	r2, [r7, #6]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	80fb      	strh	r3, [r7, #6]
      break;
 8002ee8:	e006      	b.n	8002ef8 <u8g2_add_vector_y+0x64>
    default:
      dy -= x;
 8002eea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	88fa      	ldrh	r2, [r7, #6]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	80fb      	strh	r3, [r7, #6]
      break;      
 8002ef6:	bf00      	nop
  }
  return dy;
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc90      	pop	{r4, r7}
 8002f02:	4770      	bx	lr

08002f04 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8002f04:	b490      	push	{r4, r7}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	4608      	mov	r0, r1
 8002f0e:	4611      	mov	r1, r2
 8002f10:	461a      	mov	r2, r3
 8002f12:	4623      	mov	r3, r4
 8002f14:	80fb      	strh	r3, [r7, #6]
 8002f16:	4603      	mov	r3, r0
 8002f18:	717b      	strb	r3, [r7, #5]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	713b      	strb	r3, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d00a      	beq.n	8002f3e <u8g2_add_vector_x+0x3a>
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d00f      	beq.n	8002f4c <u8g2_add_vector_x+0x48>
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d114      	bne.n	8002f5a <u8g2_add_vector_x+0x56>
  {
    case 0:
      dx += x;
 8002f30:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	4413      	add	r3, r2
 8002f3a:	80fb      	strh	r3, [r7, #6]
      break;
 8002f3c:	e014      	b.n	8002f68 <u8g2_add_vector_x+0x64>
    case 1:
      dx -= y;
 8002f3e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	88fa      	ldrh	r2, [r7, #6]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	80fb      	strh	r3, [r7, #6]
      break;
 8002f4a:	e00d      	b.n	8002f68 <u8g2_add_vector_x+0x64>
    case 2:
      dx -= x;
 8002f4c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	88fa      	ldrh	r2, [r7, #6]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	80fb      	strh	r3, [r7, #6]
      break;
 8002f58:	e006      	b.n	8002f68 <u8g2_add_vector_x+0x64>
    default:
      dx += y;
 8002f5a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	4413      	add	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
      break;      
 8002f66:	bf00      	nop
  }
  return dx;
 8002f68:	88fb      	ldrh	r3, [r7, #6]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc90      	pop	{r4, r7}
 8002f72:	4770      	bx	lr

08002f74 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	70fb      	strb	r3, [r7, #3]
 8002f80:	4613      	mov	r3, r2
 8002f82:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3360      	adds	r3, #96	; 0x60
 8002f88:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002f94:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002f9c:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002fa4:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	7d7b      	ldrb	r3, [r7, #21]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8002fb2:	7dfa      	ldrb	r2, [r7, #23]
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d201      	bcs.n	8002fbe <u8g2_font_decode_len+0x4a>
      current = cnt;
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
 8002fbc:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	889b      	ldrh	r3, [r3, #4]
 8002fc2:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	88db      	ldrh	r3, [r3, #6]
 8002fc8:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8002fca:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002fce:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	7c1b      	ldrb	r3, [r3, #16]
 8002fd6:	89b8      	ldrh	r0, [r7, #12]
 8002fd8:	f7ff ff94 	bl	8002f04 <u8g2_add_vector_x>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8002fe0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002fe4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	7c1b      	ldrb	r3, [r3, #16]
 8002fec:	8978      	ldrh	r0, [r7, #10]
 8002fee:	f7ff ff51 	bl	8002e94 <u8g2_add_vector_y>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8002ff6:	78bb      	ldrb	r3, [r7, #2]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d010      	beq.n	800301e <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	7b9a      	ldrb	r2, [r3, #14]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8003006:	7dbb      	ldrb	r3, [r7, #22]
 8003008:	b298      	uxth	r0, r3
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	7c1b      	ldrb	r3, [r3, #16]
 800300e:	897a      	ldrh	r2, [r7, #10]
 8003010:	89b9      	ldrh	r1, [r7, #12]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	4603      	mov	r3, r0
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fbfa 	bl	8003810 <u8g2_DrawHVLine>
 800301c:	e013      	b.n	8003046 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	7b5b      	ldrb	r3, [r3, #13]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10f      	bne.n	8003046 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	7bda      	ldrb	r2, [r3, #15]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8003030:	7dbb      	ldrb	r3, [r7, #22]
 8003032:	b298      	uxth	r0, r3
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	7c1b      	ldrb	r3, [r3, #16]
 8003038:	897a      	ldrh	r2, [r7, #10]
 800303a:	89b9      	ldrh	r1, [r7, #12]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	4603      	mov	r3, r0
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fbe5 	bl	8003810 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8003046:	7dfa      	ldrb	r2, [r7, #23]
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	429a      	cmp	r2, r3
 800304c:	d309      	bcc.n	8003062 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 800304e:	7dfa      	ldrb	r2, [r7, #23]
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	757b      	strb	r3, [r7, #21]
    ly++;
 800305a:	7d3b      	ldrb	r3, [r7, #20]
 800305c:	3301      	adds	r3, #1
 800305e:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8003060:	e79d      	b.n	8002f9e <u8g2_font_decode_len+0x2a>
      break;
 8003062:	bf00      	nop
  }
  lx += cnt;
 8003064:	7d7a      	ldrb	r2, [r7, #21]
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	4413      	add	r3, r2
 800306a:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800306c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8003074:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	725a      	strb	r2, [r3, #9]
  
}
 800307c:	bf00      	nop
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3360      	adds	r3, #96	; 0x60
 8003092:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80030a6:	4619      	mov	r1, r3
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f7ff fe86 	bl	8002dba <u8g2_font_decode_get_unsigned_bits>
 80030ae:	4603      	mov	r3, r0
 80030b0:	b25a      	sxtb	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80030bc:	4619      	mov	r1, r3
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f7ff fe7b 	bl	8002dba <u8g2_font_decode_get_unsigned_bits>
 80030c4:	4603      	mov	r3, r0
 80030c6:	b25a      	sxtb	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	7b9b      	ldrb	r3, [r3, #14]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	73da      	strb	r2, [r3, #15]
}
 80030ea:	bf00      	nop
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3360      	adds	r3, #96	; 0x60
 8003102:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8003104:	6839      	ldr	r1, [r7, #0]
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff ffbc 	bl	8003084 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8003112:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800311a:	4619      	mov	r1, r3
 800311c:	6978      	ldr	r0, [r7, #20]
 800311e:	f7ff fe96 	bl	8002e4e <u8g2_font_decode_get_signed_bits>
 8003122:	4603      	mov	r3, r0
 8003124:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800312c:	4619      	mov	r1, r3
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f7ff fe8d 	bl	8002e4e <u8g2_font_decode_get_signed_bits>
 8003134:	4603      	mov	r3, r0
 8003136:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800313e:	4619      	mov	r1, r3
 8003140:	6978      	ldr	r0, [r7, #20]
 8003142:	f7ff fe84 	bl	8002e4e <u8g2_font_decode_get_signed_bits>
 8003146:	4603      	mov	r3, r0
 8003148:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f340 80d7 	ble.w	8003304 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	8898      	ldrh	r0, [r3, #4]
 800315a:	7cfa      	ldrb	r2, [r7, #19]
 800315c:	7c7b      	ldrb	r3, [r7, #17]
 800315e:	4413      	add	r3, r2
 8003160:	b2db      	uxtb	r3, r3
 8003162:	425b      	negs	r3, r3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	b25a      	sxtb	r2, r3
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	7c1b      	ldrb	r3, [r3, #16]
 800316c:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8003170:	f7ff fec8 	bl	8002f04 <u8g2_add_vector_x>
 8003174:	4603      	mov	r3, r0
 8003176:	461a      	mov	r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	88d8      	ldrh	r0, [r3, #6]
 8003180:	7cfa      	ldrb	r2, [r7, #19]
 8003182:	7c7b      	ldrb	r3, [r7, #17]
 8003184:	4413      	add	r3, r2
 8003186:	b2db      	uxtb	r3, r3
 8003188:	425b      	negs	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	b25a      	sxtb	r2, r3
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	7c1b      	ldrb	r3, [r3, #16]
 8003192:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8003196:	f7ff fe7d 	bl	8002e94 <u8g2_add_vector_y>
 800319a:	4603      	mov	r3, r0
 800319c:	461a      	mov	r2, r3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	889b      	ldrh	r3, [r3, #4]
 80031a6:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	88db      	ldrh	r3, [r3, #6]
 80031ac:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80031ae:	8bfb      	ldrh	r3, [r7, #30]
 80031b0:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80031b2:	8b7b      	ldrh	r3, [r7, #26]
 80031b4:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	7c1b      	ldrb	r3, [r3, #16]
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d85a      	bhi.n	8003274 <u8g2_font_decode_glyph+0x180>
 80031be:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <u8g2_font_decode_glyph+0xd0>)
 80031c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c4:	080031d5 	.word	0x080031d5
 80031c8:	080031f1 	.word	0x080031f1
 80031cc:	08003219 	.word	0x08003219
 80031d0:	0800324d 	.word	0x0800324d
      {
	case 0:
	    x1 += decode->glyph_width;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80031da:	b29a      	uxth	r2, r3
 80031dc:	8bbb      	ldrh	r3, [r7, #28]
 80031de:	4413      	add	r3, r2
 80031e0:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80031e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	8b3b      	ldrh	r3, [r7, #24]
 80031ea:	4413      	add	r3, r2
 80031ec:	833b      	strh	r3, [r7, #24]
	    break;
 80031ee:	e041      	b.n	8003274 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80031f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	8bfa      	ldrh	r2, [r7, #30]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80031fc:	8bfb      	ldrh	r3, [r7, #30]
 80031fe:	3301      	adds	r3, #1
 8003200:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8003202:	8bbb      	ldrh	r3, [r7, #28]
 8003204:	3301      	adds	r3, #1
 8003206:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800320e:	b29a      	uxth	r2, r3
 8003210:	8b3b      	ldrh	r3, [r7, #24]
 8003212:	4413      	add	r3, r2
 8003214:	833b      	strh	r3, [r7, #24]
	    break;
 8003216:	e02d      	b.n	8003274 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800321e:	b29b      	uxth	r3, r3
 8003220:	8bfa      	ldrh	r2, [r7, #30]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003226:	8bfb      	ldrh	r3, [r7, #30]
 8003228:	3301      	adds	r3, #1
 800322a:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800322c:	8bbb      	ldrh	r3, [r7, #28]
 800322e:	3301      	adds	r3, #1
 8003230:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8003232:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003236:	b29b      	uxth	r3, r3
 8003238:	8b7a      	ldrh	r2, [r7, #26]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800323e:	8b7b      	ldrh	r3, [r7, #26]
 8003240:	3301      	adds	r3, #1
 8003242:	837b      	strh	r3, [r7, #26]
	    y1++;
 8003244:	8b3b      	ldrh	r3, [r7, #24]
 8003246:	3301      	adds	r3, #1
 8003248:	833b      	strh	r3, [r7, #24]
	    break;	  
 800324a:	e013      	b.n	8003274 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 800324c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003250:	b29a      	uxth	r2, r3
 8003252:	8bbb      	ldrh	r3, [r7, #28]
 8003254:	4413      	add	r3, r2
 8003256:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800325e:	b29b      	uxth	r3, r3
 8003260:	8b7a      	ldrh	r2, [r7, #26]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003266:	8b7b      	ldrh	r3, [r7, #26]
 8003268:	3301      	adds	r3, #1
 800326a:	837b      	strh	r3, [r7, #26]
	    y1++;
 800326c:	8b3b      	ldrh	r3, [r7, #24]
 800326e:	3301      	adds	r3, #1
 8003270:	833b      	strh	r3, [r7, #24]
	    break;	  
 8003272:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8003274:	8bb8      	ldrh	r0, [r7, #28]
 8003276:	8b7a      	ldrh	r2, [r7, #26]
 8003278:	8bf9      	ldrh	r1, [r7, #30]
 800327a:	8b3b      	ldrh	r3, [r7, #24]
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	4603      	mov	r3, r0
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fb83 	bl	800398c <u8g2_IsIntersection>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d102      	bne.n	8003292 <u8g2_font_decode_glyph+0x19e>
	return d;
 800328c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8003290:	e03a      	b.n	8003308 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2200      	movs	r2, #0
 8003296:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2200      	movs	r2, #0
 800329c:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80032a4:	4619      	mov	r1, r3
 80032a6:	6978      	ldr	r0, [r7, #20]
 80032a8:	f7ff fd87 	bl	8002dba <u8g2_font_decode_get_unsigned_bits>
 80032ac:	4603      	mov	r3, r0
 80032ae:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80032b6:	4619      	mov	r1, r3
 80032b8:	6978      	ldr	r0, [r7, #20]
 80032ba:	f7ff fd7e 	bl	8002dba <u8g2_font_decode_get_unsigned_bits>
 80032be:	4603      	mov	r3, r0
 80032c0:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	2200      	movs	r2, #0
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff fe53 	bl	8002f74 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80032ce:	7bbb      	ldrb	r3, [r7, #14]
 80032d0:	2201      	movs	r2, #1
 80032d2:	4619      	mov	r1, r3
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff fe4d 	bl	8002f74 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80032da:	2101      	movs	r1, #1
 80032dc:	6978      	ldr	r0, [r7, #20]
 80032de:	f7ff fd6c 	bl	8002dba <u8g2_font_decode_get_unsigned_bits>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1ec      	bne.n	80032c2 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80032ee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	dd00      	ble.n	80032f8 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80032f6:	e7d2      	b.n	800329e <u8g2_font_decode_glyph+0x1aa>
	break;
 80032f8:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	7b9a      	ldrb	r2, [r3, #14]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8003304:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003320:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	3317      	adds	r3, #23
 8003326:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8003328:	887b      	ldrh	r3, [r7, #2]
 800332a:	2bff      	cmp	r3, #255	; 0xff
 800332c:	d82a      	bhi.n	8003384 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800332e:	887b      	ldrh	r3, [r7, #2]
 8003330:	2b60      	cmp	r3, #96	; 0x60
 8003332:	d907      	bls.n	8003344 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800333a:	461a      	mov	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	4413      	add	r3, r2
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	e009      	b.n	8003358 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8003344:	887b      	ldrh	r3, [r7, #2]
 8003346:	2b40      	cmp	r3, #64	; 0x40
 8003348:	d906      	bls.n	8003358 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003350:	461a      	mov	r2, r3
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	4413      	add	r3, r2
 8003356:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	3301      	adds	r3, #1
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d04e      	beq.n	8003400 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	b29b      	uxth	r3, r3
 8003368:	887a      	ldrh	r2, [r7, #2]
 800336a:	429a      	cmp	r2, r3
 800336c:	d102      	bne.n	8003374 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	3302      	adds	r3, #2
 8003372:	e049      	b.n	8003408 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	3301      	adds	r3, #1
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	4413      	add	r3, r2
 8003380:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003382:	e7e9      	b.n	8003358 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800338a:	461a      	mov	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	4413      	add	r3, r2
 8003390:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8003396:	2100      	movs	r1, #0
 8003398:	6938      	ldr	r0, [r7, #16]
 800339a:	f7ff fc46 	bl	8002c2a <u8g2_font_get_word>
 800339e:	4603      	mov	r3, r0
 80033a0:	461a      	mov	r2, r3
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	4413      	add	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80033a8:	2102      	movs	r1, #2
 80033aa:	6938      	ldr	r0, [r7, #16]
 80033ac:	f7ff fc3d 	bl	8002c2a <u8g2_font_get_word>
 80033b0:	4603      	mov	r3, r0
 80033b2:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	3304      	adds	r3, #4
 80033b8:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80033ba:	89fa      	ldrh	r2, [r7, #14]
 80033bc:	887b      	ldrh	r3, [r7, #2]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d3e9      	bcc.n	8003396 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80033c8:	89fb      	ldrh	r3, [r7, #14]
 80033ca:	021b      	lsls	r3, r3, #8
 80033cc:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	3301      	adds	r3, #1
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	89fb      	ldrh	r3, [r7, #14]
 80033d8:	4313      	orrs	r3, r2
 80033da:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80033dc:	89fb      	ldrh	r3, [r7, #14]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d010      	beq.n	8003404 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80033e2:	89fa      	ldrh	r2, [r7, #14]
 80033e4:	887b      	ldrh	r3, [r7, #2]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d102      	bne.n	80033f0 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	3303      	adds	r3, #3
 80033ee:	e00b      	b.n	8003408 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	3302      	adds	r3, #2
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	4413      	add	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80033fe:	e7e0      	b.n	80033c2 <u8g2_font_get_glyph_data+0xb2>
	break;
 8003400:	bf00      	nop
 8003402:	e000      	b.n	8003406 <u8g2_font_get_glyph_data+0xf6>
	break;
 8003404:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	4608      	mov	r0, r1
 800341a:	4611      	mov	r1, r2
 800341c:	461a      	mov	r2, r3
 800341e:	4603      	mov	r3, r0
 8003420:	817b      	strh	r3, [r7, #10]
 8003422:	460b      	mov	r3, r1
 8003424:	813b      	strh	r3, [r7, #8]
 8003426:	4613      	mov	r3, r2
 8003428:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	897a      	ldrh	r2, [r7, #10]
 8003432:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	893a      	ldrh	r2, [r7, #8]
 800343a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	4619      	mov	r1, r3
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7ff ff64 	bl	8003310 <u8g2_font_get_glyph_data>
 8003448:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8003450:	6939      	ldr	r1, [r7, #16]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f7ff fe4e 	bl	80030f4 <u8g2_font_decode_glyph>
 8003458:	4603      	mov	r3, r0
 800345a:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 800345c:	8afb      	ldrh	r3, [r7, #22]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	4608      	mov	r0, r1
 8003472:	4611      	mov	r1, r2
 8003474:	461a      	mov	r2, r3
 8003476:	4603      	mov	r3, r0
 8003478:	817b      	strh	r3, [r7, #10]
 800347a:	460b      	mov	r3, r1
 800347c:	813b      	strh	r3, [r7, #8]
 800347e:	4613      	mov	r3, r2
 8003480:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003488:	2b03      	cmp	r3, #3
 800348a:	d833      	bhi.n	80034f4 <u8g2_DrawGlyph+0x8c>
 800348c:	a201      	add	r2, pc, #4	; (adr r2, 8003494 <u8g2_DrawGlyph+0x2c>)
 800348e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003492:	bf00      	nop
 8003494:	080034a5 	.word	0x080034a5
 8003498:	080034b9 	.word	0x080034b9
 800349c:	080034cd 	.word	0x080034cd
 80034a0:	080034e1 	.word	0x080034e1
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	4798      	blx	r3
 80034ac:	4603      	mov	r3, r0
 80034ae:	461a      	mov	r2, r3
 80034b0:	893b      	ldrh	r3, [r7, #8]
 80034b2:	4413      	add	r3, r2
 80034b4:	813b      	strh	r3, [r7, #8]
      break;
 80034b6:	e01d      	b.n	80034f4 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	4798      	blx	r3
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	897b      	ldrh	r3, [r7, #10]
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	817b      	strh	r3, [r7, #10]
      break;
 80034ca:	e013      	b.n	80034f4 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	4798      	blx	r3
 80034d4:	4603      	mov	r3, r0
 80034d6:	461a      	mov	r2, r3
 80034d8:	893b      	ldrh	r3, [r7, #8]
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	813b      	strh	r3, [r7, #8]
      break;
 80034de:	e009      	b.n	80034f4 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	4798      	blx	r3
 80034e8:	4603      	mov	r3, r0
 80034ea:	461a      	mov	r2, r3
 80034ec:	897b      	ldrh	r3, [r7, #10]
 80034ee:	4413      	add	r3, r2
 80034f0:	817b      	strh	r3, [r7, #10]
      break;
 80034f2:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	893a      	ldrh	r2, [r7, #8]
 80034f8:	8979      	ldrh	r1, [r7, #10]
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7ff ff88 	bl	8003410 <u8g2_font_draw_glyph>
 8003500:	4603      	mov	r3, r0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop

0800350c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	817b      	strh	r3, [r7, #10]
 800351a:	4613      	mov	r3, r2
 800351c:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 fc5f 	bl	8003de2 <u8x8_utf8_init>
  sum = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	7812      	ldrb	r2, [r2, #0]
 8003530:	4611      	mov	r1, r2
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	4798      	blx	r3
 8003536:	4603      	mov	r3, r0
 8003538:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800353a:	8abb      	ldrh	r3, [r7, #20]
 800353c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003540:	4293      	cmp	r3, r2
 8003542:	d038      	beq.n	80035b6 <u8g2_draw_string+0xaa>
      break;
    str++;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3301      	adds	r3, #1
 8003548:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800354a:	8abb      	ldrh	r3, [r7, #20]
 800354c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003550:	4293      	cmp	r3, r2
 8003552:	d0e9      	beq.n	8003528 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8003554:	8abb      	ldrh	r3, [r7, #20]
 8003556:	893a      	ldrh	r2, [r7, #8]
 8003558:	8979      	ldrh	r1, [r7, #10]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f7ff ff84 	bl	8003468 <u8g2_DrawGlyph>
 8003560:	4603      	mov	r3, r0
 8003562:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800356a:	2b03      	cmp	r3, #3
 800356c:	d81e      	bhi.n	80035ac <u8g2_draw_string+0xa0>
 800356e:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <u8g2_draw_string+0x68>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	08003585 	.word	0x08003585
 8003578:	0800358f 	.word	0x0800358f
 800357c:	08003599 	.word	0x08003599
 8003580:	080035a3 	.word	0x080035a3
      {
	case 0:
	  x += delta;
 8003584:	897a      	ldrh	r2, [r7, #10]
 8003586:	8a7b      	ldrh	r3, [r7, #18]
 8003588:	4413      	add	r3, r2
 800358a:	817b      	strh	r3, [r7, #10]
	  break;
 800358c:	e00e      	b.n	80035ac <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800358e:	893a      	ldrh	r2, [r7, #8]
 8003590:	8a7b      	ldrh	r3, [r7, #18]
 8003592:	4413      	add	r3, r2
 8003594:	813b      	strh	r3, [r7, #8]
	  break;
 8003596:	e009      	b.n	80035ac <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8003598:	897a      	ldrh	r2, [r7, #10]
 800359a:	8a7b      	ldrh	r3, [r7, #18]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	817b      	strh	r3, [r7, #10]
	  break;
 80035a0:	e004      	b.n	80035ac <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80035a2:	893a      	ldrh	r2, [r7, #8]
 80035a4:	8a7b      	ldrh	r3, [r7, #18]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	813b      	strh	r3, [r7, #8]
	  break;
 80035aa:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 80035ac:	8afa      	ldrh	r2, [r7, #22]
 80035ae:	8a7b      	ldrh	r3, [r7, #18]
 80035b0:	4413      	add	r3, r2
 80035b2:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80035b4:	e7b8      	b.n	8003528 <u8g2_draw_string+0x1c>
      break;
 80035b6:	bf00      	nop
    }
  }
  return sum;
 80035b8:	8afb      	ldrh	r3, [r7, #22]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop

080035c4 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	460b      	mov	r3, r1
 80035d0:	817b      	strh	r3, [r7, #10]
 80035d2:	4613      	mov	r3, r2
 80035d4:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4a06      	ldr	r2, [pc, #24]	; (80035f4 <u8g2_DrawStr+0x30>)
 80035da:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80035dc:	893a      	ldrh	r2, [r7, #8]
 80035de:	8979      	ldrh	r1, [r7, #10]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f7ff ff92 	bl	800350c <u8g2_draw_string>
 80035e8:	4603      	mov	r3, r0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	08003dfd 	.word	0x08003dfd

080035f8 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	2b00      	cmp	r3, #0
 8003606:	d05d      	beq.n	80036c4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003626:	2b00      	cmp	r3, #0
 8003628:	d04d      	beq.n	80036c6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003630:	2b01      	cmp	r3, #1
 8003632:	d11c      	bne.n	800366e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8003640:	429a      	cmp	r2, r3
 8003642:	da05      	bge.n	8003650 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 800365c:	429a      	cmp	r2, r3
 800365e:	dd32      	ble.n	80036c6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800366c:	e02b      	b.n	80036c6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8003674:	461a      	mov	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800367c:	4619      	mov	r1, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003684:	440b      	add	r3, r1
 8003686:	429a      	cmp	r2, r3
 8003688:	da0d      	bge.n	80036a6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8003690:	b2da      	uxtb	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003698:	b2db      	uxtb	r3, r3
 800369a:	4413      	add	r3, r2
 800369c:	b2db      	uxtb	r3, r3
 800369e:	b25a      	sxtb	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80036b2:	429a      	cmp	r2, r3
 80036b4:	dd07      	ble.n	80036c6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80036c2:	e000      	b.n	80036c6 <u8g2_UpdateRefHeight+0xce>
    return;
 80036c4:	bf00      	nop
  }  
}
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  return 0;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
	...

080036e4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a03      	ldr	r2, [pc, #12]	; (80036fc <u8g2_SetFontPosBaseline+0x18>)
 80036f0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	080036cf 	.word	0x080036cf

08003700 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d00b      	beq.n	800372c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3374      	adds	r3, #116	; 0x74
 800371e:	6839      	ldr	r1, [r7, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff faa1 	bl	8002c68 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ff66 	bl	80035f8 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	4611      	mov	r1, r2
 8003740:	461a      	mov	r2, r3
 8003742:	460b      	mov	r3, r1
 8003744:	80fb      	strh	r3, [r7, #6]
 8003746:	4613      	mov	r3, r2
 8003748:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8003750:	8afb      	ldrh	r3, [r7, #22]
 8003752:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	881a      	ldrh	r2, [r3, #0]
 8003758:	8abb      	ldrh	r3, [r7, #20]
 800375a:	4413      	add	r3, r2
 800375c:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800375e:	8afa      	ldrh	r2, [r7, #22]
 8003760:	8abb      	ldrh	r3, [r7, #20]
 8003762:	429a      	cmp	r2, r3
 8003764:	d90b      	bls.n	800377e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8003766:	8afa      	ldrh	r2, [r7, #22]
 8003768:	88bb      	ldrh	r3, [r7, #4]
 800376a:	429a      	cmp	r2, r3
 800376c:	d205      	bcs.n	800377a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800376e:	88bb      	ldrh	r3, [r7, #4]
 8003770:	82bb      	strh	r3, [r7, #20]
      b--;
 8003772:	8abb      	ldrh	r3, [r7, #20]
 8003774:	3b01      	subs	r3, #1
 8003776:	82bb      	strh	r3, [r7, #20]
 8003778:	e001      	b.n	800377e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800377e:	8afa      	ldrh	r2, [r7, #22]
 8003780:	88bb      	ldrh	r3, [r7, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	d301      	bcc.n	800378a <u8g2_clip_intersection2+0x56>
    return 0;
 8003786:	2300      	movs	r3, #0
 8003788:	e01c      	b.n	80037c4 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800378a:	8aba      	ldrh	r2, [r7, #20]
 800378c:	88fb      	ldrh	r3, [r7, #6]
 800378e:	429a      	cmp	r2, r3
 8003790:	d801      	bhi.n	8003796 <u8g2_clip_intersection2+0x62>
    return 0;
 8003792:	2300      	movs	r3, #0
 8003794:	e016      	b.n	80037c4 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8003796:	8afa      	ldrh	r2, [r7, #22]
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	429a      	cmp	r2, r3
 800379c:	d201      	bcs.n	80037a2 <u8g2_clip_intersection2+0x6e>
    a = c;
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80037a2:	8aba      	ldrh	r2, [r7, #20]
 80037a4:	88bb      	ldrh	r3, [r7, #4]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d901      	bls.n	80037ae <u8g2_clip_intersection2+0x7a>
    b = d;
 80037aa:	88bb      	ldrh	r3, [r7, #4]
 80037ac:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8afa      	ldrh	r2, [r7, #22]
 80037b2:	801a      	strh	r2, [r3, #0]
  b -= a;
 80037b4:	8aba      	ldrh	r2, [r7, #20]
 80037b6:	8afb      	ldrh	r3, [r7, #22]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	8aba      	ldrh	r2, [r7, #20]
 80037c0:	801a      	strh	r2, [r3, #0]
  return 1;
 80037c2:	2301      	movs	r3, #1
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr

080037ce <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80037ce:	b590      	push	{r4, r7, lr}
 80037d0:	b087      	sub	sp, #28
 80037d2:	af02      	add	r7, sp, #8
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	4608      	mov	r0, r1
 80037d8:	4611      	mov	r1, r2
 80037da:	461a      	mov	r2, r3
 80037dc:	4603      	mov	r3, r0
 80037de:	817b      	strh	r3, [r7, #10]
 80037e0:	460b      	mov	r3, r1
 80037e2:	813b      	strh	r3, [r7, #8]
 80037e4:	4613      	mov	r3, r2
 80037e6:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ec:	893a      	ldrh	r2, [r7, #8]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80037f6:	88f8      	ldrh	r0, [r7, #6]
 80037f8:	893a      	ldrh	r2, [r7, #8]
 80037fa:	8979      	ldrh	r1, [r7, #10]
 80037fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	4603      	mov	r3, r0
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	47a0      	blx	r4
}
 8003808:	bf00      	nop
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	bd90      	pop	{r4, r7, pc}

08003810 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b087      	sub	sp, #28
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	4608      	mov	r0, r1
 800381a:	4611      	mov	r1, r2
 800381c:	461a      	mov	r2, r3
 800381e:	4603      	mov	r3, r0
 8003820:	817b      	strh	r3, [r7, #10]
 8003822:	460b      	mov	r3, r1
 8003824:	813b      	strh	r3, [r7, #8]
 8003826:	4613      	mov	r3, r2
 8003828:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d075      	beq.n	8003920 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d072      	beq.n	8003920 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d91a      	bls.n	8003876 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8003840:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d109      	bne.n	800385c <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8003848:	897a      	ldrh	r2, [r7, #10]
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	b29b      	uxth	r3, r3
 8003850:	817b      	strh	r3, [r7, #10]
	  x++;
 8003852:	897b      	ldrh	r3, [r7, #10]
 8003854:	3301      	adds	r3, #1
 8003856:	b29b      	uxth	r3, r3
 8003858:	817b      	strh	r3, [r7, #10]
 800385a:	e00c      	b.n	8003876 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 800385c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003860:	2b03      	cmp	r3, #3
 8003862:	d108      	bne.n	8003876 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8003864:	893a      	ldrh	r2, [r7, #8]
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	b29b      	uxth	r3, r3
 800386c:	813b      	strh	r3, [r7, #8]
	  y++;
 800386e:	893b      	ldrh	r3, [r7, #8]
 8003870:	3301      	adds	r3, #1
 8003872:	b29b      	uxth	r3, r3
 8003874:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8003876:	f897 3020 	ldrb.w	r3, [r7, #32]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8003882:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d11a      	bne.n	80038c0 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003890:	893b      	ldrh	r3, [r7, #8]
 8003892:	429a      	cmp	r2, r3
 8003894:	d83b      	bhi.n	800390e <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800389c:	893b      	ldrh	r3, [r7, #8]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d937      	bls.n	8003912 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80038ae:	1db9      	adds	r1, r7, #6
 80038b0:	f107 000a 	add.w	r0, r7, #10
 80038b4:	f7ff ff3e 	bl	8003734 <u8g2_clip_intersection2>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d11a      	bne.n	80038f4 <u8g2_DrawHVLine+0xe4>
	  return;
 80038be:	e02f      	b.n	8003920 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80038c6:	897b      	ldrh	r3, [r7, #10]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d824      	bhi.n	8003916 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80038d2:	897b      	ldrh	r3, [r7, #10]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d920      	bls.n	800391a <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80038e4:	1db9      	adds	r1, r7, #6
 80038e6:	f107 0008 	add.w	r0, r7, #8
 80038ea:	f7ff ff23 	bl	8003734 <u8g2_clip_intersection2>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d014      	beq.n	800391e <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	689c      	ldr	r4, [r3, #8]
 80038fa:	8979      	ldrh	r1, [r7, #10]
 80038fc:	893a      	ldrh	r2, [r7, #8]
 80038fe:	88f8      	ldrh	r0, [r7, #6]
 8003900:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	4603      	mov	r3, r0
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	47a0      	blx	r4
 800390c:	e008      	b.n	8003920 <u8g2_DrawHVLine+0x110>
	  return;
 800390e:	bf00      	nop
 8003910:	e006      	b.n	8003920 <u8g2_DrawHVLine+0x110>
	  return;
 8003912:	bf00      	nop
 8003914:	e004      	b.n	8003920 <u8g2_DrawHVLine+0x110>
	  return;
 8003916:	bf00      	nop
 8003918:	e002      	b.n	8003920 <u8g2_DrawHVLine+0x110>
	  return;
 800391a:	bf00      	nop
 800391c:	e000      	b.n	8003920 <u8g2_DrawHVLine+0x110>
	  return;
 800391e:	bf00      	nop
    }
}
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	bd90      	pop	{r4, r7, pc}

08003926 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8003926:	b490      	push	{r4, r7}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	4604      	mov	r4, r0
 800392e:	4608      	mov	r0, r1
 8003930:	4611      	mov	r1, r2
 8003932:	461a      	mov	r2, r3
 8003934:	4623      	mov	r3, r4
 8003936:	80fb      	strh	r3, [r7, #6]
 8003938:	4603      	mov	r3, r0
 800393a:	80bb      	strh	r3, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	807b      	strh	r3, [r7, #2]
 8003940:	4613      	mov	r3, r2
 8003942:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8003944:	887a      	ldrh	r2, [r7, #2]
 8003946:	88bb      	ldrh	r3, [r7, #4]
 8003948:	429a      	cmp	r2, r3
 800394a:	d20d      	bcs.n	8003968 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800394c:	883a      	ldrh	r2, [r7, #0]
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	429a      	cmp	r2, r3
 8003952:	d901      	bls.n	8003958 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8003954:	2301      	movs	r3, #1
 8003956:	e014      	b.n	8003982 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8003958:	887a      	ldrh	r2, [r7, #2]
 800395a:	883b      	ldrh	r3, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d901      	bls.n	8003964 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8003960:	2301      	movs	r3, #1
 8003962:	e00e      	b.n	8003982 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003964:	2300      	movs	r3, #0
 8003966:	e00c      	b.n	8003982 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8003968:	883a      	ldrh	r2, [r7, #0]
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	429a      	cmp	r2, r3
 800396e:	d907      	bls.n	8003980 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8003970:	887a      	ldrh	r2, [r7, #2]
 8003972:	883b      	ldrh	r3, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d901      	bls.n	800397c <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8003978:	2301      	movs	r3, #1
 800397a:	e002      	b.n	8003982 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8003980:	2300      	movs	r3, #0
    }
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bc90      	pop	{r4, r7}
 800398a:	4770      	bx	lr

0800398c <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	4608      	mov	r0, r1
 8003996:	4611      	mov	r1, r2
 8003998:	461a      	mov	r2, r3
 800399a:	4603      	mov	r3, r0
 800399c:	817b      	strh	r3, [r7, #10]
 800399e:	460b      	mov	r3, r1
 80039a0:	813b      	strh	r3, [r7, #8]
 80039a2:	4613      	mov	r3, r2
 80039a4:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 80039b2:	8b3b      	ldrh	r3, [r7, #24]
 80039b4:	893a      	ldrh	r2, [r7, #8]
 80039b6:	f7ff ffb6 	bl	8003926 <u8g2_is_intersection_decision_tree>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <u8g2_IsIntersection+0x38>
    return 0; 
 80039c0:	2300      	movs	r3, #0
 80039c2:	e00a      	b.n	80039da <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	897a      	ldrh	r2, [r7, #10]
 80039d4:	f7ff ffa7 	bl	8003926 <u8g2_is_intersection_decision_tree>
 80039d8:	4603      	mov	r3, r0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b089      	sub	sp, #36	; 0x24
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	4608      	mov	r0, r1
 80039ec:	4611      	mov	r1, r2
 80039ee:	461a      	mov	r2, r3
 80039f0:	4603      	mov	r3, r0
 80039f2:	817b      	strh	r3, [r7, #10]
 80039f4:	460b      	mov	r3, r1
 80039f6:	813b      	strh	r3, [r7, #8]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80039fc:	893b      	ldrh	r3, [r7, #8]
 80039fe:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8003a00:	7efb      	ldrb	r3, [r7, #27]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8003a0c:	7e3a      	ldrb	r2, [r7, #24]
 8003a0e:	7efb      	ldrb	r3, [r7, #27]
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d801      	bhi.n	8003a2c <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8003a28:	7e3b      	ldrb	r3, [r7, #24]
 8003a2a:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d001      	beq.n	8003a3a <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8003a36:	7e3b      	ldrb	r3, [r7, #24]
 8003a38:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8003a3a:	893b      	ldrh	r3, [r7, #8]
 8003a3c:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8003a3e:	8afb      	ldrh	r3, [r7, #22]
 8003a40:	f023 0307 	bic.w	r3, r3, #7
 8003a44:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	7c1b      	ldrb	r3, [r3, #16]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	8afa      	ldrh	r2, [r7, #22]
 8003a50:	fb02 f303 	mul.w	r3, r2, r3
 8003a54:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5a:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8003a5c:	8afb      	ldrh	r3, [r7, #22]
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	4413      	add	r3, r2
 8003a62:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8003a64:	897b      	ldrh	r3, [r7, #10]
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	4413      	add	r3, r2
 8003a6a:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8003a6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d117      	bne.n	8003aa4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	781a      	ldrb	r2, [r3, #0]
 8003a78:	7ebb      	ldrb	r3, [r7, #26]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	781a      	ldrb	r2, [r3, #0]
 8003a86:	7e7b      	ldrb	r3, [r7, #25]
 8003a88:	4053      	eors	r3, r2
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	701a      	strb	r2, [r3, #0]
	ptr++;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	3301      	adds	r3, #1
 8003a94:	61fb      	str	r3, [r7, #28]
	len--;
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e8      	bne.n	8003a74 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8003aa2:	e038      	b.n	8003b16 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	781a      	ldrb	r2, [r3, #0]
 8003aa8:	7ebb      	ldrb	r3, [r7, #26]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	781a      	ldrb	r2, [r3, #0]
 8003ab6:	7e7b      	ldrb	r3, [r7, #25]
 8003ab8:	4053      	eors	r3, r2
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8003ac0:	7efb      	ldrb	r3, [r7, #27]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8003ac6:	7efb      	ldrb	r3, [r7, #27]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	76fb      	strb	r3, [r7, #27]
      len--;
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8003ad4:	7efb      	ldrb	r3, [r7, #27]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d114      	bne.n	8003b04 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003ade:	461a      	mov	r2, r3
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d801      	bhi.n	8003af4 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8003af0:	2301      	movs	r3, #1
 8003af2:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d008      	beq.n	8003b10 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8003afe:	2301      	movs	r3, #1
 8003b00:	767b      	strb	r3, [r7, #25]
 8003b02:	e005      	b.n	8003b10 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8003b04:	7ebb      	ldrb	r3, [r7, #26]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8003b0a:	7e7b      	ldrb	r3, [r7, #25]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1c6      	bne.n	8003aa4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8003b16:	bf00      	nop
 8003b18:	3724      	adds	r7, #36	; 0x24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	4798      	blx	r3
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	79fa      	ldrb	r2, [r7, #7]
 8003b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f7ff ffad 	bl	8003b20 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f7ff fd8c 	bl	80036e4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bf0:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003bf2:	89fb      	ldrh	r3, [r7, #14]
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	89fa      	ldrh	r2, [r7, #14]
 8003bfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	7c1b      	ldrb	r3, [r3, #16]
 8003c02:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8003c04:	89fb      	ldrh	r3, [r7, #14]
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	89fa      	ldrh	r2, [r7, #14]
 8003c0e:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c16:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003c18:	89fb      	ldrh	r3, [r7, #14]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	89fa      	ldrh	r2, [r7, #14]
 8003c22:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c2a:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8003c2c:	89fb      	ldrh	r3, [r7, #14]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8003c34:	4413      	add	r3, r2
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	7c52      	ldrb	r2, [r2, #17]
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	dd08      	ble.n	8003c50 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	7c5b      	ldrb	r3, [r3, #17]
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003c50:	89fb      	ldrh	r3, [r7, #14]
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003c72:	89fb      	ldrh	r3, [r7, #14]
 8003c74:	4413      	add	r3, r2
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	8a9a      	ldrh	r2, [r3, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	8ada      	ldrh	r2, [r3, #22]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fe63 	bl	800398c <u8g2_IsIntersection>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d104      	bne.n	8003cd6 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8003cd4:	e03b      	b.n	8003d4e <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d205      	bcs.n	8003cfa <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d905      	bls.n	8003d16 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d205      	bcs.n	8003d32 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d905      	bls.n	8003d4e <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff ff3c 	bl	8003bdc <u8g2_update_dimension_common>
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff ff7b 	bl	8003c9c <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b086      	sub	sp, #24
 8003db2:	af02      	add	r7, sp, #8
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	4608      	mov	r0, r1
 8003db8:	4611      	mov	r1, r2
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	817b      	strh	r3, [r7, #10]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	813b      	strh	r3, [r7, #8]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8003dc8:	88f8      	ldrh	r0, [r7, #6]
 8003dca:	893a      	ldrh	r2, [r7, #8]
 8003dcc:	8979      	ldrh	r1, [r7, #10]
 8003dce:	7e3b      	ldrb	r3, [r7, #24]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f7ff fcfa 	bl	80037ce <u8g2_draw_hv_line_2dir>
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr

08003dfc <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <u8x8_ascii_next+0x18>
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	2b0a      	cmp	r3, #10
 8003e12:	d102      	bne.n	8003e1a <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8003e14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e18:	e001      	b.n	8003e1e <u8x8_ascii_next+0x22>
  return b;
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	b29b      	uxth	r3, r3
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	460b      	mov	r3, r1
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	691c      	ldr	r4, [r3, #16]
 8003e3a:	7afa      	ldrb	r2, [r7, #11]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2117      	movs	r1, #23
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	47a0      	blx	r4
 8003e44:	4603      	mov	r3, r0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd90      	pop	{r4, r7, pc}

08003e4e <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	460b      	mov	r3, r1
 8003e58:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003e5a:	1cfb      	adds	r3, r7, #3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	2101      	movs	r1, #1
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff ffe1 	bl	8003e28 <u8x8_byte_SendBytes>
 8003e66:	4603      	mov	r3, r0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691c      	ldr	r4, [r3, #16]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2118      	movs	r1, #24
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	47a0      	blx	r4
 8003e86:	4603      	mov	r3, r0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd90      	pop	{r4, r7, pc}

08003e90 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8003e90:	b590      	push	{r4, r7, lr}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691c      	ldr	r4, [r3, #16]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2119      	movs	r1, #25
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	47a0      	blx	r4
 8003ea6:	4603      	mov	r3, r0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd90      	pop	{r4, r7, pc}

08003eb0 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8003eb0:	b590      	push	{r4, r7, lr}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68dc      	ldr	r4, [r3, #12]
 8003ec0:	78fa      	ldrb	r2, [r7, #3]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2115      	movs	r1, #21
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	47a0      	blx	r4
 8003eca:	4603      	mov	r3, r0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd90      	pop	{r4, r7, pc}

08003ed4 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68dc      	ldr	r4, [r3, #12]
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	2116      	movs	r1, #22
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	47a0      	blx	r4
 8003eee:	4603      	mov	r3, r0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd90      	pop	{r4, r7, pc}

08003ef8 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003ef8:	b590      	push	{r4, r7, lr}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	460b      	mov	r3, r1
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	68dc      	ldr	r4, [r3, #12]
 8003f0a:	7afa      	ldrb	r2, [r7, #11]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2117      	movs	r1, #23
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	47a0      	blx	r4
 8003f14:	4603      	mov	r3, r0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd90      	pop	{r4, r7, pc}

08003f1e <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8003f1e:	b590      	push	{r4, r7, lr}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68dc      	ldr	r4, [r3, #12]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2118      	movs	r1, #24
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	47a0      	blx	r4
 8003f34:	4603      	mov	r3, r0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd90      	pop	{r4, r7, pc}

08003f3e <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8003f3e:	b590      	push	{r4, r7, lr}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68dc      	ldr	r4, [r3, #12]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2119      	movs	r1, #25
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	47a0      	blx	r4
 8003f54:	4603      	mov	r3, r0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd90      	pop	{r4, r7, pc}

08003f5e <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003f5e:	b590      	push	{r4, r7, lr}
 8003f60:	b085      	sub	sp, #20
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	73fb      	strb	r3, [r7, #15]
    data++;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	3301      	adds	r3, #1
 8003f72:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	2b17      	cmp	r3, #23
 8003f78:	d017      	beq.n	8003faa <u8x8_cad_SendSequence+0x4c>
 8003f7a:	2b17      	cmp	r3, #23
 8003f7c:	dc02      	bgt.n	8003f84 <u8x8_cad_SendSequence+0x26>
 8003f7e:	2b15      	cmp	r3, #21
 8003f80:	db37      	blt.n	8003ff2 <u8x8_cad_SendSequence+0x94>
 8003f82:	e004      	b.n	8003f8e <u8x8_cad_SendSequence+0x30>
 8003f84:	2b19      	cmp	r3, #25
 8003f86:	dd1e      	ble.n	8003fc6 <u8x8_cad_SendSequence+0x68>
 8003f88:	2bfe      	cmp	r3, #254	; 0xfe
 8003f8a:	d024      	beq.n	8003fd6 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8003f8c:	e031      	b.n	8003ff2 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68dc      	ldr	r4, [r3, #12]
 8003f98:	7bba      	ldrb	r2, [r7, #14]
 8003f9a:	7bf9      	ldrb	r1, [r7, #15]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	47a0      	blx	r4
	  data++;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	603b      	str	r3, [r7, #0]
	  break;
 8003fa8:	e022      	b.n	8003ff0 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003fb0:	f107 030e 	add.w	r3, r7, #14
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff ff9d 	bl	8003ef8 <u8x8_cad_SendData>
	  data++;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	603b      	str	r3, [r7, #0]
	  break;
 8003fc4:	e014      	b.n	8003ff0 <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68dc      	ldr	r4, [r3, #12]
 8003fca:	7bf9      	ldrb	r1, [r7, #15]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	2200      	movs	r2, #0
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	47a0      	blx	r4
	  break;
 8003fd4:	e00c      	b.n	8003ff0 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003fdc:	7bbb      	ldrb	r3, [r7, #14]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2129      	movs	r1, #41	; 0x29
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fa36 	bl	8004454 <u8x8_gpio_call>
	  data++;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	3301      	adds	r3, #1
 8003fec:	603b      	str	r3, [r7, #0]
	  break;
 8003fee:	bf00      	nop
    cmd = *data;
 8003ff0:	e7ba      	b.n	8003f68 <u8x8_cad_SendSequence+0xa>
	return;
 8003ff2:	bf00      	nop
    }
  }
}
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd90      	pop	{r4, r7, pc}

08003ffa <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8003ffa:	b590      	push	{r4, r7, lr}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	460b      	mov	r3, r1
 8004004:	607a      	str	r2, [r7, #4]
 8004006:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f7ff ff31 	bl	8003e70 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 800400e:	2140      	movs	r1, #64	; 0x40
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f7ff ff1c 	bl	8003e4e <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	691c      	ldr	r4, [r3, #16]
 800401a:	7afa      	ldrb	r2, [r7, #11]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2117      	movs	r1, #23
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f7ff ff33 	bl	8003e90 <u8x8_byte_EndTransfer>
}
 800402a:	bf00      	nop
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	bd90      	pop	{r4, r7, pc}
	...

08004034 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004034:	b590      	push	{r4, r7, lr}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	607b      	str	r3, [r7, #4]
 800403e:	460b      	mov	r3, r1
 8004040:	72fb      	strb	r3, [r7, #11]
 8004042:	4613      	mov	r3, r2
 8004044:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8004046:	7afb      	ldrb	r3, [r7, #11]
 8004048:	3b14      	subs	r3, #20
 800404a:	2b05      	cmp	r3, #5
 800404c:	d86e      	bhi.n	800412c <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 800404e:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8004050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004054:	080040eb 	.word	0x080040eb
 8004058:	0800406d 	.word	0x0800406d
 800405c:	0800409b 	.word	0x0800409b
 8004060:	080040a7 	.word	0x080040a7
 8004064:	0800410f 	.word	0x0800410f
 8004068:	08004117 	.word	0x08004117
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 800406c:	4b33      	ldr	r3, [pc, #204]	; (800413c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f7ff ff0b 	bl	8003e90 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f7ff fef8 	bl	8003e70 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8004080:	2100      	movs	r1, #0
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7ff fee3 	bl	8003e4e <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004088:	7abb      	ldrb	r3, [r7, #10]
 800408a:	4619      	mov	r1, r3
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f7ff fede 	bl	8003e4e <u8x8_byte_SendByte>
      in_transfer = 1;
 8004092:	4b2a      	ldr	r3, [pc, #168]	; (800413c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004094:	2201      	movs	r2, #1
 8004096:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8004098:	e04a      	b.n	8004130 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 800409a:	7abb      	ldrb	r3, [r7, #10]
 800409c:	4619      	mov	r1, r3
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f7ff fed5 	bl	8003e4e <u8x8_byte_SendByte>
      break;      
 80040a4:	e044      	b.n	8004130 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 80040a6:	4b25      	ldr	r3, [pc, #148]	; (800413c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f7ff feee 	bl	8003e90 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80040b8:	e00a      	b.n	80040d0 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	2118      	movs	r1, #24
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f7ff ff9b 	bl	8003ffa <u8x8_i2c_data_transfer>
	arg_int-=24;
 80040c4:	7abb      	ldrb	r3, [r7, #10]
 80040c6:	3b18      	subs	r3, #24
 80040c8:	72bb      	strb	r3, [r7, #10]
	p+=24;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	3318      	adds	r3, #24
 80040ce:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80040d0:	7abb      	ldrb	r3, [r7, #10]
 80040d2:	2b18      	cmp	r3, #24
 80040d4:	d8f1      	bhi.n	80040ba <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 80040d6:	7abb      	ldrb	r3, [r7, #10]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4619      	mov	r1, r3
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f7ff ff8c 	bl	8003ffa <u8x8_i2c_data_transfer>
      in_transfer = 0;
 80040e2:	4b16      	ldr	r3, [pc, #88]	; (800413c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]
      break;
 80040e8:	e022      	b.n	8004130 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040f0:	2bff      	cmp	r3, #255	; 0xff
 80040f2:	d103      	bne.n	80040fc <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2278      	movs	r2, #120	; 0x78
 80040f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	691c      	ldr	r4, [r3, #16]
 8004100:	7aba      	ldrb	r2, [r7, #10]
 8004102:	7af9      	ldrb	r1, [r7, #11]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	47a0      	blx	r4
 800410a:	4603      	mov	r3, r0
 800410c:	e011      	b.n	8004132 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 800410e:	4b0b      	ldr	r3, [pc, #44]	; (800413c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
      break;
 8004114:	e00c      	b.n	8004130 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8004116:	4b09      	ldr	r3, [pc, #36]	; (800413c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f7ff feb6 	bl	8003e90 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]
      break;
 800412a:	e001      	b.n	8004130 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 800412c:	2300      	movs	r3, #0
 800412e:	e000      	b.n	8004132 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8004130:	2301      	movs	r3, #1
}
 8004132:	4618      	mov	r0, r3
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	bd90      	pop	{r4, r7, pc}
 800413a:	bf00      	nop
 800413c:	2000057c 	.word	0x2000057c

08004140 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	460b      	mov	r3, r1
 800414c:	72fb      	strb	r3, [r7, #11]
 800414e:	4613      	mov	r3, r2
 8004150:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8004152:	7afb      	ldrb	r3, [r7, #11]
 8004154:	3b0b      	subs	r3, #11
 8004156:	2b04      	cmp	r3, #4
 8004158:	f200 808a 	bhi.w	8004270 <u8x8_d_ssd1306_sh1106_generic+0x130>
 800415c:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800415e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004162:	bf00      	nop
 8004164:	08004179 	.word	0x08004179
 8004168:	08004271 	.word	0x08004271
 800416c:	08004193 	.word	0x08004193
 8004170:	080041c5 	.word	0x080041c5
 8004174:	080041e5 	.word	0x080041e5
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8004178:	7abb      	ldrb	r3, [r7, #10]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d104      	bne.n	8004188 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800417e:	4940      	ldr	r1, [pc, #256]	; (8004280 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f7ff feec 	bl	8003f5e <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8004186:	e075      	b.n	8004274 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8004188:	493e      	ldr	r1, [pc, #248]	; (8004284 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f7ff fee7 	bl	8003f5e <u8x8_cad_SendSequence>
      break;
 8004190:	e070      	b.n	8004274 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8004192:	7abb      	ldrb	r3, [r7, #10]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10a      	bne.n	80041ae <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8004198:	493b      	ldr	r1, [pc, #236]	; (8004288 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f7ff fedf 	bl	8003f5e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	7c9a      	ldrb	r2, [r3, #18]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80041ac:	e062      	b.n	8004274 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80041ae:	4937      	ldr	r1, [pc, #220]	; (800428c <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f7ff fed4 	bl	8003f5e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	7cda      	ldrb	r2, [r3, #19]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80041c2:	e057      	b.n	8004274 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f7ff feaa 	bl	8003f1e <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80041ca:	2181      	movs	r1, #129	; 0x81
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f7ff fe6f 	bl	8003eb0 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80041d2:	7abb      	ldrb	r3, [r7, #10]
 80041d4:	4619      	mov	r1, r3
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f7ff fe7c 	bl	8003ed4 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7ff feae 	bl	8003f3e <u8x8_cad_EndTransfer>
      break;
 80041e2:	e047      	b.n	8004274 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7ff fe9a 	bl	8003f1e <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	795b      	ldrb	r3, [r3, #5]
 80041ee:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
 80041fe:	4413      	add	r3, r2
 8004200:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8004202:	2140      	movs	r1, #64	; 0x40
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f7ff fe53 	bl	8003eb0 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800420a:	7dfb      	ldrb	r3, [r7, #23]
 800420c:	091b      	lsrs	r3, r3, #4
 800420e:	b2db      	uxtb	r3, r3
 8004210:	f043 0310 	orr.w	r3, r3, #16
 8004214:	b2db      	uxtb	r3, r3
 8004216:	4619      	mov	r1, r3
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f7ff fe49 	bl	8003eb0 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800421e:	7dfb      	ldrb	r3, [r7, #23]
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	b2db      	uxtb	r3, r3
 8004226:	4619      	mov	r1, r3
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff fe53 	bl	8003ed4 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	799b      	ldrb	r3, [r3, #6]
 8004232:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8004236:	b2db      	uxtb	r3, r3
 8004238:	4619      	mov	r1, r3
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f7ff fe4a 	bl	8003ed4 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	791b      	ldrb	r3, [r3, #4]
 8004244:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800424c:	7dbb      	ldrb	r3, [r7, #22]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	b2db      	uxtb	r3, r3
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4619      	mov	r1, r3
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f7ff fe4e 	bl	8003ef8 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800425c:	7abb      	ldrb	r3, [r7, #10]
 800425e:	3b01      	subs	r3, #1
 8004260:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8004262:	7abb      	ldrb	r3, [r7, #10]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1eb      	bne.n	8004240 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff fe68 	bl	8003f3e <u8x8_cad_EndTransfer>
      break;
 800426e:	e001      	b.n	8004274 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8004274:	2301      	movs	r3, #1
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	0800eb04 	.word	0x0800eb04
 8004284:	0800eb0c 	.word	0x0800eb0c
 8004288:	0800eb14 	.word	0x0800eb14
 800428c:	0800eb1c 	.word	0x0800eb1c

08004290 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	460b      	mov	r3, r1
 800429c:	72fb      	strb	r3, [r7, #11]
 800429e:	4613      	mov	r3, r2
 80042a0:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80042a2:	7aba      	ldrb	r2, [r7, #10]
 80042a4:	7af9      	ldrb	r1, [r7, #11]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7ff ff49 	bl	8004140 <u8x8_d_ssd1306_sh1106_generic>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e014      	b.n	80042e2 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 80042b8:	7afb      	ldrb	r3, [r7, #11]
 80042ba:	2b09      	cmp	r3, #9
 80042bc:	d009      	beq.n	80042d2 <u8x8_d_ssd1306_128x64_noname+0x42>
 80042be:	2b0a      	cmp	r3, #10
 80042c0:	d10c      	bne.n	80042dc <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f829 	bl	800431a <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 80042c8:	4908      	ldr	r1, [pc, #32]	; (80042ec <u8x8_d_ssd1306_128x64_noname+0x5c>)
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f7ff fe47 	bl	8003f5e <u8x8_cad_SendSequence>
      break;
 80042d0:	e006      	b.n	80042e0 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 80042d2:	4907      	ldr	r1, [pc, #28]	; (80042f0 <u8x8_d_ssd1306_128x64_noname+0x60>)
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f80d 	bl	80042f4 <u8x8_d_helper_display_setup_memory>
      break;
 80042da:	e001      	b.n	80042e0 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	e000      	b.n	80042e2 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 80042e0:	2301      	movs	r3, #1
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	0800eacc 	.word	0x0800eacc
 80042f0:	0800eb24 	.word	0x0800eb24

080042f4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	7c9a      	ldrb	r2, [r3, #18]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr

0800431a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800431a:	b590      	push	{r4, r7, lr}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695c      	ldr	r4, [r3, #20]
 8004326:	2300      	movs	r3, #0
 8004328:	2200      	movs	r2, #0
 800432a:	2128      	movs	r1, #40	; 0x28
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68dc      	ldr	r4, [r3, #12]
 8004334:	2300      	movs	r3, #0
 8004336:	2200      	movs	r2, #0
 8004338:	2114      	movs	r1, #20
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800433e:	2201      	movs	r2, #1
 8004340:	214b      	movs	r1, #75	; 0x4b
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f886 	bl	8004454 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	791b      	ldrb	r3, [r3, #4]
 800434e:	461a      	mov	r2, r3
 8004350:	2129      	movs	r1, #41	; 0x29
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f87e 	bl	8004454 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004358:	2200      	movs	r2, #0
 800435a:	214b      	movs	r1, #75	; 0x4b
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f879 	bl	8004454 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	791b      	ldrb	r3, [r3, #4]
 8004368:	461a      	mov	r2, r3
 800436a:	2129      	movs	r1, #41	; 0x29
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f871 	bl	8004454 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8004372:	2201      	movs	r2, #1
 8004374:	214b      	movs	r1, #75	; 0x4b
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f86c 	bl	8004454 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	795b      	ldrb	r3, [r3, #5]
 8004382:	461a      	mov	r2, r3
 8004384:	2129      	movs	r1, #41	; 0x29
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f864 	bl	8004454 <u8x8_gpio_call>
}    
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bd90      	pop	{r4, r7, pc}

08004394 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8004394:	b590      	push	{r4, r7, lr}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	4608      	mov	r0, r1
 800439e:	4611      	mov	r1, r2
 80043a0:	461a      	mov	r2, r3
 80043a2:	4603      	mov	r3, r0
 80043a4:	70fb      	strb	r3, [r7, #3]
 80043a6:	460b      	mov	r3, r1
 80043a8:	70bb      	strb	r3, [r7, #2]
 80043aa:	4613      	mov	r3, r2
 80043ac:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80043b2:	78bb      	ldrb	r3, [r7, #2]
 80043b4:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80043b6:	787b      	ldrb	r3, [r7, #1]
 80043b8:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689c      	ldr	r4, [r3, #8]
 80043c2:	f107 0308 	add.w	r3, r7, #8
 80043c6:	2201      	movs	r2, #1
 80043c8:	210f      	movs	r1, #15
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	47a0      	blx	r4
 80043ce:	4603      	mov	r3, r0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd90      	pop	{r4, r7, pc}

080043d8 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689c      	ldr	r4, [r3, #8]
 80043e4:	2300      	movs	r3, #0
 80043e6:	2200      	movs	r2, #0
 80043e8:	2109      	movs	r1, #9
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	47a0      	blx	r4
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd90      	pop	{r4, r7, pc}

080043f6 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80043f6:	b590      	push	{r4, r7, lr}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689c      	ldr	r4, [r3, #8]
 8004402:	2300      	movs	r3, #0
 8004404:	2200      	movs	r2, #0
 8004406:	210a      	movs	r1, #10
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bd90      	pop	{r4, r7, pc}

08004414 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8004414:	b590      	push	{r4, r7, lr}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689c      	ldr	r4, [r3, #8]
 8004424:	78fa      	ldrb	r2, [r7, #3]
 8004426:	2300      	movs	r3, #0
 8004428:	210b      	movs	r1, #11
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	47a0      	blx	r4
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bd90      	pop	{r4, r7, pc}

08004436 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8004436:	b590      	push	{r4, r7, lr}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689c      	ldr	r4, [r3, #8]
 8004442:	2300      	movs	r3, #0
 8004444:	2200      	movs	r2, #0
 8004446:	2110      	movs	r1, #16
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	47a0      	blx	r4
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bd90      	pop	{r4, r7, pc}

08004454 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8004454:	b590      	push	{r4, r7, lr}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	70fb      	strb	r3, [r7, #3]
 8004460:	4613      	mov	r3, r2
 8004462:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	695c      	ldr	r4, [r3, #20]
 8004468:	78ba      	ldrb	r2, [r7, #2]
 800446a:	78f9      	ldrb	r1, [r7, #3]
 800446c:	2300      	movs	r3, #0
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	47a0      	blx	r4
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	bd90      	pop	{r4, r7, pc}

0800447a <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	72fb      	strb	r3, [r7, #11]
 8004488:	4613      	mov	r3, r2
 800448a:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a11      	ldr	r2, [pc, #68]	; (80044f0 <u8x8_SetupDefaults+0x58>)
 80044aa:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a10      	ldr	r2, [pc, #64]	; (80044f0 <u8x8_SetupDefaults+0x58>)
 80044b0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a0e      	ldr	r2, [pc, #56]	; (80044f0 <u8x8_SetupDefaults+0x58>)
 80044b6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a0d      	ldr	r2, [pc, #52]	; (80044f0 <u8x8_SetupDefaults+0x58>)
 80044bc:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	22ff      	movs	r2, #255	; 0xff
 80044d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	22ff      	movs	r2, #255	; 0xff
 80044e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	0800447b 	.word	0x0800447b

080044f4 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f7ff ffc8 	bl	8004498 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7ff ff59 	bl	80043d8 <u8x8_SetupMemory>
}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004530:	480c      	ldr	r0, [pc, #48]	; (8004564 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004532:	490d      	ldr	r1, [pc, #52]	; (8004568 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004534:	4a0d      	ldr	r2, [pc, #52]	; (800456c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004538:	e002      	b.n	8004540 <LoopCopyDataInit>

0800453a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800453a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800453c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800453e:	3304      	adds	r3, #4

08004540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004544:	d3f9      	bcc.n	800453a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004546:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004548:	4c0a      	ldr	r4, [pc, #40]	; (8004574 <LoopFillZerobss+0x22>)
  movs r3, #0
 800454a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800454c:	e001      	b.n	8004552 <LoopFillZerobss>

0800454e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800454e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004550:	3204      	adds	r2, #4

08004552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004554:	d3fb      	bcc.n	800454e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004556:	f7fe f8a5 	bl	80026a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800455a:	f001 ff63 	bl	8006424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800455e:	f7fd fdad 	bl	80020bc <main>
  bx lr
 8004562:	4770      	bx	lr
  ldr r0, =_sdata
 8004564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004568:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 800456c:	0800eb44 	.word	0x0800eb44
  ldr r2, =_sbss
 8004570:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8004574:	2000089c 	.word	0x2000089c

08004578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004578:	e7fe      	b.n	8004578 <ADC1_2_IRQHandler>
	...

0800457c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004580:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <HAL_Init+0x28>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a07      	ldr	r2, [pc, #28]	; (80045a4 <HAL_Init+0x28>)
 8004586:	f043 0310 	orr.w	r3, r3, #16
 800458a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800458c:	2003      	movs	r0, #3
 800458e:	f000 f945 	bl	800481c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004592:	2000      	movs	r0, #0
 8004594:	f000 f808 	bl	80045a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004598:	f7fd ffe8 	bl	800256c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40022000 	.word	0x40022000

080045a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045b0:	4b12      	ldr	r3, [pc, #72]	; (80045fc <HAL_InitTick+0x54>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	4b12      	ldr	r3, [pc, #72]	; (8004600 <HAL_InitTick+0x58>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	4619      	mov	r1, r3
 80045ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045be:	fbb3 f3f1 	udiv	r3, r3, r1
 80045c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 f95d 	bl	8004886 <HAL_SYSTICK_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e00e      	b.n	80045f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b0f      	cmp	r3, #15
 80045da:	d80a      	bhi.n	80045f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045dc:	2200      	movs	r2, #0
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	f04f 30ff 	mov.w	r0, #4294967295
 80045e4:	f000 f925 	bl	8004832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045e8:	4a06      	ldr	r2, [pc, #24]	; (8004604 <HAL_InitTick+0x5c>)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	e000      	b.n	80045f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20000058 	.word	0x20000058
 8004600:	20000060 	.word	0x20000060
 8004604:	2000005c 	.word	0x2000005c

08004608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <HAL_IncTick+0x1c>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	4b05      	ldr	r3, [pc, #20]	; (8004628 <HAL_IncTick+0x20>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4413      	add	r3, r2
 8004618:	4a03      	ldr	r2, [pc, #12]	; (8004628 <HAL_IncTick+0x20>)
 800461a:	6013      	str	r3, [r2, #0]
}
 800461c:	bf00      	nop
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr
 8004624:	20000060 	.word	0x20000060
 8004628:	20000894 	.word	0x20000894

0800462c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  return uwTick;
 8004630:	4b02      	ldr	r3, [pc, #8]	; (800463c <HAL_GetTick+0x10>)
 8004632:	681b      	ldr	r3, [r3, #0]
}
 8004634:	4618      	mov	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr
 800463c:	20000894 	.word	0x20000894

08004640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004648:	f7ff fff0 	bl	800462c <HAL_GetTick>
 800464c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004658:	d005      	beq.n	8004666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <HAL_Delay+0x40>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004666:	bf00      	nop
 8004668:	f7ff ffe0 	bl	800462c <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	429a      	cmp	r2, r3
 8004676:	d8f7      	bhi.n	8004668 <HAL_Delay+0x28>
  {
  }
}
 8004678:	bf00      	nop
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20000060 	.word	0x20000060

08004684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004694:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046a0:	4013      	ands	r3, r2
 80046a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046b6:	4a04      	ldr	r2, [pc, #16]	; (80046c8 <__NVIC_SetPriorityGrouping+0x44>)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	60d3      	str	r3, [r2, #12]
}
 80046bc:	bf00      	nop
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bc80      	pop	{r7}
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	e000ed00 	.word	0xe000ed00

080046cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046d0:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <__NVIC_GetPriorityGrouping+0x18>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	0a1b      	lsrs	r3, r3, #8
 80046d6:	f003 0307 	and.w	r3, r3, #7
}
 80046da:	4618      	mov	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	e000ed00 	.word	0xe000ed00

080046e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	db0b      	blt.n	8004712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	f003 021f 	and.w	r2, r3, #31
 8004700:	4906      	ldr	r1, [pc, #24]	; (800471c <__NVIC_EnableIRQ+0x34>)
 8004702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	2001      	movs	r0, #1
 800470a:	fa00 f202 	lsl.w	r2, r0, r2
 800470e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr
 800471c:	e000e100 	.word	0xe000e100

08004720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	6039      	str	r1, [r7, #0]
 800472a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800472c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004730:	2b00      	cmp	r3, #0
 8004732:	db0a      	blt.n	800474a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	b2da      	uxtb	r2, r3
 8004738:	490c      	ldr	r1, [pc, #48]	; (800476c <__NVIC_SetPriority+0x4c>)
 800473a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473e:	0112      	lsls	r2, r2, #4
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	440b      	add	r3, r1
 8004744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004748:	e00a      	b.n	8004760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	b2da      	uxtb	r2, r3
 800474e:	4908      	ldr	r1, [pc, #32]	; (8004770 <__NVIC_SetPriority+0x50>)
 8004750:	79fb      	ldrb	r3, [r7, #7]
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	3b04      	subs	r3, #4
 8004758:	0112      	lsls	r2, r2, #4
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	440b      	add	r3, r1
 800475e:	761a      	strb	r2, [r3, #24]
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	bc80      	pop	{r7}
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	e000e100 	.word	0xe000e100
 8004770:	e000ed00 	.word	0xe000ed00

08004774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004774:	b480      	push	{r7}
 8004776:	b089      	sub	sp, #36	; 0x24
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f1c3 0307 	rsb	r3, r3, #7
 800478e:	2b04      	cmp	r3, #4
 8004790:	bf28      	it	cs
 8004792:	2304      	movcs	r3, #4
 8004794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	3304      	adds	r3, #4
 800479a:	2b06      	cmp	r3, #6
 800479c:	d902      	bls.n	80047a4 <NVIC_EncodePriority+0x30>
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	3b03      	subs	r3, #3
 80047a2:	e000      	b.n	80047a6 <NVIC_EncodePriority+0x32>
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a8:	f04f 32ff 	mov.w	r2, #4294967295
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43da      	mvns	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	401a      	ands	r2, r3
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047bc:	f04f 31ff 	mov.w	r1, #4294967295
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	fa01 f303 	lsl.w	r3, r1, r3
 80047c6:	43d9      	mvns	r1, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047cc:	4313      	orrs	r3, r2
         );
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3724      	adds	r7, #36	; 0x24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr

080047d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047e8:	d301      	bcc.n	80047ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047ea:	2301      	movs	r3, #1
 80047ec:	e00f      	b.n	800480e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ee:	4a0a      	ldr	r2, [pc, #40]	; (8004818 <SysTick_Config+0x40>)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047f6:	210f      	movs	r1, #15
 80047f8:	f04f 30ff 	mov.w	r0, #4294967295
 80047fc:	f7ff ff90 	bl	8004720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <SysTick_Config+0x40>)
 8004802:	2200      	movs	r2, #0
 8004804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004806:	4b04      	ldr	r3, [pc, #16]	; (8004818 <SysTick_Config+0x40>)
 8004808:	2207      	movs	r2, #7
 800480a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	e000e010 	.word	0xe000e010

0800481c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff ff2d 	bl	8004684 <__NVIC_SetPriorityGrouping>
}
 800482a:	bf00      	nop
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004832:	b580      	push	{r7, lr}
 8004834:	b086      	sub	sp, #24
 8004836:	af00      	add	r7, sp, #0
 8004838:	4603      	mov	r3, r0
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	607a      	str	r2, [r7, #4]
 800483e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004844:	f7ff ff42 	bl	80046cc <__NVIC_GetPriorityGrouping>
 8004848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	6978      	ldr	r0, [r7, #20]
 8004850:	f7ff ff90 	bl	8004774 <NVIC_EncodePriority>
 8004854:	4602      	mov	r2, r0
 8004856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800485a:	4611      	mov	r1, r2
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff ff5f 	bl	8004720 <__NVIC_SetPriority>
}
 8004862:	bf00      	nop
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b082      	sub	sp, #8
 800486e:	af00      	add	r7, sp, #0
 8004870:	4603      	mov	r3, r0
 8004872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff ff35 	bl	80046e8 <__NVIC_EnableIRQ>
}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b082      	sub	sp, #8
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7ff ffa2 	bl	80047d8 <SysTick_Config>
 8004894:	4603      	mov	r3, r0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b08b      	sub	sp, #44	; 0x2c
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048aa:	2300      	movs	r3, #0
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80048ae:	2300      	movs	r3, #0
 80048b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048b2:	e133      	b.n	8004b1c <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80048b4:	2201      	movs	r2, #1
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	4013      	ands	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	f040 8122 	bne.w	8004b16 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b12      	cmp	r3, #18
 80048d8:	d034      	beq.n	8004944 <HAL_GPIO_Init+0xa4>
 80048da:	2b12      	cmp	r3, #18
 80048dc:	d80d      	bhi.n	80048fa <HAL_GPIO_Init+0x5a>
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d02b      	beq.n	800493a <HAL_GPIO_Init+0x9a>
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d804      	bhi.n	80048f0 <HAL_GPIO_Init+0x50>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d031      	beq.n	800494e <HAL_GPIO_Init+0xae>
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d01c      	beq.n	8004928 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80048ee:	e048      	b.n	8004982 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d043      	beq.n	800497c <HAL_GPIO_Init+0xdc>
 80048f4:	2b11      	cmp	r3, #17
 80048f6:	d01b      	beq.n	8004930 <HAL_GPIO_Init+0x90>
          break;
 80048f8:	e043      	b.n	8004982 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80048fa:	4a8f      	ldr	r2, [pc, #572]	; (8004b38 <HAL_GPIO_Init+0x298>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d026      	beq.n	800494e <HAL_GPIO_Init+0xae>
 8004900:	4a8d      	ldr	r2, [pc, #564]	; (8004b38 <HAL_GPIO_Init+0x298>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d806      	bhi.n	8004914 <HAL_GPIO_Init+0x74>
 8004906:	4a8d      	ldr	r2, [pc, #564]	; (8004b3c <HAL_GPIO_Init+0x29c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d020      	beq.n	800494e <HAL_GPIO_Init+0xae>
 800490c:	4a8c      	ldr	r2, [pc, #560]	; (8004b40 <HAL_GPIO_Init+0x2a0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d01d      	beq.n	800494e <HAL_GPIO_Init+0xae>
          break;
 8004912:	e036      	b.n	8004982 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004914:	4a8b      	ldr	r2, [pc, #556]	; (8004b44 <HAL_GPIO_Init+0x2a4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d019      	beq.n	800494e <HAL_GPIO_Init+0xae>
 800491a:	4a8b      	ldr	r2, [pc, #556]	; (8004b48 <HAL_GPIO_Init+0x2a8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d016      	beq.n	800494e <HAL_GPIO_Init+0xae>
 8004920:	4a8a      	ldr	r2, [pc, #552]	; (8004b4c <HAL_GPIO_Init+0x2ac>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <HAL_GPIO_Init+0xae>
          break;
 8004926:	e02c      	b.n	8004982 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	623b      	str	r3, [r7, #32]
          break;
 800492e:	e028      	b.n	8004982 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	3304      	adds	r3, #4
 8004936:	623b      	str	r3, [r7, #32]
          break;
 8004938:	e023      	b.n	8004982 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	3308      	adds	r3, #8
 8004940:	623b      	str	r3, [r7, #32]
          break;
 8004942:	e01e      	b.n	8004982 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	330c      	adds	r3, #12
 800494a:	623b      	str	r3, [r7, #32]
          break;
 800494c:	e019      	b.n	8004982 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d102      	bne.n	800495c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004956:	2304      	movs	r3, #4
 8004958:	623b      	str	r3, [r7, #32]
          break;
 800495a:	e012      	b.n	8004982 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d105      	bne.n	8004970 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004964:	2308      	movs	r3, #8
 8004966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69fa      	ldr	r2, [r7, #28]
 800496c:	611a      	str	r2, [r3, #16]
          break;
 800496e:	e008      	b.n	8004982 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004970:	2308      	movs	r3, #8
 8004972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	615a      	str	r2, [r3, #20]
          break;
 800497a:	e002      	b.n	8004982 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800497c:	2300      	movs	r3, #0
 800497e:	623b      	str	r3, [r7, #32]
          break;
 8004980:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2bff      	cmp	r3, #255	; 0xff
 8004986:	d801      	bhi.n	800498c <HAL_GPIO_Init+0xec>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	e001      	b.n	8004990 <HAL_GPIO_Init+0xf0>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3304      	adds	r3, #4
 8004990:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2bff      	cmp	r3, #255	; 0xff
 8004996:	d802      	bhi.n	800499e <HAL_GPIO_Init+0xfe>
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	e002      	b.n	80049a4 <HAL_GPIO_Init+0x104>
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	3b08      	subs	r3, #8
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	210f      	movs	r1, #15
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	fa01 f303 	lsl.w	r3, r1, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	401a      	ands	r2, r3
 80049b6:	6a39      	ldr	r1, [r7, #32]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	fa01 f303 	lsl.w	r3, r1, r3
 80049be:	431a      	orrs	r2, r3
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80a2 	beq.w	8004b16 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80049d2:	4b5f      	ldr	r3, [pc, #380]	; (8004b50 <HAL_GPIO_Init+0x2b0>)
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	4a5e      	ldr	r2, [pc, #376]	; (8004b50 <HAL_GPIO_Init+0x2b0>)
 80049d8:	f043 0301 	orr.w	r3, r3, #1
 80049dc:	6193      	str	r3, [r2, #24]
 80049de:	4b5c      	ldr	r3, [pc, #368]	; (8004b50 <HAL_GPIO_Init+0x2b0>)
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	60bb      	str	r3, [r7, #8]
 80049e8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80049ea:	4a5a      	ldr	r2, [pc, #360]	; (8004b54 <HAL_GPIO_Init+0x2b4>)
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	089b      	lsrs	r3, r3, #2
 80049f0:	3302      	adds	r3, #2
 80049f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	220f      	movs	r2, #15
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	43db      	mvns	r3, r3
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a51      	ldr	r2, [pc, #324]	; (8004b58 <HAL_GPIO_Init+0x2b8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d01f      	beq.n	8004a56 <HAL_GPIO_Init+0x1b6>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a50      	ldr	r2, [pc, #320]	; (8004b5c <HAL_GPIO_Init+0x2bc>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d019      	beq.n	8004a52 <HAL_GPIO_Init+0x1b2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a4f      	ldr	r2, [pc, #316]	; (8004b60 <HAL_GPIO_Init+0x2c0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <HAL_GPIO_Init+0x1ae>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a4e      	ldr	r2, [pc, #312]	; (8004b64 <HAL_GPIO_Init+0x2c4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00d      	beq.n	8004a4a <HAL_GPIO_Init+0x1aa>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a4d      	ldr	r2, [pc, #308]	; (8004b68 <HAL_GPIO_Init+0x2c8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d007      	beq.n	8004a46 <HAL_GPIO_Init+0x1a6>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a4c      	ldr	r2, [pc, #304]	; (8004b6c <HAL_GPIO_Init+0x2cc>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d101      	bne.n	8004a42 <HAL_GPIO_Init+0x1a2>
 8004a3e:	2305      	movs	r3, #5
 8004a40:	e00a      	b.n	8004a58 <HAL_GPIO_Init+0x1b8>
 8004a42:	2306      	movs	r3, #6
 8004a44:	e008      	b.n	8004a58 <HAL_GPIO_Init+0x1b8>
 8004a46:	2304      	movs	r3, #4
 8004a48:	e006      	b.n	8004a58 <HAL_GPIO_Init+0x1b8>
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e004      	b.n	8004a58 <HAL_GPIO_Init+0x1b8>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e002      	b.n	8004a58 <HAL_GPIO_Init+0x1b8>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <HAL_GPIO_Init+0x1b8>
 8004a56:	2300      	movs	r3, #0
 8004a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5a:	f002 0203 	and.w	r2, r2, #3
 8004a5e:	0092      	lsls	r2, r2, #2
 8004a60:	4093      	lsls	r3, r2
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004a68:	493a      	ldr	r1, [pc, #232]	; (8004b54 <HAL_GPIO_Init+0x2b4>)
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	089b      	lsrs	r3, r3, #2
 8004a6e:	3302      	adds	r3, #2
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d006      	beq.n	8004a90 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004a82:	4b3b      	ldr	r3, [pc, #236]	; (8004b70 <HAL_GPIO_Init+0x2d0>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	493a      	ldr	r1, [pc, #232]	; (8004b70 <HAL_GPIO_Init+0x2d0>)
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	600b      	str	r3, [r1, #0]
 8004a8e:	e006      	b.n	8004a9e <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004a90:	4b37      	ldr	r3, [pc, #220]	; (8004b70 <HAL_GPIO_Init+0x2d0>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	43db      	mvns	r3, r3
 8004a98:	4935      	ldr	r1, [pc, #212]	; (8004b70 <HAL_GPIO_Init+0x2d0>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d006      	beq.n	8004ab8 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004aaa:	4b31      	ldr	r3, [pc, #196]	; (8004b70 <HAL_GPIO_Init+0x2d0>)
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	4930      	ldr	r1, [pc, #192]	; (8004b70 <HAL_GPIO_Init+0x2d0>)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	604b      	str	r3, [r1, #4]
 8004ab6:	e006      	b.n	8004ac6 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004ab8:	4b2d      	ldr	r3, [pc, #180]	; (8004b70 <HAL_GPIO_Init+0x2d0>)
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	492b      	ldr	r1, [pc, #172]	; (8004b70 <HAL_GPIO_Init+0x2d0>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d006      	beq.n	8004ae0 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004ad2:	4b27      	ldr	r3, [pc, #156]	; (8004b70 <HAL_GPIO_Init+0x2d0>)
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	4926      	ldr	r1, [pc, #152]	; (8004b70 <HAL_GPIO_Init+0x2d0>)
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	608b      	str	r3, [r1, #8]
 8004ade:	e006      	b.n	8004aee <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004ae0:	4b23      	ldr	r3, [pc, #140]	; (8004b70 <HAL_GPIO_Init+0x2d0>)
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	4921      	ldr	r1, [pc, #132]	; (8004b70 <HAL_GPIO_Init+0x2d0>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d006      	beq.n	8004b08 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004afa:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <HAL_GPIO_Init+0x2d0>)
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	491c      	ldr	r1, [pc, #112]	; (8004b70 <HAL_GPIO_Init+0x2d0>)
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60cb      	str	r3, [r1, #12]
 8004b06:	e006      	b.n	8004b16 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004b08:	4b19      	ldr	r3, [pc, #100]	; (8004b70 <HAL_GPIO_Init+0x2d0>)
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	4917      	ldr	r1, [pc, #92]	; (8004b70 <HAL_GPIO_Init+0x2d0>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	3301      	adds	r3, #1
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	fa22 f303 	lsr.w	r3, r2, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f47f aec4 	bne.w	80048b4 <HAL_GPIO_Init+0x14>
  }
}
 8004b2c:	bf00      	nop
 8004b2e:	372c      	adds	r7, #44	; 0x2c
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bc80      	pop	{r7}
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	10210000 	.word	0x10210000
 8004b3c:	10110000 	.word	0x10110000
 8004b40:	10120000 	.word	0x10120000
 8004b44:	10310000 	.word	0x10310000
 8004b48:	10320000 	.word	0x10320000
 8004b4c:	10220000 	.word	0x10220000
 8004b50:	40021000 	.word	0x40021000
 8004b54:	40010000 	.word	0x40010000
 8004b58:	40010800 	.word	0x40010800
 8004b5c:	40010c00 	.word	0x40010c00
 8004b60:	40011000 	.word	0x40011000
 8004b64:	40011400 	.word	0x40011400
 8004b68:	40011800 	.word	0x40011800
 8004b6c:	40011c00 	.word	0x40011c00
 8004b70:	40010400 	.word	0x40010400

08004b74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	887b      	ldrh	r3, [r7, #2]
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
 8004b90:	e001      	b.n	8004b96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b92:	2300      	movs	r3, #0
 8004b94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	807b      	strh	r3, [r7, #2]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bb2:	787b      	ldrb	r3, [r7, #1]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bb8:	887a      	ldrh	r2, [r7, #2]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004bbe:	e003      	b.n	8004bc8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004bc0:	887b      	ldrh	r3, [r7, #2]
 8004bc2:	041a      	lsls	r2, r3, #16
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	611a      	str	r2, [r3, #16]
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004be4:	887a      	ldrh	r2, [r7, #2]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4013      	ands	r3, r2
 8004bea:	041a      	lsls	r2, r3, #16
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	43d9      	mvns	r1, r3
 8004bf0:	887b      	ldrh	r3, [r7, #2]
 8004bf2:	400b      	ands	r3, r1
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	611a      	str	r2, [r3, #16]
}
 8004bfa:	bf00      	nop
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr

08004c04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e11f      	b.n	8004e56 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fc fe80 	bl	8001930 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2224      	movs	r2, #36	; 0x24
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0201 	bic.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c68:	f000 ffe0 	bl	8005c2c <HAL_RCC_GetPCLK1Freq>
 8004c6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	4a7b      	ldr	r2, [pc, #492]	; (8004e60 <HAL_I2C_Init+0x25c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d807      	bhi.n	8004c88 <HAL_I2C_Init+0x84>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4a7a      	ldr	r2, [pc, #488]	; (8004e64 <HAL_I2C_Init+0x260>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	bf94      	ite	ls
 8004c80:	2301      	movls	r3, #1
 8004c82:	2300      	movhi	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	e006      	b.n	8004c96 <HAL_I2C_Init+0x92>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a77      	ldr	r2, [pc, #476]	; (8004e68 <HAL_I2C_Init+0x264>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	bf94      	ite	ls
 8004c90:	2301      	movls	r3, #1
 8004c92:	2300      	movhi	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e0db      	b.n	8004e56 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4a72      	ldr	r2, [pc, #456]	; (8004e6c <HAL_I2C_Init+0x268>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	0c9b      	lsrs	r3, r3, #18
 8004ca8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	4a64      	ldr	r2, [pc, #400]	; (8004e60 <HAL_I2C_Init+0x25c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d802      	bhi.n	8004cd8 <HAL_I2C_Init+0xd4>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	e009      	b.n	8004cec <HAL_I2C_Init+0xe8>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cde:	fb02 f303 	mul.w	r3, r2, r3
 8004ce2:	4a63      	ldr	r2, [pc, #396]	; (8004e70 <HAL_I2C_Init+0x26c>)
 8004ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce8:	099b      	lsrs	r3, r3, #6
 8004cea:	3301      	adds	r3, #1
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004cfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	4956      	ldr	r1, [pc, #344]	; (8004e60 <HAL_I2C_Init+0x25c>)
 8004d08:	428b      	cmp	r3, r1
 8004d0a:	d80d      	bhi.n	8004d28 <HAL_I2C_Init+0x124>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	1e59      	subs	r1, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	bf38      	it	cc
 8004d24:	2304      	movcc	r3, #4
 8004d26:	e04f      	b.n	8004dc8 <HAL_I2C_Init+0x1c4>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d111      	bne.n	8004d54 <HAL_I2C_Init+0x150>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	1e58      	subs	r0, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6859      	ldr	r1, [r3, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	440b      	add	r3, r1
 8004d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d42:	3301      	adds	r3, #1
 8004d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2301      	moveq	r3, #1
 8004d4e:	2300      	movne	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	e012      	b.n	8004d7a <HAL_I2C_Init+0x176>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	1e58      	subs	r0, r3, #1
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6859      	ldr	r1, [r3, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	0099      	lsls	r1, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bf0c      	ite	eq
 8004d74:	2301      	moveq	r3, #1
 8004d76:	2300      	movne	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_I2C_Init+0x17e>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e022      	b.n	8004dc8 <HAL_I2C_Init+0x1c4>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10e      	bne.n	8004da8 <HAL_I2C_Init+0x1a4>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1e58      	subs	r0, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6859      	ldr	r1, [r3, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	440b      	add	r3, r1
 8004d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da6:	e00f      	b.n	8004dc8 <HAL_I2C_Init+0x1c4>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1e58      	subs	r0, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6859      	ldr	r1, [r3, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	0099      	lsls	r1, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	6809      	ldr	r1, [r1, #0]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69da      	ldr	r2, [r3, #28]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004df6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6911      	ldr	r1, [r2, #16]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	68d2      	ldr	r2, [r2, #12]
 8004e02:	4311      	orrs	r1, r2
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695a      	ldr	r2, [r3, #20]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	000186a0 	.word	0x000186a0
 8004e64:	001e847f 	.word	0x001e847f
 8004e68:	003d08ff 	.word	0x003d08ff
 8004e6c:	431bde83 	.word	0x431bde83
 8004e70:	10624dd3 	.word	0x10624dd3

08004e74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	460b      	mov	r3, r1
 8004e82:	817b      	strh	r3, [r7, #10]
 8004e84:	4613      	mov	r3, r2
 8004e86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e88:	f7ff fbd0 	bl	800462c <HAL_GetTick>
 8004e8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b20      	cmp	r3, #32
 8004e98:	f040 80e0 	bne.w	800505c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	2319      	movs	r3, #25
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	4970      	ldr	r1, [pc, #448]	; (8005068 <HAL_I2C_Master_Transmit+0x1f4>)
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f964 	bl	8005174 <I2C_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e0d3      	b.n	800505e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_I2C_Master_Transmit+0x50>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e0cc      	b.n	800505e <HAL_I2C_Master_Transmit+0x1ea>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d007      	beq.n	8004eea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0201 	orr.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ef8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2221      	movs	r2, #33	; 0x21
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2210      	movs	r2, #16
 8004f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	893a      	ldrh	r2, [r7, #8]
 8004f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4a50      	ldr	r2, [pc, #320]	; (800506c <HAL_I2C_Master_Transmit+0x1f8>)
 8004f2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f2c:	8979      	ldrh	r1, [r7, #10]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	6a3a      	ldr	r2, [r7, #32]
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f89c 	bl	8005070 <I2C_MasterRequestWrite>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e08d      	b.n	800505e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f42:	2300      	movs	r3, #0
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	613b      	str	r3, [r7, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004f58:	e066      	b.n	8005028 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	6a39      	ldr	r1, [r7, #32]
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 f9de 	bl	8005320 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00d      	beq.n	8004f86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d107      	bne.n	8004f82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e06b      	b.n	800505e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	781a      	ldrb	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d11b      	bne.n	8004ffc <HAL_I2C_Master_Transmit+0x188>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d017      	beq.n	8004ffc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	781a      	ldrb	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	6a39      	ldr	r1, [r7, #32]
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 f9ce 	bl	80053a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00d      	beq.n	8005028 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	2b04      	cmp	r3, #4
 8005012:	d107      	bne.n	8005024 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005022:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e01a      	b.n	800505e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502c:	2b00      	cmp	r3, #0
 800502e:	d194      	bne.n	8004f5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005058:	2300      	movs	r3, #0
 800505a:	e000      	b.n	800505e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800505c:	2302      	movs	r3, #2
  }
}
 800505e:	4618      	mov	r0, r3
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	00100002 	.word	0x00100002
 800506c:	ffff0000 	.word	0xffff0000

08005070 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af02      	add	r7, sp, #8
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	607a      	str	r2, [r7, #4]
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	460b      	mov	r3, r1
 800507e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005084:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b08      	cmp	r3, #8
 800508a:	d006      	beq.n	800509a <I2C_MasterRequestWrite+0x2a>
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d003      	beq.n	800509a <I2C_MasterRequestWrite+0x2a>
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005098:	d108      	bne.n	80050ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	e00b      	b.n	80050c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b0:	2b12      	cmp	r3, #18
 80050b2:	d107      	bne.n	80050c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f84f 	bl	8005174 <I2C_WaitOnFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00d      	beq.n	80050f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ea:	d103      	bne.n	80050f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e035      	b.n	8005164 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005100:	d108      	bne.n	8005114 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005102:	897b      	ldrh	r3, [r7, #10]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	461a      	mov	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005110:	611a      	str	r2, [r3, #16]
 8005112:	e01b      	b.n	800514c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005114:	897b      	ldrh	r3, [r7, #10]
 8005116:	11db      	asrs	r3, r3, #7
 8005118:	b2db      	uxtb	r3, r3
 800511a:	f003 0306 	and.w	r3, r3, #6
 800511e:	b2db      	uxtb	r3, r3
 8005120:	f063 030f 	orn	r3, r3, #15
 8005124:	b2da      	uxtb	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	490e      	ldr	r1, [pc, #56]	; (800516c <I2C_MasterRequestWrite+0xfc>)
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f875 	bl	8005222 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e010      	b.n	8005164 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005142:	897b      	ldrh	r3, [r7, #10]
 8005144:	b2da      	uxtb	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	4907      	ldr	r1, [pc, #28]	; (8005170 <I2C_MasterRequestWrite+0x100>)
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f865 	bl	8005222 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	00010008 	.word	0x00010008
 8005170:	00010002 	.word	0x00010002

08005174 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	4613      	mov	r3, r2
 8005182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005184:	e025      	b.n	80051d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518c:	d021      	beq.n	80051d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518e:	f7ff fa4d 	bl	800462c <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d302      	bcc.n	80051a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d116      	bne.n	80051d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f043 0220 	orr.w	r2, r3, #32
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e023      	b.n	800521a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	0c1b      	lsrs	r3, r3, #16
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d10d      	bne.n	80051f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	43da      	mvns	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4013      	ands	r3, r2
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bf0c      	ite	eq
 80051ee:	2301      	moveq	r3, #1
 80051f0:	2300      	movne	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	e00c      	b.n	8005212 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	43da      	mvns	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4013      	ands	r3, r2
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	bf0c      	ite	eq
 800520a:	2301      	moveq	r3, #1
 800520c:	2300      	movne	r3, #0
 800520e:	b2db      	uxtb	r3, r3
 8005210:	461a      	mov	r2, r3
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	429a      	cmp	r2, r3
 8005216:	d0b6      	beq.n	8005186 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
 800522e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005230:	e051      	b.n	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005240:	d123      	bne.n	800528a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005250:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800525a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2220      	movs	r2, #32
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f043 0204 	orr.w	r2, r3, #4
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e046      	b.n	8005318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d021      	beq.n	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005292:	f7ff f9cb 	bl	800462c <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d302      	bcc.n	80052a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d116      	bne.n	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f043 0220 	orr.w	r2, r3, #32
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e020      	b.n	8005318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	0c1b      	lsrs	r3, r3, #16
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d10c      	bne.n	80052fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	43da      	mvns	r2, r3
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4013      	ands	r3, r2
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	bf14      	ite	ne
 80052f2:	2301      	movne	r3, #1
 80052f4:	2300      	moveq	r3, #0
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	e00b      	b.n	8005312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	43da      	mvns	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4013      	ands	r3, r2
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	bf14      	ite	ne
 800530c:	2301      	movne	r3, #1
 800530e:	2300      	moveq	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d18d      	bne.n	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800532c:	e02d      	b.n	800538a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 f878 	bl	8005424 <I2C_IsAcknowledgeFailed>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e02d      	b.n	800539a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d021      	beq.n	800538a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005346:	f7ff f971 	bl	800462c <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	429a      	cmp	r2, r3
 8005354:	d302      	bcc.n	800535c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d116      	bne.n	800538a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f043 0220 	orr.w	r2, r3, #32
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e007      	b.n	800539a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005394:	2b80      	cmp	r3, #128	; 0x80
 8005396:	d1ca      	bne.n	800532e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053ae:	e02d      	b.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f837 	bl	8005424 <I2C_IsAcknowledgeFailed>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e02d      	b.n	800541c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d021      	beq.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c8:	f7ff f930 	bl	800462c <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d302      	bcc.n	80053de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d116      	bne.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	f043 0220 	orr.w	r2, r3, #32
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e007      	b.n	800541c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b04      	cmp	r3, #4
 8005418:	d1ca      	bne.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800543a:	d11b      	bne.n	8005474 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005444:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	f043 0204 	orr.w	r2, r3, #4
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e000      	b.n	8005476 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr

08005480 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e26c      	b.n	800596c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 8087 	beq.w	80055ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054a0:	4b92      	ldr	r3, [pc, #584]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f003 030c 	and.w	r3, r3, #12
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d00c      	beq.n	80054c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80054ac:	4b8f      	ldr	r3, [pc, #572]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f003 030c 	and.w	r3, r3, #12
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d112      	bne.n	80054de <HAL_RCC_OscConfig+0x5e>
 80054b8:	4b8c      	ldr	r3, [pc, #560]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c4:	d10b      	bne.n	80054de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c6:	4b89      	ldr	r3, [pc, #548]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d06c      	beq.n	80055ac <HAL_RCC_OscConfig+0x12c>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d168      	bne.n	80055ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e246      	b.n	800596c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e6:	d106      	bne.n	80054f6 <HAL_RCC_OscConfig+0x76>
 80054e8:	4b80      	ldr	r3, [pc, #512]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a7f      	ldr	r2, [pc, #508]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 80054ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	e02e      	b.n	8005554 <HAL_RCC_OscConfig+0xd4>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10c      	bne.n	8005518 <HAL_RCC_OscConfig+0x98>
 80054fe:	4b7b      	ldr	r3, [pc, #492]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a7a      	ldr	r2, [pc, #488]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 8005504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	4b78      	ldr	r3, [pc, #480]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a77      	ldr	r2, [pc, #476]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 8005510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	e01d      	b.n	8005554 <HAL_RCC_OscConfig+0xd4>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005520:	d10c      	bne.n	800553c <HAL_RCC_OscConfig+0xbc>
 8005522:	4b72      	ldr	r3, [pc, #456]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a71      	ldr	r2, [pc, #452]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 8005528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	4b6f      	ldr	r3, [pc, #444]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a6e      	ldr	r2, [pc, #440]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 8005534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	e00b      	b.n	8005554 <HAL_RCC_OscConfig+0xd4>
 800553c:	4b6b      	ldr	r3, [pc, #428]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a6a      	ldr	r2, [pc, #424]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 8005542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	4b68      	ldr	r3, [pc, #416]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a67      	ldr	r2, [pc, #412]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 800554e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005552:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d013      	beq.n	8005584 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555c:	f7ff f866 	bl	800462c <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005564:	f7ff f862 	bl	800462c <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b64      	cmp	r3, #100	; 0x64
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e1fa      	b.n	800596c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005576:	4b5d      	ldr	r3, [pc, #372]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0f0      	beq.n	8005564 <HAL_RCC_OscConfig+0xe4>
 8005582:	e014      	b.n	80055ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005584:	f7ff f852 	bl	800462c <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800558c:	f7ff f84e 	bl	800462c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b64      	cmp	r3, #100	; 0x64
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e1e6      	b.n	800596c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800559e:	4b53      	ldr	r3, [pc, #332]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f0      	bne.n	800558c <HAL_RCC_OscConfig+0x10c>
 80055aa:	e000      	b.n	80055ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d063      	beq.n	8005682 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055ba:	4b4c      	ldr	r3, [pc, #304]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f003 030c 	and.w	r3, r3, #12
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80055c6:	4b49      	ldr	r3, [pc, #292]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f003 030c 	and.w	r3, r3, #12
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d11c      	bne.n	800560c <HAL_RCC_OscConfig+0x18c>
 80055d2:	4b46      	ldr	r3, [pc, #280]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d116      	bne.n	800560c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055de:	4b43      	ldr	r3, [pc, #268]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <HAL_RCC_OscConfig+0x176>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d001      	beq.n	80055f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e1ba      	b.n	800596c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f6:	4b3d      	ldr	r3, [pc, #244]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	4939      	ldr	r1, [pc, #228]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 8005606:	4313      	orrs	r3, r2
 8005608:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800560a:	e03a      	b.n	8005682 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d020      	beq.n	8005656 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005614:	4b36      	ldr	r3, [pc, #216]	; (80056f0 <HAL_RCC_OscConfig+0x270>)
 8005616:	2201      	movs	r2, #1
 8005618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561a:	f7ff f807 	bl	800462c <HAL_GetTick>
 800561e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005622:	f7ff f803 	bl	800462c <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e19b      	b.n	800596c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005634:	4b2d      	ldr	r3, [pc, #180]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0f0      	beq.n	8005622 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005640:	4b2a      	ldr	r3, [pc, #168]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	4927      	ldr	r1, [pc, #156]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 8005650:	4313      	orrs	r3, r2
 8005652:	600b      	str	r3, [r1, #0]
 8005654:	e015      	b.n	8005682 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005656:	4b26      	ldr	r3, [pc, #152]	; (80056f0 <HAL_RCC_OscConfig+0x270>)
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800565c:	f7fe ffe6 	bl	800462c <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005664:	f7fe ffe2 	bl	800462c <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e17a      	b.n	800596c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005676:	4b1d      	ldr	r3, [pc, #116]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f0      	bne.n	8005664 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d03a      	beq.n	8005704 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d019      	beq.n	80056ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005696:	4b17      	ldr	r3, [pc, #92]	; (80056f4 <HAL_RCC_OscConfig+0x274>)
 8005698:	2201      	movs	r2, #1
 800569a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800569c:	f7fe ffc6 	bl	800462c <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056a4:	f7fe ffc2 	bl	800462c <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e15a      	b.n	800596c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056b6:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <HAL_RCC_OscConfig+0x26c>)
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80056c2:	2001      	movs	r0, #1
 80056c4:	f000 fada 	bl	8005c7c <RCC_Delay>
 80056c8:	e01c      	b.n	8005704 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056ca:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <HAL_RCC_OscConfig+0x274>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d0:	f7fe ffac 	bl	800462c <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056d6:	e00f      	b.n	80056f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056d8:	f7fe ffa8 	bl	800462c <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d908      	bls.n	80056f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e140      	b.n	800596c <HAL_RCC_OscConfig+0x4ec>
 80056ea:	bf00      	nop
 80056ec:	40021000 	.word	0x40021000
 80056f0:	42420000 	.word	0x42420000
 80056f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056f8:	4b9e      	ldr	r3, [pc, #632]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e9      	bne.n	80056d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 80a6 	beq.w	800585e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005712:	2300      	movs	r3, #0
 8005714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005716:	4b97      	ldr	r3, [pc, #604]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10d      	bne.n	800573e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005722:	4b94      	ldr	r3, [pc, #592]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	4a93      	ldr	r2, [pc, #588]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 8005728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572c:	61d3      	str	r3, [r2, #28]
 800572e:	4b91      	ldr	r3, [pc, #580]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005736:	60bb      	str	r3, [r7, #8]
 8005738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800573a:	2301      	movs	r3, #1
 800573c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800573e:	4b8e      	ldr	r3, [pc, #568]	; (8005978 <HAL_RCC_OscConfig+0x4f8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005746:	2b00      	cmp	r3, #0
 8005748:	d118      	bne.n	800577c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800574a:	4b8b      	ldr	r3, [pc, #556]	; (8005978 <HAL_RCC_OscConfig+0x4f8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a8a      	ldr	r2, [pc, #552]	; (8005978 <HAL_RCC_OscConfig+0x4f8>)
 8005750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005756:	f7fe ff69 	bl	800462c <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800575e:	f7fe ff65 	bl	800462c <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b64      	cmp	r3, #100	; 0x64
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e0fd      	b.n	800596c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005770:	4b81      	ldr	r3, [pc, #516]	; (8005978 <HAL_RCC_OscConfig+0x4f8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0f0      	beq.n	800575e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d106      	bne.n	8005792 <HAL_RCC_OscConfig+0x312>
 8005784:	4b7b      	ldr	r3, [pc, #492]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	4a7a      	ldr	r2, [pc, #488]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 800578a:	f043 0301 	orr.w	r3, r3, #1
 800578e:	6213      	str	r3, [r2, #32]
 8005790:	e02d      	b.n	80057ee <HAL_RCC_OscConfig+0x36e>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10c      	bne.n	80057b4 <HAL_RCC_OscConfig+0x334>
 800579a:	4b76      	ldr	r3, [pc, #472]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	4a75      	ldr	r2, [pc, #468]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 80057a0:	f023 0301 	bic.w	r3, r3, #1
 80057a4:	6213      	str	r3, [r2, #32]
 80057a6:	4b73      	ldr	r3, [pc, #460]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	4a72      	ldr	r2, [pc, #456]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 80057ac:	f023 0304 	bic.w	r3, r3, #4
 80057b0:	6213      	str	r3, [r2, #32]
 80057b2:	e01c      	b.n	80057ee <HAL_RCC_OscConfig+0x36e>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	2b05      	cmp	r3, #5
 80057ba:	d10c      	bne.n	80057d6 <HAL_RCC_OscConfig+0x356>
 80057bc:	4b6d      	ldr	r3, [pc, #436]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	4a6c      	ldr	r2, [pc, #432]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 80057c2:	f043 0304 	orr.w	r3, r3, #4
 80057c6:	6213      	str	r3, [r2, #32]
 80057c8:	4b6a      	ldr	r3, [pc, #424]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	4a69      	ldr	r2, [pc, #420]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 80057ce:	f043 0301 	orr.w	r3, r3, #1
 80057d2:	6213      	str	r3, [r2, #32]
 80057d4:	e00b      	b.n	80057ee <HAL_RCC_OscConfig+0x36e>
 80057d6:	4b67      	ldr	r3, [pc, #412]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	4a66      	ldr	r2, [pc, #408]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 80057dc:	f023 0301 	bic.w	r3, r3, #1
 80057e0:	6213      	str	r3, [r2, #32]
 80057e2:	4b64      	ldr	r3, [pc, #400]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	4a63      	ldr	r2, [pc, #396]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 80057e8:	f023 0304 	bic.w	r3, r3, #4
 80057ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d015      	beq.n	8005822 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057f6:	f7fe ff19 	bl	800462c <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057fc:	e00a      	b.n	8005814 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057fe:	f7fe ff15 	bl	800462c <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	f241 3288 	movw	r2, #5000	; 0x1388
 800580c:	4293      	cmp	r3, r2
 800580e:	d901      	bls.n	8005814 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e0ab      	b.n	800596c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005814:	4b57      	ldr	r3, [pc, #348]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0ee      	beq.n	80057fe <HAL_RCC_OscConfig+0x37e>
 8005820:	e014      	b.n	800584c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005822:	f7fe ff03 	bl	800462c <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005828:	e00a      	b.n	8005840 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582a:	f7fe feff 	bl	800462c <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	f241 3288 	movw	r2, #5000	; 0x1388
 8005838:	4293      	cmp	r3, r2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e095      	b.n	800596c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005840:	4b4c      	ldr	r3, [pc, #304]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1ee      	bne.n	800582a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d105      	bne.n	800585e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005852:	4b48      	ldr	r3, [pc, #288]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	4a47      	ldr	r2, [pc, #284]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 8005858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800585c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 8081 	beq.w	800596a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005868:	4b42      	ldr	r3, [pc, #264]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f003 030c 	and.w	r3, r3, #12
 8005870:	2b08      	cmp	r3, #8
 8005872:	d061      	beq.n	8005938 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	2b02      	cmp	r3, #2
 800587a:	d146      	bne.n	800590a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800587c:	4b3f      	ldr	r3, [pc, #252]	; (800597c <HAL_RCC_OscConfig+0x4fc>)
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005882:	f7fe fed3 	bl	800462c <HAL_GetTick>
 8005886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005888:	e008      	b.n	800589c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800588a:	f7fe fecf 	bl	800462c <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e067      	b.n	800596c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800589c:	4b35      	ldr	r3, [pc, #212]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1f0      	bne.n	800588a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b0:	d108      	bne.n	80058c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80058b2:	4b30      	ldr	r3, [pc, #192]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	492d      	ldr	r1, [pc, #180]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058c4:	4b2b      	ldr	r3, [pc, #172]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a19      	ldr	r1, [r3, #32]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	430b      	orrs	r3, r1
 80058d6:	4927      	ldr	r1, [pc, #156]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058dc:	4b27      	ldr	r3, [pc, #156]	; (800597c <HAL_RCC_OscConfig+0x4fc>)
 80058de:	2201      	movs	r2, #1
 80058e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e2:	f7fe fea3 	bl	800462c <HAL_GetTick>
 80058e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058e8:	e008      	b.n	80058fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ea:	f7fe fe9f 	bl	800462c <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e037      	b.n	800596c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058fc:	4b1d      	ldr	r3, [pc, #116]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d0f0      	beq.n	80058ea <HAL_RCC_OscConfig+0x46a>
 8005908:	e02f      	b.n	800596a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800590a:	4b1c      	ldr	r3, [pc, #112]	; (800597c <HAL_RCC_OscConfig+0x4fc>)
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005910:	f7fe fe8c 	bl	800462c <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005918:	f7fe fe88 	bl	800462c <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e020      	b.n	800596c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800592a:	4b12      	ldr	r3, [pc, #72]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1f0      	bne.n	8005918 <HAL_RCC_OscConfig+0x498>
 8005936:	e018      	b.n	800596a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e013      	b.n	800596c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005944:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <HAL_RCC_OscConfig+0x4f4>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	429a      	cmp	r2, r3
 8005956:	d106      	bne.n	8005966 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005962:	429a      	cmp	r2, r3
 8005964:	d001      	beq.n	800596a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e000      	b.n	800596c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	40021000 	.word	0x40021000
 8005978:	40007000 	.word	0x40007000
 800597c:	42420060 	.word	0x42420060

08005980 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e0d0      	b.n	8005b36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005994:	4b6a      	ldr	r3, [pc, #424]	; (8005b40 <HAL_RCC_ClockConfig+0x1c0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d910      	bls.n	80059c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a2:	4b67      	ldr	r3, [pc, #412]	; (8005b40 <HAL_RCC_ClockConfig+0x1c0>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f023 0207 	bic.w	r2, r3, #7
 80059aa:	4965      	ldr	r1, [pc, #404]	; (8005b40 <HAL_RCC_ClockConfig+0x1c0>)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b2:	4b63      	ldr	r3, [pc, #396]	; (8005b40 <HAL_RCC_ClockConfig+0x1c0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d001      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e0b8      	b.n	8005b36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d020      	beq.n	8005a12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d005      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059dc:	4b59      	ldr	r3, [pc, #356]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4a58      	ldr	r2, [pc, #352]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 80059e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0308 	and.w	r3, r3, #8
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059f4:	4b53      	ldr	r3, [pc, #332]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	4a52      	ldr	r2, [pc, #328]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 80059fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80059fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a00:	4b50      	ldr	r3, [pc, #320]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	494d      	ldr	r1, [pc, #308]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d040      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d107      	bne.n	8005a36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a26:	4b47      	ldr	r3, [pc, #284]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d115      	bne.n	8005a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e07f      	b.n	8005b36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d107      	bne.n	8005a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3e:	4b41      	ldr	r3, [pc, #260]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e073      	b.n	8005b36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a4e:	4b3d      	ldr	r3, [pc, #244]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e06b      	b.n	8005b36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a5e:	4b39      	ldr	r3, [pc, #228]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f023 0203 	bic.w	r2, r3, #3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	4936      	ldr	r1, [pc, #216]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a70:	f7fe fddc 	bl	800462c <HAL_GetTick>
 8005a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a76:	e00a      	b.n	8005a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a78:	f7fe fdd8 	bl	800462c <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e053      	b.n	8005b36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8e:	4b2d      	ldr	r3, [pc, #180]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f003 020c 	and.w	r2, r3, #12
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d1eb      	bne.n	8005a78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005aa0:	4b27      	ldr	r3, [pc, #156]	; (8005b40 <HAL_RCC_ClockConfig+0x1c0>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d210      	bcs.n	8005ad0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aae:	4b24      	ldr	r3, [pc, #144]	; (8005b40 <HAL_RCC_ClockConfig+0x1c0>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f023 0207 	bic.w	r2, r3, #7
 8005ab6:	4922      	ldr	r1, [pc, #136]	; (8005b40 <HAL_RCC_ClockConfig+0x1c0>)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005abe:	4b20      	ldr	r3, [pc, #128]	; (8005b40 <HAL_RCC_ClockConfig+0x1c0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d001      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e032      	b.n	8005b36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d008      	beq.n	8005aee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005adc:	4b19      	ldr	r3, [pc, #100]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	4916      	ldr	r1, [pc, #88]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d009      	beq.n	8005b0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005afa:	4b12      	ldr	r3, [pc, #72]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	490e      	ldr	r1, [pc, #56]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b0e:	f000 f821 	bl	8005b54 <HAL_RCC_GetSysClockFreq>
 8005b12:	4601      	mov	r1, r0
 8005b14:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	091b      	lsrs	r3, r3, #4
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	4a0a      	ldr	r2, [pc, #40]	; (8005b48 <HAL_RCC_ClockConfig+0x1c8>)
 8005b20:	5cd3      	ldrb	r3, [r2, r3]
 8005b22:	fa21 f303 	lsr.w	r3, r1, r3
 8005b26:	4a09      	ldr	r2, [pc, #36]	; (8005b4c <HAL_RCC_ClockConfig+0x1cc>)
 8005b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b2a:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <HAL_RCC_ClockConfig+0x1d0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fe fd3a 	bl	80045a8 <HAL_InitTick>

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	40022000 	.word	0x40022000
 8005b44:	40021000 	.word	0x40021000
 8005b48:	08007080 	.word	0x08007080
 8005b4c:	20000058 	.word	0x20000058
 8005b50:	2000005c 	.word	0x2000005c

08005b54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b54:	b490      	push	{r4, r7}
 8005b56:	b08a      	sub	sp, #40	; 0x28
 8005b58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005b5a:	4b2a      	ldr	r3, [pc, #168]	; (8005c04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005b5c:	1d3c      	adds	r4, r7, #4
 8005b5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005b64:	4b28      	ldr	r3, [pc, #160]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61bb      	str	r3, [r7, #24]
 8005b72:	2300      	movs	r3, #0
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005b7e:	4b23      	ldr	r3, [pc, #140]	; (8005c0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	f003 030c 	and.w	r3, r3, #12
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d002      	beq.n	8005b94 <HAL_RCC_GetSysClockFreq+0x40>
 8005b8e:	2b08      	cmp	r3, #8
 8005b90:	d003      	beq.n	8005b9a <HAL_RCC_GetSysClockFreq+0x46>
 8005b92:	e02d      	b.n	8005bf0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b94:	4b1e      	ldr	r3, [pc, #120]	; (8005c10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b96:	623b      	str	r3, [r7, #32]
      break;
 8005b98:	e02d      	b.n	8005bf6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	0c9b      	lsrs	r3, r3, #18
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005bac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d013      	beq.n	8005be0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005bb8:	4b14      	ldr	r3, [pc, #80]	; (8005c0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	0c5b      	lsrs	r3, r3, #17
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005bcc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	4a0f      	ldr	r2, [pc, #60]	; (8005c10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005bd2:	fb02 f203 	mul.w	r2, r2, r3
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8005bde:	e004      	b.n	8005bea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	4a0c      	ldr	r2, [pc, #48]	; (8005c14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005be4:	fb02 f303 	mul.w	r3, r2, r3
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	623b      	str	r3, [r7, #32]
      break;
 8005bee:	e002      	b.n	8005bf6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005bf0:	4b07      	ldr	r3, [pc, #28]	; (8005c10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005bf2:	623b      	str	r3, [r7, #32]
      break;
 8005bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3728      	adds	r7, #40	; 0x28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bc90      	pop	{r4, r7}
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	0800672c 	.word	0x0800672c
 8005c08:	0800673c 	.word	0x0800673c
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	007a1200 	.word	0x007a1200
 8005c14:	003d0900 	.word	0x003d0900

08005c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c1c:	4b02      	ldr	r3, [pc, #8]	; (8005c28 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr
 8005c28:	20000058 	.word	0x20000058

08005c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c30:	f7ff fff2 	bl	8005c18 <HAL_RCC_GetHCLKFreq>
 8005c34:	4601      	mov	r1, r0
 8005c36:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	0a1b      	lsrs	r3, r3, #8
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	4a03      	ldr	r2, [pc, #12]	; (8005c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c42:	5cd3      	ldrb	r3, [r2, r3]
 8005c44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	08007090 	.word	0x08007090

08005c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c58:	f7ff ffde 	bl	8005c18 <HAL_RCC_GetHCLKFreq>
 8005c5c:	4601      	mov	r1, r0
 8005c5e:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	0adb      	lsrs	r3, r3, #11
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	4a03      	ldr	r2, [pc, #12]	; (8005c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c6a:	5cd3      	ldrb	r3, [r2, r3]
 8005c6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40021000 	.word	0x40021000
 8005c78:	08007090 	.word	0x08007090

08005c7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c84:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <RCC_Delay+0x34>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a0a      	ldr	r2, [pc, #40]	; (8005cb4 <RCC_Delay+0x38>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	0a5b      	lsrs	r3, r3, #9
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	fb02 f303 	mul.w	r3, r2, r3
 8005c96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005c98:	bf00      	nop
  }
  while (Delay --);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1e5a      	subs	r2, r3, #1
 8005c9e:	60fa      	str	r2, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1f9      	bne.n	8005c98 <RCC_Delay+0x1c>
}
 8005ca4:	bf00      	nop
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	20000058 	.word	0x20000058
 8005cb4:	10624dd3 	.word	0x10624dd3

08005cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e041      	b.n	8005d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fc fd1c 	bl	800271c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	f000 f9ba 	bl	8006070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
	...

08005d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d001      	beq.n	8005d70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e044      	b.n	8005dfa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0201 	orr.w	r2, r2, #1
 8005d86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1d      	ldr	r2, [pc, #116]	; (8005e04 <HAL_TIM_Base_Start_IT+0xac>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d018      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1c      	ldr	r2, [pc, #112]	; (8005e08 <HAL_TIM_Base_Start_IT+0xb0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d013      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da4:	d00e      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a18      	ldr	r2, [pc, #96]	; (8005e0c <HAL_TIM_Base_Start_IT+0xb4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d009      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a16      	ldr	r2, [pc, #88]	; (8005e10 <HAL_TIM_Base_Start_IT+0xb8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d004      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x6c>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <HAL_TIM_Base_Start_IT+0xbc>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d111      	bne.n	8005de8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b06      	cmp	r3, #6
 8005dd4:	d010      	beq.n	8005df8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f042 0201 	orr.w	r2, r2, #1
 8005de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de6:	e007      	b.n	8005df8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0201 	orr.w	r2, r2, #1
 8005df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr
 8005e04:	40012c00 	.word	0x40012c00
 8005e08:	40013400 	.word	0x40013400
 8005e0c:	40000400 	.word	0x40000400
 8005e10:	40000800 	.word	0x40000800
 8005e14:	40000c00 	.word	0x40000c00

08005e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d122      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d11b      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0202 	mvn.w	r2, #2
 8005e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f8ed 	bl	800603a <HAL_TIM_IC_CaptureCallback>
 8005e60:	e005      	b.n	8005e6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f8e0 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f8ef 	bl	800604c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d122      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d11b      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0204 	mvn.w	r2, #4
 8005e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f8c3 	bl	800603a <HAL_TIM_IC_CaptureCallback>
 8005eb4:	e005      	b.n	8005ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f8b6 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f8c5 	bl	800604c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d122      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f003 0308 	and.w	r3, r3, #8
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d11b      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0208 	mvn.w	r2, #8
 8005eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2204      	movs	r2, #4
 8005ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f899 	bl	800603a <HAL_TIM_IC_CaptureCallback>
 8005f08:	e005      	b.n	8005f16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f88c 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f89b 	bl	800604c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0310 	and.w	r3, r3, #16
 8005f26:	2b10      	cmp	r3, #16
 8005f28:	d122      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b10      	cmp	r3, #16
 8005f36:	d11b      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0210 	mvn.w	r2, #16
 8005f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2208      	movs	r2, #8
 8005f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f86f 	bl	800603a <HAL_TIM_IC_CaptureCallback>
 8005f5c:	e005      	b.n	8005f6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f862 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f871 	bl	800604c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d10e      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d107      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0201 	mvn.w	r2, #1
 8005f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7fc f990 	bl	80022bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa6:	2b80      	cmp	r3, #128	; 0x80
 8005fa8:	d10e      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb4:	2b80      	cmp	r3, #128	; 0x80
 8005fb6:	d107      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f943 	bl	800624e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd2:	2b40      	cmp	r3, #64	; 0x40
 8005fd4:	d10e      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe0:	2b40      	cmp	r3, #64	; 0x40
 8005fe2:	d107      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f835 	bl	800605e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	d10e      	bne.n	8006020 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b20      	cmp	r3, #32
 800600e:	d107      	bne.n	8006020 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0220 	mvn.w	r2, #32
 8006018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f90e 	bl	800623c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	4770      	bx	lr

0800603a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	bc80      	pop	{r7}
 800604a:	4770      	bx	lr

0800604c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr

0800605e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800605e:	b480      	push	{r7}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	bc80      	pop	{r7}
 800606e:	4770      	bx	lr

08006070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a33      	ldr	r2, [pc, #204]	; (8006150 <TIM_Base_SetConfig+0xe0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d013      	beq.n	80060b0 <TIM_Base_SetConfig+0x40>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a32      	ldr	r2, [pc, #200]	; (8006154 <TIM_Base_SetConfig+0xe4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00f      	beq.n	80060b0 <TIM_Base_SetConfig+0x40>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006096:	d00b      	beq.n	80060b0 <TIM_Base_SetConfig+0x40>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a2f      	ldr	r2, [pc, #188]	; (8006158 <TIM_Base_SetConfig+0xe8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d007      	beq.n	80060b0 <TIM_Base_SetConfig+0x40>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a2e      	ldr	r2, [pc, #184]	; (800615c <TIM_Base_SetConfig+0xec>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d003      	beq.n	80060b0 <TIM_Base_SetConfig+0x40>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a2d      	ldr	r2, [pc, #180]	; (8006160 <TIM_Base_SetConfig+0xf0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d108      	bne.n	80060c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a22      	ldr	r2, [pc, #136]	; (8006150 <TIM_Base_SetConfig+0xe0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d013      	beq.n	80060f2 <TIM_Base_SetConfig+0x82>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a21      	ldr	r2, [pc, #132]	; (8006154 <TIM_Base_SetConfig+0xe4>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00f      	beq.n	80060f2 <TIM_Base_SetConfig+0x82>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d8:	d00b      	beq.n	80060f2 <TIM_Base_SetConfig+0x82>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a1e      	ldr	r2, [pc, #120]	; (8006158 <TIM_Base_SetConfig+0xe8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d007      	beq.n	80060f2 <TIM_Base_SetConfig+0x82>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a1d      	ldr	r2, [pc, #116]	; (800615c <TIM_Base_SetConfig+0xec>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d003      	beq.n	80060f2 <TIM_Base_SetConfig+0x82>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a1c      	ldr	r2, [pc, #112]	; (8006160 <TIM_Base_SetConfig+0xf0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d108      	bne.n	8006104 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a09      	ldr	r2, [pc, #36]	; (8006150 <TIM_Base_SetConfig+0xe0>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d003      	beq.n	8006138 <TIM_Base_SetConfig+0xc8>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a08      	ldr	r2, [pc, #32]	; (8006154 <TIM_Base_SetConfig+0xe4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d103      	bne.n	8006140 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	615a      	str	r2, [r3, #20]
}
 8006146:	bf00      	nop
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr
 8006150:	40012c00 	.word	0x40012c00
 8006154:	40013400 	.word	0x40013400
 8006158:	40000400 	.word	0x40000400
 800615c:	40000800 	.word	0x40000800
 8006160:	40000c00 	.word	0x40000c00

08006164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006178:	2302      	movs	r3, #2
 800617a:	e050      	b.n	800621e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a1b      	ldr	r2, [pc, #108]	; (8006228 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d018      	beq.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a19      	ldr	r2, [pc, #100]	; (800622c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d2:	d00e      	beq.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a15      	ldr	r2, [pc, #84]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d009      	beq.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a14      	ldr	r2, [pc, #80]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d004      	beq.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a12      	ldr	r2, [pc, #72]	; (8006238 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d10c      	bne.n	800620c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	4313      	orrs	r3, r2
 8006202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	bc80      	pop	{r7}
 8006226:	4770      	bx	lr
 8006228:	40012c00 	.word	0x40012c00
 800622c:	40013400 	.word	0x40013400
 8006230:	40000400 	.word	0x40000400
 8006234:	40000800 	.word	0x40000800
 8006238:	40000c00 	.word	0x40000c00

0800623c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	bc80      	pop	{r7}
 800624c:	4770      	bx	lr

0800624e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr

08006260 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e03f      	b.n	80062f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d106      	bne.n	800628c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7fc fa98 	bl	80027bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2224      	movs	r2, #36	; 0x24
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f829 	bl	80062fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	691a      	ldr	r2, [r3, #16]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	695a      	ldr	r2, [r3, #20]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006336:	f023 030c 	bic.w	r3, r3, #12
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6812      	ldr	r2, [r2, #0]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	430b      	orrs	r3, r1
 8006342:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	699a      	ldr	r2, [r3, #24]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a2c      	ldr	r2, [pc, #176]	; (8006410 <UART_SetConfig+0x114>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d103      	bne.n	800636c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006364:	f7ff fc76 	bl	8005c54 <HAL_RCC_GetPCLK2Freq>
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	e002      	b.n	8006372 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800636c:	f7ff fc5e 	bl	8005c2c <HAL_RCC_GetPCLK1Freq>
 8006370:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	009a      	lsls	r2, r3, #2
 800637c:	441a      	add	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	fbb2 f3f3 	udiv	r3, r2, r3
 8006388:	4a22      	ldr	r2, [pc, #136]	; (8006414 <UART_SetConfig+0x118>)
 800638a:	fba2 2303 	umull	r2, r3, r2, r3
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	0119      	lsls	r1, r3, #4
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	009a      	lsls	r2, r3, #2
 800639c:	441a      	add	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80063a8:	4b1a      	ldr	r3, [pc, #104]	; (8006414 <UART_SetConfig+0x118>)
 80063aa:	fba3 0302 	umull	r0, r3, r3, r2
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	2064      	movs	r0, #100	; 0x64
 80063b2:	fb00 f303 	mul.w	r3, r0, r3
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	3332      	adds	r3, #50	; 0x32
 80063bc:	4a15      	ldr	r2, [pc, #84]	; (8006414 <UART_SetConfig+0x118>)
 80063be:	fba2 2303 	umull	r2, r3, r2, r3
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063c8:	4419      	add	r1, r3
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	009a      	lsls	r2, r3, #2
 80063d4:	441a      	add	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80063e0:	4b0c      	ldr	r3, [pc, #48]	; (8006414 <UART_SetConfig+0x118>)
 80063e2:	fba3 0302 	umull	r0, r3, r3, r2
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	2064      	movs	r0, #100	; 0x64
 80063ea:	fb00 f303 	mul.w	r3, r0, r3
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	3332      	adds	r3, #50	; 0x32
 80063f4:	4a07      	ldr	r2, [pc, #28]	; (8006414 <UART_SetConfig+0x118>)
 80063f6:	fba2 2303 	umull	r2, r3, r2, r3
 80063fa:	095b      	lsrs	r3, r3, #5
 80063fc:	f003 020f 	and.w	r2, r3, #15
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	440a      	add	r2, r1
 8006406:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006408:	bf00      	nop
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	40013800 	.word	0x40013800
 8006414:	51eb851f 	.word	0x51eb851f

08006418 <__errno>:
 8006418:	4b01      	ldr	r3, [pc, #4]	; (8006420 <__errno+0x8>)
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	20000064 	.word	0x20000064

08006424 <__libc_init_array>:
 8006424:	b570      	push	{r4, r5, r6, lr}
 8006426:	2500      	movs	r5, #0
 8006428:	4e0c      	ldr	r6, [pc, #48]	; (800645c <__libc_init_array+0x38>)
 800642a:	4c0d      	ldr	r4, [pc, #52]	; (8006460 <__libc_init_array+0x3c>)
 800642c:	1ba4      	subs	r4, r4, r6
 800642e:	10a4      	asrs	r4, r4, #2
 8006430:	42a5      	cmp	r5, r4
 8006432:	d109      	bne.n	8006448 <__libc_init_array+0x24>
 8006434:	f000 f8fa 	bl	800662c <_init>
 8006438:	2500      	movs	r5, #0
 800643a:	4e0a      	ldr	r6, [pc, #40]	; (8006464 <__libc_init_array+0x40>)
 800643c:	4c0a      	ldr	r4, [pc, #40]	; (8006468 <__libc_init_array+0x44>)
 800643e:	1ba4      	subs	r4, r4, r6
 8006440:	10a4      	asrs	r4, r4, #2
 8006442:	42a5      	cmp	r5, r4
 8006444:	d105      	bne.n	8006452 <__libc_init_array+0x2e>
 8006446:	bd70      	pop	{r4, r5, r6, pc}
 8006448:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800644c:	4798      	blx	r3
 800644e:	3501      	adds	r5, #1
 8006450:	e7ee      	b.n	8006430 <__libc_init_array+0xc>
 8006452:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006456:	4798      	blx	r3
 8006458:	3501      	adds	r5, #1
 800645a:	e7f2      	b.n	8006442 <__libc_init_array+0x1e>
 800645c:	0800eb3c 	.word	0x0800eb3c
 8006460:	0800eb3c 	.word	0x0800eb3c
 8006464:	0800eb3c 	.word	0x0800eb3c
 8006468:	0800eb40 	.word	0x0800eb40

0800646c <memcpy>:
 800646c:	b510      	push	{r4, lr}
 800646e:	1e43      	subs	r3, r0, #1
 8006470:	440a      	add	r2, r1
 8006472:	4291      	cmp	r1, r2
 8006474:	d100      	bne.n	8006478 <memcpy+0xc>
 8006476:	bd10      	pop	{r4, pc}
 8006478:	f811 4b01 	ldrb.w	r4, [r1], #1
 800647c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006480:	e7f7      	b.n	8006472 <memcpy+0x6>

08006482 <memset>:
 8006482:	4603      	mov	r3, r0
 8006484:	4402      	add	r2, r0
 8006486:	4293      	cmp	r3, r2
 8006488:	d100      	bne.n	800648c <memset+0xa>
 800648a:	4770      	bx	lr
 800648c:	f803 1b01 	strb.w	r1, [r3], #1
 8006490:	e7f9      	b.n	8006486 <memset+0x4>
	...

08006494 <srand>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <srand+0x38>)
 8006498:	4605      	mov	r5, r0
 800649a:	681c      	ldr	r4, [r3, #0]
 800649c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800649e:	b97b      	cbnz	r3, 80064c0 <srand+0x2c>
 80064a0:	2018      	movs	r0, #24
 80064a2:	f000 f84f 	bl	8006544 <malloc>
 80064a6:	4a0a      	ldr	r2, [pc, #40]	; (80064d0 <srand+0x3c>)
 80064a8:	4b0a      	ldr	r3, [pc, #40]	; (80064d4 <srand+0x40>)
 80064aa:	63a0      	str	r0, [r4, #56]	; 0x38
 80064ac:	e9c0 2300 	strd	r2, r3, [r0]
 80064b0:	4b09      	ldr	r3, [pc, #36]	; (80064d8 <srand+0x44>)
 80064b2:	2201      	movs	r2, #1
 80064b4:	6083      	str	r3, [r0, #8]
 80064b6:	230b      	movs	r3, #11
 80064b8:	8183      	strh	r3, [r0, #12]
 80064ba:	2300      	movs	r3, #0
 80064bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80064c0:	2200      	movs	r2, #0
 80064c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80064c4:	611d      	str	r5, [r3, #16]
 80064c6:	615a      	str	r2, [r3, #20]
 80064c8:	bd38      	pop	{r3, r4, r5, pc}
 80064ca:	bf00      	nop
 80064cc:	20000064 	.word	0x20000064
 80064d0:	abcd330e 	.word	0xabcd330e
 80064d4:	e66d1234 	.word	0xe66d1234
 80064d8:	0005deec 	.word	0x0005deec

080064dc <rand>:
 80064dc:	b538      	push	{r3, r4, r5, lr}
 80064de:	4b13      	ldr	r3, [pc, #76]	; (800652c <rand+0x50>)
 80064e0:	681c      	ldr	r4, [r3, #0]
 80064e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80064e4:	b97b      	cbnz	r3, 8006506 <rand+0x2a>
 80064e6:	2018      	movs	r0, #24
 80064e8:	f000 f82c 	bl	8006544 <malloc>
 80064ec:	4a10      	ldr	r2, [pc, #64]	; (8006530 <rand+0x54>)
 80064ee:	4b11      	ldr	r3, [pc, #68]	; (8006534 <rand+0x58>)
 80064f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80064f2:	e9c0 2300 	strd	r2, r3, [r0]
 80064f6:	4b10      	ldr	r3, [pc, #64]	; (8006538 <rand+0x5c>)
 80064f8:	2201      	movs	r2, #1
 80064fa:	6083      	str	r3, [r0, #8]
 80064fc:	230b      	movs	r3, #11
 80064fe:	8183      	strh	r3, [r0, #12]
 8006500:	2300      	movs	r3, #0
 8006502:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006506:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006508:	480c      	ldr	r0, [pc, #48]	; (800653c <rand+0x60>)
 800650a:	690a      	ldr	r2, [r1, #16]
 800650c:	694b      	ldr	r3, [r1, #20]
 800650e:	4350      	muls	r0, r2
 8006510:	4c0b      	ldr	r4, [pc, #44]	; (8006540 <rand+0x64>)
 8006512:	fb04 0003 	mla	r0, r4, r3, r0
 8006516:	fba2 2304 	umull	r2, r3, r2, r4
 800651a:	4403      	add	r3, r0
 800651c:	1c54      	adds	r4, r2, #1
 800651e:	f143 0500 	adc.w	r5, r3, #0
 8006522:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8006526:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	20000064 	.word	0x20000064
 8006530:	abcd330e 	.word	0xabcd330e
 8006534:	e66d1234 	.word	0xe66d1234
 8006538:	0005deec 	.word	0x0005deec
 800653c:	5851f42d 	.word	0x5851f42d
 8006540:	4c957f2d 	.word	0x4c957f2d

08006544 <malloc>:
 8006544:	4b02      	ldr	r3, [pc, #8]	; (8006550 <malloc+0xc>)
 8006546:	4601      	mov	r1, r0
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	f000 b803 	b.w	8006554 <_malloc_r>
 800654e:	bf00      	nop
 8006550:	20000064 	.word	0x20000064

08006554 <_malloc_r>:
 8006554:	b570      	push	{r4, r5, r6, lr}
 8006556:	1ccd      	adds	r5, r1, #3
 8006558:	f025 0503 	bic.w	r5, r5, #3
 800655c:	3508      	adds	r5, #8
 800655e:	2d0c      	cmp	r5, #12
 8006560:	bf38      	it	cc
 8006562:	250c      	movcc	r5, #12
 8006564:	2d00      	cmp	r5, #0
 8006566:	4606      	mov	r6, r0
 8006568:	db01      	blt.n	800656e <_malloc_r+0x1a>
 800656a:	42a9      	cmp	r1, r5
 800656c:	d903      	bls.n	8006576 <_malloc_r+0x22>
 800656e:	230c      	movs	r3, #12
 8006570:	6033      	str	r3, [r6, #0]
 8006572:	2000      	movs	r0, #0
 8006574:	bd70      	pop	{r4, r5, r6, pc}
 8006576:	f000 f857 	bl	8006628 <__malloc_lock>
 800657a:	4a21      	ldr	r2, [pc, #132]	; (8006600 <_malloc_r+0xac>)
 800657c:	6814      	ldr	r4, [r2, #0]
 800657e:	4621      	mov	r1, r4
 8006580:	b991      	cbnz	r1, 80065a8 <_malloc_r+0x54>
 8006582:	4c20      	ldr	r4, [pc, #128]	; (8006604 <_malloc_r+0xb0>)
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	b91b      	cbnz	r3, 8006590 <_malloc_r+0x3c>
 8006588:	4630      	mov	r0, r6
 800658a:	f000 f83d 	bl	8006608 <_sbrk_r>
 800658e:	6020      	str	r0, [r4, #0]
 8006590:	4629      	mov	r1, r5
 8006592:	4630      	mov	r0, r6
 8006594:	f000 f838 	bl	8006608 <_sbrk_r>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d124      	bne.n	80065e6 <_malloc_r+0x92>
 800659c:	230c      	movs	r3, #12
 800659e:	4630      	mov	r0, r6
 80065a0:	6033      	str	r3, [r6, #0]
 80065a2:	f000 f842 	bl	800662a <__malloc_unlock>
 80065a6:	e7e4      	b.n	8006572 <_malloc_r+0x1e>
 80065a8:	680b      	ldr	r3, [r1, #0]
 80065aa:	1b5b      	subs	r3, r3, r5
 80065ac:	d418      	bmi.n	80065e0 <_malloc_r+0x8c>
 80065ae:	2b0b      	cmp	r3, #11
 80065b0:	d90f      	bls.n	80065d2 <_malloc_r+0x7e>
 80065b2:	600b      	str	r3, [r1, #0]
 80065b4:	18cc      	adds	r4, r1, r3
 80065b6:	50cd      	str	r5, [r1, r3]
 80065b8:	4630      	mov	r0, r6
 80065ba:	f000 f836 	bl	800662a <__malloc_unlock>
 80065be:	f104 000b 	add.w	r0, r4, #11
 80065c2:	1d23      	adds	r3, r4, #4
 80065c4:	f020 0007 	bic.w	r0, r0, #7
 80065c8:	1ac3      	subs	r3, r0, r3
 80065ca:	d0d3      	beq.n	8006574 <_malloc_r+0x20>
 80065cc:	425a      	negs	r2, r3
 80065ce:	50e2      	str	r2, [r4, r3]
 80065d0:	e7d0      	b.n	8006574 <_malloc_r+0x20>
 80065d2:	684b      	ldr	r3, [r1, #4]
 80065d4:	428c      	cmp	r4, r1
 80065d6:	bf16      	itet	ne
 80065d8:	6063      	strne	r3, [r4, #4]
 80065da:	6013      	streq	r3, [r2, #0]
 80065dc:	460c      	movne	r4, r1
 80065de:	e7eb      	b.n	80065b8 <_malloc_r+0x64>
 80065e0:	460c      	mov	r4, r1
 80065e2:	6849      	ldr	r1, [r1, #4]
 80065e4:	e7cc      	b.n	8006580 <_malloc_r+0x2c>
 80065e6:	1cc4      	adds	r4, r0, #3
 80065e8:	f024 0403 	bic.w	r4, r4, #3
 80065ec:	42a0      	cmp	r0, r4
 80065ee:	d005      	beq.n	80065fc <_malloc_r+0xa8>
 80065f0:	1a21      	subs	r1, r4, r0
 80065f2:	4630      	mov	r0, r6
 80065f4:	f000 f808 	bl	8006608 <_sbrk_r>
 80065f8:	3001      	adds	r0, #1
 80065fa:	d0cf      	beq.n	800659c <_malloc_r+0x48>
 80065fc:	6025      	str	r5, [r4, #0]
 80065fe:	e7db      	b.n	80065b8 <_malloc_r+0x64>
 8006600:	20000580 	.word	0x20000580
 8006604:	20000584 	.word	0x20000584

08006608 <_sbrk_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	2300      	movs	r3, #0
 800660c:	4c05      	ldr	r4, [pc, #20]	; (8006624 <_sbrk_r+0x1c>)
 800660e:	4605      	mov	r5, r0
 8006610:	4608      	mov	r0, r1
 8006612:	6023      	str	r3, [r4, #0]
 8006614:	f7fc f810 	bl	8002638 <_sbrk>
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d102      	bne.n	8006622 <_sbrk_r+0x1a>
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	b103      	cbz	r3, 8006622 <_sbrk_r+0x1a>
 8006620:	602b      	str	r3, [r5, #0]
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	20000898 	.word	0x20000898

08006628 <__malloc_lock>:
 8006628:	4770      	bx	lr

0800662a <__malloc_unlock>:
 800662a:	4770      	bx	lr

0800662c <_init>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	bf00      	nop
 8006630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006632:	bc08      	pop	{r3}
 8006634:	469e      	mov	lr, r3
 8006636:	4770      	bx	lr

08006638 <_fini>:
 8006638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663a:	bf00      	nop
 800663c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800663e:	bc08      	pop	{r3}
 8006640:	469e      	mov	lr, r3
 8006642:	4770      	bx	lr
